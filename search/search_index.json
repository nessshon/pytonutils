{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Tonutils is a high-level, object-oriented Python library designed to simplify interaction with the TON blockchain. It integrates several major services and tools, including:</p> <p>Tip</p> <p>For a better understanding of TON internal architecture and core principles, we also recommend reviewing the official TON documentation.</p> <p>RPC APIs</p> <ul> <li>tonapi.io \u2014 REST API for accessing TON blockchain data.</li> <li>toncenter.com \u2014 fast and reliable HTTP API for The Open Network.</li> <li>quicknode.com \u2014 low-latency global infrastructure for HTTP access to TON.</li> <li>tatum.io \u2014 RPCs and APIs for Web3 projects: fast, reliable, affordable.</li> </ul> <p>Native ADNL</p> <ul> <li>pytoniq \u2014 library for direct interaction with TON Lite servers.</li> </ul> <p>Tonutils combines these capabilities into a powerful and flexible toolkit for developers, making it easier to build applications on top of the TON ecosystem.</p> <p>Tip</p> <p>To retrieve blockchain data \u2014 such as transaction lists, NFT lists, counts, and similar details \u2014 it is strongly recommended to use indexer APIs like Toncenter, Tonapi, and similar services. For working specifically with Tonapi, you can also use my Python library pytonapi.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Your contribution is welcome! If you have ideas for improvements or have identified a bug, please create an issue or submit a pull request on GitHub.</p> <p>Note</p> <p>The documentation is currently under development. Sections and materials are continuously being updated and expanded. Some parts may contain inaccuracies or incomplete details; please use with caution.</p>"},{"location":"donate/","title":"Donate","text":"<p>Thank you for considering supporting my work! Your contributions help me continue developing and improving this project. \u2764\ufe0f</p>"},{"location":"donate/#direct-wallet-donations","title":"Direct Wallet Donations","text":"<p>You can send donations directly to the following addresses:</p> <ul> <li> <p>TON <code>UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness</code></p> </li> <li> <p>BTC <code>1FKJDBSxdtsMad84iYY96zLJBVEChehbx1</code></p> </li> <li> <p>USDT (TRC-20) <code>TDHMG7JRkmJBDD1qd4bNhdfoy2uzVd8ixA</code></p> </li> </ul>"},{"location":"donate/#donate-via-bots","title":"Donate via Bots","text":"<p>You can also donate conveniently using these bots:</p> <ul> <li> <p>Crypto Bot Donate through Crypto Bot</p> </li> <li> <p>xRocket Bot Donate through xRocket</p> </li> </ul>"},{"location":"sponsors/","title":"Sponsors","text":"<p>I sincerely thank everyone who supports this project. \u2764\ufe0f</p>"},{"location":"sponsors/#supported-by","title":"Supported by","text":"<ul> <li> <p>TON Society   Through the Grants and Bounties program.</p> </li> <li> <p>TONAPI   Providing essential infrastructure and API services.</p> </li> </ul>"},{"location":"sponsors/#special-thanks","title":"Special Thanks","text":"<ul> <li>Igroman787 </li> <li>Roman Inozemtsev </li> <li>Cron </li> </ul>"},{"location":"sponsors/#supporters","title":"Supporters","text":"<p>Thank you to everyone who has supported this project at any time!</p> <ul> <li><code>svatoshscammer.ton</code></li> <li><code>vtonsdk.t.me</code></li> </ul>"},{"location":"sponsors/#want-to-support","title":"Want to Support?","text":"<p>If you want to support my work, go to the Donate page! Your support helps the project grow and improve.</p>"},{"location":"cookbook/cnft/","title":"Creating Compressed NFTs","text":""},{"location":"cookbook/cnft/#introduction","title":"Introduction","text":"<p>This guide introduces the concept of Compressed NFTs (cNFTs) on the TON blockchain \u2014 a specialized asset format that optimizes data storage using compression algorithms and Merkle trees. It explains how cNFTs reduce storage and transmission costs while maintaining uniqueness and verifiability, and provides practical steps for deploying and managing efficient, large-scale NFT collections.</p>"},{"location":"cookbook/cnft/#features","title":"Features","text":"<ul> <li>Resource savings: Merkle trees store only essential data, reducing gas costs and network load.</li> <li>Improved scalability: Efficient contracts can handle large NFT volumes without performance loss.</li> <li>Optimized data storage: Keeping minimal on-chain information boosts system responsiveness and saves space.</li> <li>Enhanced security: Merkle trees enable fast data integrity checks and robust asset protection.</li> <li>Cost reduction: Shift minting costs to end users and create \u201cvirtual\u201d on-chain items only when needed.</li> </ul>"},{"location":"cookbook/cnft/#support","title":"Support","text":"<p>Current limitations Most popular wallets and marketplaces do not display unclaimed cNFTs or NFTs from collections that are not official partners. For example, the Telegram wallet and the Getgems marketplace index only the first 200 items for unofficial collections, which poses challenges for larger collections.</p> <p>Attack scenario A malicious actor could create hundreds of thousands of NFTs at minimal cost, forcing marketplaces to store all related data\u2014even if the attacker does not host the items but generates them on demand.</p> <p>Potential solution Provide a dedicated interface where users can claim their cNFTs. Once claimed, NFTs are indexed and displayed in wallets and marketplaces as standard NFTs, ensuring better visibility and accessibility.</p>"},{"location":"cookbook/cnft/#setup-deployment","title":"Setup &amp; Deployment","text":""},{"location":"cookbook/cnft/#nft-preparation","title":"NFT preparation","text":"<p>Before deployment, you need to prepare the metadata and images for your NFTs.</p>"},{"location":"cookbook/cnft/#metadata-preparation","title":"Metadata preparation","text":"<ul> <li> <p>Collection metadata   Create a <code>collection.json</code> file that includes the required fields as specified in the NFT token data standard. Example:</p> <pre><code>{\n    \"name\": \"&lt;collection name&gt;\",\n    \"description\": \"&lt;collection description&gt;\",\n    \"image\": \"&lt;link to the image (e.g. https://yourdomain.com/logo.png)&gt;\"\n}\n</code></pre> </li> <li> <p>NFT item metadata   For each NFT, create a separate JSON file (e.g., <code>0.json</code>, <code>1.json</code>, etc.) with the required fields as specified in the NFT token data standard. Example:</p> <pre><code>{\n    \"name\": \"&lt;item name&gt;\",\n    \"description\": \"&lt;item description&gt;\",\n    \"image\": \"&lt;link to the image (e.g. https://yourdomain.com/0.png)&gt;\"\n}\n</code></pre> </li> </ul>"},{"location":"cookbook/cnft/#resource-preparation","title":"Resource preparation","text":"<ul> <li>Images: Prepare images for the collection (for example, <code>logo.png</code> for the avatar) and for each NFT (for example, <code>0.png</code>, <code>1.png</code>, etc.).</li> <li>JSON files: Host your <code>collection.json</code> and NFT JSON files on a publicly accessible server or repository. Ensure each file has a unique URL.</li> </ul> <p>Note</p> <p>All images and JSON files must be directly accessible via their URLs.</p>"},{"location":"cookbook/cnft/#tc-manifest-preparation","title":"TC Manifest preparation","text":"<p>Create a TON Connect manifest JSON file to describe your application during the wallet connection process. Example:</p> <pre><code>{\n  \"url\": \"&lt;app url&gt;\",\n  \"name\": \"&lt;app name&gt;\",\n  \"iconUrl\": \"&lt;app icon url&gt;\"\n}\n</code></pre> <p>Note</p> <p>Ensure that this file is publicly accessible via its URL.</p>"},{"location":"cookbook/cnft/#owner-list-preparation","title":"Owner List preparation","text":"<p>Prepare an <code>owners.txt</code> file that lists the addresses of NFT owners, one per line. The first address corresponds to item index <code>0</code>, the second to item index <code>1</code>, and so on. Example:</p> <pre><code>UQDYzZmfsrGzhObKJUw4gzdeIxEai3jAFbiGKGwxvxHinf4K\nUQCDrgGaI6gWK-qlyw69xWZosurGxrpRgIgSkVsgahUtxZR0\n</code></pre>"},{"location":"cookbook/cnft/#infrastructure-preparation","title":"Infrastructure preparation","text":"<p>Set up a server to host your API and the interface for claiming NFTs. Also, obtain a domain for accessing the API. In this example, a local test deployment is run on a home machine using ngrok to create a public URL.</p>"},{"location":"cookbook/cnft/#claiming-api-setup","title":"Claiming API Setup","text":"<ol> <li> <p>Clone the repository    Clone the project containing all necessary source files:</p> <pre><code>git clone https://github.com/nessshon/cnft-toolbox \n</code></pre> </li> <li> <p>Install dependencies    Install Docker, Docker Compose, and ngrok, and ensure they are properly configured on your machine.</p> </li> <li> <p>Create a Telegram bot    Create a Telegram bot and obtain its API token.</p> </li> <li> <p>Expose your API    Use ngrok to create a public URL for testing:</p> <pre><code>ngrok http 8080 \n</code></pre> <p>For production: Set up a custom domain and configure Nginx to proxy requests to your API on port 8080. This involves:</p> <ul> <li>Registering a domain and pointing it to your server.</li> <li>Configuring Nginx to proxy requests to your API on port 8080.</li> </ul> </li> <li> <p>Create a <code>.env</code> file    Duplicate the <code>env.example</code> file to <code>.env</code> and update it with your specific configuration. The table below describes each key:</p> Key Description Example Notes <code>PORT</code> Port on which the API will run. <code>8080</code> <code>ADMIN_USERNAME</code> Admin username for accessing restricted functionalities. <code>admin</code> <code>ADMIN_PASSWORD</code> Admin password for accessing restricted functionalities. <code>password</code> <code>DEPTH</code> Depth for the NFT collection (max items = <code>2^DEPTH</code>; maximum <code>DEPTH</code> is 30). <code>20</code> <code>IS_TESTNET</code> Specify if you are connecting to the TON testnet (<code>true</code>) or mainnet (<code>false</code>). <code>true</code> or <code>false</code> <code>POSTGRES_PASSWORD</code> Password for PostgreSQL authentication. <code>secret</code> <code>POSTGRES_DB</code> Name of the PostgreSQL database. <code>merkleapi</code> <code>POSTGRES_URI</code> Full connection URI for PostgreSQL. <code>postgresql://postgres:secret@db:5432/merkleapi</code> <code>BOT_TOKEN</code> Token for your Telegram bot (from @BotFather). <code>123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11</code> Used for the NFT claiming interface. <code>API_BASE_URL</code> External domain of your API. <code>https://example.ngrok.io</code> Replace with your public URL (e.g., via ngrok). <code>TONCONNECT_MANIFEST_URL</code> URL for the TON Connect manifest file. <code>https://example.com/tonconnect-manifest.json</code> Replace with the public URL of your manifest file. <code>COLLECTION_ADDRESS</code> Address of the NFT collection. Fill this in after deploying the collection. </li> <li> <p>Start the API and database    Run the following command to start the API and database:</p> <pre><code>docker-compose up -d db api \n</code></pre> </li> <li> <p>Migrate the database    Create the required tables in the database:</p> <pre><code>docker-compose exec api /ctl migrate \n</code></pre> </li> <li> <p>Add owners    Place your <code>owners.txt</code> file (containing owner addresses) into the <code>api</code> folder, then run:</p> <pre><code>docker-compose exec api /ctl add /api/owners.txt \n</code></pre> </li> <li> <p>Rediscover items    In your browser, navigate to <code>&lt;API_URI&gt;/admin/rediscover</code> and log in using your <code>ADMIN_USERNAME</code> and <code>ADMIN_PASSWORD</code>. If successful, you will see <code>ok</code> in the browser. After a short time (depending on the number of items), a file (e.g., <code>1.json</code>) appears in the <code>api/apidata/upd</code> folder.</p> </li> <li> <p>Generate an update     Run the following command to generate an update:</p> <pre><code>docker-compose exec api /ctl genupd &lt;path-to-update-file&gt; &lt;collection-owner&gt; &lt;collection-meta&gt; &lt;item-meta-prefix&gt; &lt;royalty-base&gt; &lt;royalty-factor&gt; &lt;royalty-recipient&gt; &lt;api-uri-including-v1&gt; \n</code></pre> <p>Replace the placeholders as follows:</p> <ul> <li><code>&lt;path-to-update-file&gt;</code>: Path to the update file created in step 9 (e.g., <code>api/apidata/upd/1.json</code>).</li> <li><code>&lt;collection-owner&gt;</code>: Address of the NFT collection owner.</li> <li><code>&lt;collection-meta&gt;</code>: Full URL to the collection metadata file (e.g., <code>https://yourdomain.com/collection.json</code>).</li> <li><code>&lt;item-meta-prefix&gt;</code>: Common prefix for item metadata (for example, if item 0 has metadata at <code>https://yourdomain.com/0.json</code>, use <code>https://yourdomain.com/</code>).</li> <li><code>&lt;royalty-base&gt;</code>: Numerator for royalties (for example, <code>10</code> for 10% if royalty-factor is 100).</li> <li><code>&lt;royalty-factor&gt;</code>: Denominator for royalties (for example, <code>100</code>).</li> <li><code>&lt;royalty-recipient&gt;</code>: Address receiving royalties (this can be the same as <code>&lt;collection-owner&gt;</code>).</li> <li><code>&lt;api-uri-including-v1&gt;</code>: Public API URL with the <code>/v1</code> postfix (for example, if you used <code>https://yourapi.com/admin/rediscover</code> to generate the update file, use <code>https://yourapi.com/v1</code> here).</li> </ul> </li> <li> <p>Invoke the <code>ton://</code> deeplink     After generating the update, a <code>ton://</code> link appears in the console logs. Follow the link and confirm the transaction. For convenience, you can paste the link into a QR code generator and scan the QR code with the Tonhub wallet (on testnet or mainnet).</p> </li> <li> <p>Set the collection address     In your browser, navigate to <code>&lt;API_URI&gt;/admin/setaddr/&lt;collection-address&gt;</code>, replacing <code>&lt;collection-address&gt;</code> with the address observed during the deployment step.</p> </li> <li> <p>Wait for confirmation     Monitor the container API logs until you see a message indicating a <code>committed state</code>.</p> <pre><code>docker-compose logs api \n</code></pre> </li> <li> <p>Deployment complete!</p> </li> </ol>"},{"location":"cookbook/cnft/#run-claiming-bot","title":"Run Claiming Bot","text":"<ol> <li> <p>Update the <code>.env</code> file    Add the <code>COLLECTION_ADDRESS</code> obtained during deployment to your <code>.env</code> file.</p> </li> <li> <p>Start the Telegram bot    Run the following command to start the bot:</p> <pre><code>docker-compose up -d redis bot \n</code></pre> </li> <li> <p>Interact with the bot    Open Telegram, navigate to your bot, and follow its instructions to claim NFTs.</p> </li> <li> <p>Done!</p> </li> </ol>"},{"location":"cookbook/cnft/#updating-owners","title":"Updating owners","text":"<p>Follow these steps to update the list of owners and integrate the changes into your NFT collection:</p> <ol> <li> <p>Prepare the new owners file    Create a <code>new-owners.txt</code> file with the new owner addresses and place it in the <code>api</code> folder.</p> </li> <li> <p>Add new owners    Run:</p> <pre><code>docker-compose exec api /ctl add /api/new-owners.txt \n</code></pre> </li> <li> <p>Rediscover items    In your browser, navigate to <code>&lt;API_URI&gt;/admin/rediscover</code> and log in with your <code>ADMIN_USERNAME</code> and <code>ADMIN_PASSWORD</code>.</p> </li> <li> <p>Locate the update file    After rediscovering, locate the new update file in the <code>api/apidata/upd</code> folder (for example, <code>2.json</code> if the previous update was <code>1.json</code>).</p> </li> <li> <p>Generate an update    Run:</p> <pre><code>docker-compose exec api /ctl genupd &lt;path-to-update-file&gt; &lt;collection-address&gt; \n</code></pre> <p>Replace <code>&lt;path-to-update-file&gt;</code> with the new update file\u2019s path (e.g., <code>api/apidata/upd/2.json</code>) and <code>&lt;collection-address&gt;</code> with the NFT collection address.</p> </li> <li> <p>Invoke the <code>ton://</code> deeplink    Follow the generated <code>ton://</code> link and confirm the transaction. You may also generate a QR code from the link and scan it with the Tonhub wallet.</p> </li> <li> <p>Wait for confirmation    Monitor the container API logs until you see a message indicating a <code>committed state</code>.</p> <pre><code>docker-compose logs api \n</code></pre> </li> <li> <p>Done!</p> </li> </ol>"},{"location":"cookbook/cnft/#conclusion","title":"Conclusion","text":"<p>The Compressed NFT standard transforms the creation and management of NFT collections by offering a scalable, cost-effective solution for mass NFT production. By addressing the limitations of existing standards, this approach paves the way for broader adoption and innovative applications of NFT technology in community building and marketing campaigns.</p>"},{"location":"cookbook/cnft/#see-also","title":"See also","text":"<ul> <li>Compressed NFT standard implementation</li> <li>Reference augmenting API implementation</li> <li>Compressed NFT toolbox</li> </ul>"},{"location":"cookbook/subdomains/","title":"Minting TON Subdomains","text":""},{"location":"cookbook/subdomains/#introduction","title":"Introduction","text":"<p>This guide walks you through creating and managing subdomains on the TON blockchain using open-source tools. It covers deploying subdomain management contracts, issuing subdomains, and managing DNS records with practical examples.</p>"},{"location":"cookbook/subdomains/#implementation","title":"Implementation","text":"<p>There are two open-source implementations available for managing subdomains on TON, depending on the level of complexity and control you need:</p>"},{"location":"cookbook/subdomains/#subdomain-collection","title":"Subdomain Collection","text":"<p>GitHub \u2197</p> <p>This is a more advanced solution where each subdomain is represented as an NFT. The owner of the collection is responsible for issuing subdomains, while each NFT owner has full control over their subdomain.</p> <p>Key Features:</p> <ul> <li>Subdomains can be transferred or sold</li> <li>Decentralized record management \u2014 each subdomain has its own smart contract</li> <li>Requires additional infrastructure (e.g., metadata API)</li> </ul>"},{"location":"cookbook/subdomains/#subdomain-manager","title":"Subdomain Manager","text":"<p>GitHub \u2197</p> <p>This is a basic implementation where a single smart contract acts as the centralized subdomain manager. The administrator is responsible for issuing subdomains and configuring their DNS records.</p> <p>Key Features:</p> <ul> <li>Suitable for simple use cases</li> <li>Quick and easy setup</li> <li>Centralized control through one smart contract</li> </ul>"},{"location":"cookbook/subdomains/#environment-setup","title":"Environment Setup","text":"<p>This guide uses Python along with the open-source tonutils library, which supports both subdomain management implementations.</p>"},{"location":"cookbook/subdomains/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>A registered .ton domain:<ul> <li>Mainnet: dns.ton.org</li> <li>Testnet: dns.ton.org?testnet=true</li> </ul> </li> </ul>"},{"location":"cookbook/subdomains/#install-dependencies","title":"Install Dependencies","text":"<p>Install the required Python library:</p> <pre><code>pip install tonutils\n</code></pre>"},{"location":"cookbook/subdomains/#additional-requirements-for-subdomain-collection","title":"Additional Requirements for Subdomain Collection","text":"<p>If you\u2019re using the Subdomain Collection approach, you\u2019ll also need:</p> <ul> <li>A server to host the metadata API</li> <li>A domain name pointing to that server for metadata access</li> <li>Docker and Docker Compose for easy deployment of the API</li> </ul>"},{"location":"cookbook/subdomains/#subdomain-collection_1","title":"Subdomain Collection","text":""},{"location":"cookbook/subdomains/#metadata-setup","title":"Metadata Setup","text":"<p>Before deploying the subdomain collection, you need to launch the metadata API. This service is responsible for generating dynamic images and attributes for your subdomain NFTs, making them visually identifiable.</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/nessshon/subdomains-toolbox\ncd metadata-api\n</code></pre> <ol> <li>Start the API using Docker:    The API will be running on port <code>8001</code>. You will need to configure SSL and set up a reverse proxy to expose it securely.</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <ol> <li>Test the API:    Visit <code>https://your-domain.com/api/ton/example.png</code> in your browser. If set up correctly, you\u2019ll see a generated image for the subdomain <code>example</code>.</li> </ol>"},{"location":"cookbook/subdomains/#deploy-the-collection","title":"Deploy the Collection","text":"<p>Once the API is running, you can deploy the NFT collection smart contract for your subdomains.</p> <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_collection import SubdomainCollection\nfrom tonutils.dns.subdomain_collection.content import SubdomainCollectionContent\nfrom tonutils.dns.subdomain_collection.data import FullDomain\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# NFT domain name and address from TON DNS Domains\n# Obtainable from https://dns.ton.org/ or https://dns.ton.org/?testnet=true\nDOMAIN_NAME = \"ghost\"  # ghost \u2192 ghost.ton\nDOMAIN_ADDRESS = \"EQ...\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n# Base URL of the API for generating metadata for NFTs\n# API source code: https://github.com/nessshon/subdomains-toolbox\nAPI_BASE_URL = \"https://your-domain.com/api/ton/\"\n\n# Metadata for the NFT collection\nCOLLECTION_METADATA = {\n    \"name\": f\"{DOMAIN_NAME.title()} DNS Domains\",\n    \"image\": f\"{API_BASE_URL}{DOMAIN_NAME}.png\",\n    \"description\": f\"*.{DOMAIN_NAME}.ton domains\",\n    \"prefix_uri\": API_BASE_URL,\n}\n\"\"\"\nExample of the metadata for the NFT collection (JSON format):\n{\n    \"name\": \"Ghost DNS Domains\",\n    \"image\": \"https://your-domain.com/api/ton/ghost.png\",\n    \"description\": \"*.ghost.ton domains\",\n    \"prefix_uri\": \"https://your-domain.com/api/ton/\"\n}\n\"\"\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = SubdomainCollection(\n        owner_address=wallet.address,\n        content=SubdomainCollectionContent(**COLLECTION_METADATA),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=wallet.address,\n        ),\n        full_domain=FullDomain(DOMAIN_NAME, \"ton\"),\n    )\n\n    tx_hash = await wallet.batch_transfer(\n        [\n            # Deploy collection\n            TransferMessage(\n                destination=collection.address,\n                amount=0.05,\n                body=collection.build_deploy_body(),\n                state_init=collection.state_init,\n            ),\n            # Bind Subdomain Collection to the main domain\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(collection.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/subdomains/#minting-subdomains","title":"Minting Subdomains","text":"<p>To mint a new subdomain as an NFT:</p> <ol> <li>Open your TON wallet (e.g., Tonkeeper).</li> <li>Send 0.1 TON to the Subdomain Collection contract address (printed during deployment).</li> <li>In the transaction comment field, enter the desired subdomain name (e.g., <code>alice</code> for <code>alice.ghost.ton</code>).</li> <li>Ensure the subdomain name is valid (alphanumeric, no special characters) and not already minted.</li> <li>After the transaction is confirmed, the subdomain NFT will be sent to your wallet.</li> </ol>"},{"location":"cookbook/subdomains/#managing-records","title":"Managing Records","text":""},{"location":"cookbook/subdomains/#setting-records","title":"Setting Records","text":"<p>The record-setting mechanism for NFT subdomains is similar to the one used in the TON DNS Domains collection. You can assign one of the following record types to a subdomain \u2014 examples for each are provided below.</p> Set Wallet Record <pre><code>import asyncio\nfrom pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# Address of the wallet to be set (e.g., UQ...)\nWALLET_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_wallet_record_body(Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Set Site Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# ADNL address (e.g., \"a1b2c3...\")\nADNL_ADDRESS = \"a1b2c3...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_site_record_body(ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Set TON Storage Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# Hex-encoded BAG ID (e.g., \"1234567890abcdef...\")\nBAG_ID = \"1234567890abcdef...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_storage_record_body(BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Set Next Resolver Record <pre><code>import asyncio\n\nfrom pytoniq_core import Address\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# Address of the next resolver contract (e.g., EQ...)\nCONTRACT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_next_resolver_record_body(Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/subdomains/#deleting-records","title":"Deleting Records","text":"<p>Similarly, you can delete existing records. Below are examples for each type.</p> Delete Wallet Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_wallet_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Delete Site Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_site_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Delete TON Storage Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_storage_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Delete Next Resolver Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_next_resolver_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/subdomains/#subdomain-manager_1","title":"Subdomain Manager","text":""},{"location":"cookbook/subdomains/#deploy-the-manager","title":"Deploy the Manager","text":"<p>Below is an example of how to deploy the Subdomain Manager using the tonutils Python library. This script initializes the smart contract, links it to the main domain, and sends the necessary transactions from your wallet.</p> <pre><code>import asyncio\nfrom pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Administrator address for managing the Subdomain Manager (e.g., UQ...)\nADMIN_ADDRESS = \"UQ...\"\n\n# NFT address of the main domain from TON DNS Domains collection (e.g., EQ...)\nDOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    subdomain_manager = SubdomainManager(Address(ADMIN_ADDRESS))\n\n    tx_hash = await wallet.batch_transfer(\n        [\n            # Deploy Subdomain Manager\n            TransferMessage(\n                destination=subdomain_manager.address,\n                amount=0.05,\n                state_init=subdomain_manager.state_init,\n            ),\n            # Bind Subdomain Manager to the main domain as a next resolver\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(subdomain_manager.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Manager at address: {subdomain_manager.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/subdomains/#setting-records_1","title":"Setting Records","text":"<p>You can set one of the following record types for a subdomain. Below are examples for each.</p> Set Wallet Record <pre><code>import asyncio\nfrom pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Address of the wallet to be set for the subdomain (e.g., UQ...)\nWALLET_ADDRESS = \"UQ...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_wallet_record_body(SUBDOMAIN, Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Set Site Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# ADNL address for the subdomain (e.g., \"a1b2c3...\")\nADNL_ADDRESS = \"a1b2c3...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_site_record_body(SUBDOMAIN, ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Set TON Storage Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# ID of the storage bag (hex string, e.g., \"1234567890abcdef...\")\nBAG_ID = \"1234567890abcdef...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_storage_record_body(SUBDOMAIN, BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Set Next Resolver Record <pre><code>import asyncio\n\nfrom pytoniq_core import Address\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Address of the next resolver contract (e.g., EQ...)\nCONTRACT_ADDRESS = \"EQ...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_next_resolver_record_body(SUBDOMAIN, Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/subdomains/#deleting-records_1","title":"Deleting Records","text":"<p>Similarly, you can delete existing records. Below are examples for each type.</p> Delete Wallet Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_wallet_record_body(SUBDOMAIN)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Delete Site Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_site_record_body(SUBDOMAIN, False)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Delete TON Storage Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_storage_record_body(SUBDOMAIN, True)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> Delete Next Resolver Record <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_next_resolver_record_body(SUBDOMAIN)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/subdomains/#conclusion","title":"Conclusion","text":"<p>TON blockchain offers flexible options for subdomain management, whether you prefer a centralized approach with the Subdomain Manager or a decentralized, NFT-based solution with the Subdomain Collection. Both solutions are easy to implement and provide powerful tools to manage your subdomains and DNS records efficiently. This guide provides all the necessary steps to get started and take control of your subdomains on TON.</p>"},{"location":"cookbook/subdomains/#see-also","title":"See also","text":"<ul> <li>TON Subdomains Toolbox</li> <li>Subdomain Manager Contract</li> <li>Subdomain Collection Contract</li> </ul>"},{"location":"cookbook/tonconnect-integration/","title":"TON Connect Integration","text":""},{"location":"cookbook/tonconnect-integration/#introduction","title":"Introduction","text":"<p>This guide explains how to integrate TON Connect into Python applications using the <code>tonutils</code> library \u2014 a high-level SDK designed for seamless interaction with TON. It covers initializing connections, handling wallet authentication, sending transactions, and signing data, providing a practical foundation for building secure, wallet-enabled dApps on the TON blockchain.</p>"},{"location":"cookbook/tonconnect-integration/#implementation","title":"Implementation","text":""},{"location":"cookbook/tonconnect-integration/#installation","title":"Installation","text":"<pre><code>pip install tonutils\n</code></pre> <p>To store user wallet connection data, you need to implement a storage interface. An additional dependency is required for this. In this example, a file-based implementation using <code>aiofiles</code> is used:</p> <pre><code>pip install aiofiles\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#creating-the-manifest","title":"Creating the Manifest","text":"<p>Create the <code>manifest.json</code> file for your application according to the guidelines, and host it at a publicly accessible URL.</p>"},{"location":"cookbook/tonconnect-integration/#implementing-storage","title":"Implementing Storage","text":"<p>To store connection data with user wallets, a storage interface must be implemented.</p> Example implementation <pre><code>import json\nimport os\nfrom asyncio import Lock\nfrom typing import Dict, Optional\n\nimport aiofiles\n\nfrom tonutils.tonconnect import IStorage\n\n\nclass FileStorage(IStorage):\n\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n        self.lock = Lock()\n\n        if not os.path.exists(self.file_path):\n            with open(self.file_path, \"w\") as f:\n                json.dump({}, f)  # type: ignore\n\n    async def _read_data(self) -&gt; Dict[str, str]:\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"r\") as f:\n                content = await f.read()\n                if content:\n                    return json.loads(content)\n                return {}\n\n    async def _write_data(self, data: Dict[str, str]) -&gt; None:\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"w\") as f:\n                await f.write(json.dumps(data, indent=4))\n\n    async def set_item(self, key: str, value: str) -&gt; None:\n        data = await self._read_data()\n        data[key] = value\n        await self._write_data(data)\n\n    async def get_item(self, key: str, default_value: Optional[str] = None) -&gt; Optional[str]:\n        data = await self._read_data()\n        return data.get(key, default_value)\n\n    async def remove_item(self, key: str) -&gt; None:\n        data = await self._read_data()\n        if key in data:\n            del data[key]\n            await self._write_data(data)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#initializing-ton-connect","title":"Initializing TON Connect","text":"<p>Create a <code>TonConnect</code> instance by specifying the manifest URL and the storage object:</p> <pre><code>from storage import FileStorage\nfrom tonutils.tonconnect import TonConnect\n\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\nTC_STORAGE = FileStorage(\"connection.json\")\n\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n</code></pre> <p>The <code>wallets_fallback_file_path</code> parameter is used as a fallback source of wallet data (e.g., Tonkeeper, Wallet) in case the external API is unavailable. You can find all input parameters at the following link.</p>"},{"location":"cookbook/tonconnect-integration/#initializing-the-connector","title":"Initializing the Connector","text":"<p>Create a <code>Connector</code> instance to work with a specific user:</p> <pre><code>connector = await tc.init_connector(user_id)\n</code></pre> <ul> <li><code>user_id</code> can be an integer (<code>int</code>) or a string (<code>str</code>).</li> <li>If not provided, an incremental ID will be assigned automatically.</li> <li>You can store the user ID for future reference:</li> </ul> <pre><code>user_id = connector.user_id\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#connecting-a-wallet","title":"Connecting a Wallet","text":""},{"location":"cookbook/tonconnect-integration/#retrieving-the-list-of-wallets","title":"Retrieving the List of Wallets","text":"<p>To display available wallets in the user interface, retrieve the list of supported wallets:</p> <pre><code>wallets = await tc.get_wallets()\n</code></pre> <p>You can then display the list using each wallet\u2019s name via <code>wallet.name</code>.</p>"},{"location":"cookbook/tonconnect-integration/#connecting-to-a-wallet","title":"Connecting to a Wallet","text":"<p>After the user selects a wallet from the list, initiate the connection (for example, selecting the wallet at index 1):</p> <pre><code>selected_wallet = wallets[1]\nconnect_url = await connector.connect_wallet(selected_wallet)\n</code></pre> <p>You should present the <code>connect_url</code> to the user in your application.</p>"},{"location":"cookbook/tonconnect-integration/#with-redirect-url","title":"With Redirect URL","text":"<p>If you want to automatically redirect the user after a successful connection, pass the <code>redirect_url</code> parameter:</p> <pre><code>redirect_url = \"https://example.com/\"\nconnect_url = await connector.connect_wallet(selected_wallet, redirect_url=redirect_url)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#with-ton-proof","title":"With TON Proof","text":"<p>To ensure that the user truly owns the specified address, you can enable address ownership verification using <code>ton_proof</code>. Generate the proof payload and pass it via the <code>ton_proof</code> parameter. More details on this mechanism and payload generation are available here.</p> <p>You can also use the built-in <code>generate_proof_payload</code> function from <code>tonutils</code>:</p> <pre><code>from tonutils.tonconnect.utils import generate_proof_payload\n\nredirect_url = \"https://example.com/\"\nproof_payload = generate_proof_payload()\nconnect_url = await connector.connect_wallet(\n    selected_wallet,\n    redirect_url=redirect_url,\n    ton_proof=proof_payload\n)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#handling-the-connection","title":"Handling the Connection","text":"<p>To handle the result of a wallet connection, use the <code>connect_wallet_context</code> context manager.</p> <p>Example using the context manager:</p> <pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.connect_wallet_context() as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the connection.\")\n        else:\n            print(f\"Connection error: {response.message}\")\n    else:\n        print(f\"Connected wallet: {response.account.address.to_str(is_bounceable=False)}\")\n</code></pre> <p>Example with <code>ton_proof</code> verification:</p> <pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.connect_wallet_context() as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the connection.\")\n        else:\n            print(f\"Connection error: {response.message}\")\n    else:\n        if connector.wallet.verify_proof_payload(proof_payload):\n            print(f\"Connected wallet: {response.account.address.to_str(is_bounceable=False)}\")\n        else:\n            await connector.disconnect_wallet()\n            print(\"Proof verification failed.\")\n</code></pre> <p>The context manager will pause execution until:</p> <ul> <li>the user connects a wallet;</li> <li>a timeout occurs;</li> <li>or an error is raised.</li> </ul> <p>On success, you will receive a WalletInfo object containing the connected wallet's data. On failure, a <code>TonConnectError</code> instance will be returned, which you can handle as described in the error handling section.</p>"},{"location":"cookbook/tonconnect-integration/#sending-requests","title":"Sending Requests","text":""},{"location":"cookbook/tonconnect-integration/#sending-a-transaction","title":"Sending a Transaction","text":"<p>To send Toncoin to a specific address, use the <code>send_transaction</code> method:</p> <pre><code>from tonutils.tonconnect.models import Transaction, Message\n\nrpc_request_id = await connector.send_transaction(\n    transaction=Transaction(\n        valid_until=int(time.time() + 5 * 60),\n        messages=[\n            Message(\n                address=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n                amount=str(int(1 * 1e9)),\n            )\n        ]\n    )\n)\n</code></pre> <ul> <li><code>valid_until</code> \u2013 transaction expiration time in seconds</li> <li><code>address</code> \u2013 recipient in user-friendly format</li> <li><code>amount</code> \u2013 amount in nanotons</li> </ul> <p>The method returns <code>rpc_request_id</code>, a unique identifier for tracking the request.</p>"},{"location":"cookbook/tonconnect-integration/#sending-a-simplified-transfer","title":"Sending a Simplified Transfer","text":"<p>The <code>tonutils</code> library also provides higher-level methods for sending transactions more conveniently.</p> <ul> <li>The <code>valid_until</code> field is set to 5 minutes by default.</li> <li>The <code>address</code> field is replaced with <code>destination</code> (a string or an <code>Address</code>).</li> <li>The <code>amount</code> should be specified in TON instead of nanotons.</li> <li> <p>The <code>body</code> parameter can be one of the following:</p> </li> <li> <p>a <code>Cell</code> object \u2014 for passing a custom payload;</p> </li> <li>a string \u2014 used as a comment or memo;</li> </ul>"},{"location":"cookbook/tonconnect-integration/#single-transfer","title":"Single Transfer","text":"<pre><code>rpc_request_id = await connector.send_transfer(\n    destination=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n    amount=1,\n    body=\"Hello from tonutils!\",\n)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#batch-transfer","title":"Batch Transfer","text":"<p>Before sending multiple messages in one transaction, ensure the wallet supports the required number of messages:</p> <pre><code>max_messages = connector.device.get_max_supported_messages(connector.wallet)\n</code></pre> <p>The maximum number of messages supported in a single transaction depends on the wallet version. Use this limit to shape your transaction logic appropriately.</p> <pre><code>from tonutils.tonconnect.models.transfer import TransferMessage\n\nrpc_request_id = await connector.send_batch_transfer(\n    messages=[\n        TransferMessage(\n            destination=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n            amount=1,\n            body=\"Hello from tonutils!\",\n        ),\n        TransferMessage(\n            destination=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n            amount=2,\n            body=\"Hello from tonutils!\",\n        ),\n    ]\n)\n</code></pre> <p>These methods also return an <code>rpc_request_id</code>.</p>"},{"location":"cookbook/tonconnect-integration/#sending-a-sign-data-request","title":"Sending a Sign Data Request","text":"<p>The <code>sign_data</code> method allows requesting a cryptographic signature from the user\u2019s wallet for arbitrary content. This signature confirms explicit consent and can be verified off-chain or passed into a smart contract.</p> <p>TON Connect supports three data formats:</p>"},{"location":"cookbook/tonconnect-integration/#text","title":"Text","text":"<p>Use when the content is human-readable.</p> <ul> <li>Clear to the user.</li> <li>Ideal for off-chain confirmations.</li> </ul> <pre><code>from tonutils.tonconnect.models import SignDataPayloadText\n\ntext = \"I confirm deletion of my account and all associated data.\"\npayload = SignDataPayloadText(text=text)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#binary","title":"Binary","text":"<p>Use for hashes, files, or non-readable content.</p> <ul> <li>Suitable for digital receipts, proofs, or opaque payloads.</li> </ul> <pre><code>from tonutils.tonconnect.models import SignDataPayloadBinary\n\ndata = \"I confirm deletion of my account and all associated data.\".encode(\"utf-8\")\npayload = SignDataPayloadBinary(bytes=data)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#cell","title":"Cell","text":"<p>Use when the signature must be verifiable on-chain.</p> <ul> <li>Supports TL-B schemas.</li> <li>Enables smart contract validation.</li> </ul> <pre><code>from pytoniq_core import begin_cell\nfrom tonutils.tonconnect.models import SignDataPayloadCell\n\ncomment = \"I confirm deletion of my account and all associated data.\"\ncell = begin_cell().store_uint(0, 32).store_snake_string(comment).end_cell()\nschema = \"text_comment#00000000 text:Snakedata = InMsgBody;\"\n\npayload = SignDataPayloadCell(cell=cell, schema=schema)\n</code></pre> <p>The last type in the provided TL-B schema is used as the root type for serialization.</p>"},{"location":"cookbook/tonconnect-integration/#sending-the-request","title":"Sending the Request","text":"<p>Before sending the request, you must ensure that the connected wallet supports the sign data feature. Use the following check:</p> <pre><code>connector.device.verify_sign_data_feature(connector.wallet, payload)\n</code></pre> <p>If the feature is not supported, a <code>WalletNotSupportFeatureError</code> will be raised. You can handle it like this:</p> <pre><code>from tonutils.tonconnect.utils.exceptions import WalletNotSupportFeatureError\n\ntry:\n    connector.device.verify_sign_data_feature(connector.wallet, payload)\nexcept WalletNotSupportFeatureError:\n    print(\"Wallet does not support sign data feature!\")\n    # Handle fallback logic or abort\n</code></pre> <p>If the feature is supported, proceed to send the request:</p> <pre><code>rpc_request_id = await connector.sign_data(payload)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#handling-request-results","title":"Handling Request Results","text":"<p>Use the <code>pending_request_context</code> context manager to wait for a user\u2019s response to both transaction and signing requests.</p> <p>The context manager pauses execution until:</p> <ul> <li>the user takes action in their wallet;</li> <li>a timeout occurs;</li> <li>or an error is raised.</li> </ul> <p>On success, it returns a response object specific to the request type:</p> <ul> <li><code>SendTransactionResponse</code></li> <li><code>SignDataResponse</code></li> </ul> <p>On failure, a <code>TonConnectError</code> is returned and can be handled as described in the request errors section.</p>"},{"location":"cookbook/tonconnect-integration/#handling-signed-data","title":"Handling Signed Data","text":"<pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.pending_request_context(rpc_request_id) as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the signing request.\")\n        else:\n            print(f\"Sign data error: {response.message}\")\n    else:\n        key = connector.wallet.account.public_key\n        if response.verify_sign_data(key):\n            print(\"Verified sign data!\")\n        else:\n            print(\"Failed to verify sign data!\")\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#handling-the-transaction","title":"Handling the Transaction","text":"<pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.pending_request_context(rpc_request_id) as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the transaction.\")\n        else:\n            print(f\"Transaction error: {response.message}\")\n    else:\n        print(f\"Transaction sent successfully! Hash: {response.normalized_hash}\")\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#checking-request-status","title":"Checking Request Status","text":"<p>To check whether a request is still waiting for user confirmation:</p> <pre><code>is_pending = connector.is_request_pending(rpc_request_id)\n</code></pre> <p>This method returns <code>True</code> if the request has not yet been confirmed in the user's wallet; otherwise, it returns <code>False</code>.</p>"},{"location":"cookbook/tonconnect-integration/#cancelling-a-request","title":"Cancelling a Request","text":"<p>If you need to cancel a request for any reason, use:</p> <pre><code>connector.cancel_pending_request(rpc_request_id)\n</code></pre> <p>This completely stops processing the request at the application level, even if the user later confirms it in the wallet.</p>"},{"location":"cookbook/tonconnect-integration/#disconnecting-the-wallet","title":"Disconnecting the Wallet","text":"<p>To disconnect the user's wallet, call the <code>disconnect_wallet</code> method:</p> <pre><code>await connector.disconnect_wallet()\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#event-handling","title":"Event Handling","text":"<p>In addition to context managers, tonutils provides a unified event-driven interface for reacting to wallet actions. This allows you to handle events such as wallet connection, disconnection, transaction execution, and data signing through registered handlers.</p>"},{"location":"cookbook/tonconnect-integration/#event-types","title":"Event Types","text":"<p>TON Connect emits two categories of events:</p>"},{"location":"cookbook/tonconnect-integration/#success-events","title":"Success Events","text":"<p>These events are triggered when an action completes successfully:</p> <ul> <li> <p><code>Event.CONNECT</code> \u2014 emitted when a wallet is successfully connected. Parameters: <code>user_id: int</code>, <code>wallet: WalletInfo</code></p> </li> <li> <p><code>Event.DISCONNECT</code> \u2014 emitted when a wallet is disconnected. Parameters: <code>user_id: int</code>, <code>wallet: WalletInfo</code></p> </li> <li> <p><code>Event.TRANSACTION</code> \u2014 emitted when a transaction is confirmed by the user. Parameters: <code>user_id: int</code>, <code>transaction: SendTransactionResponse</code>, <code>rpc_request_id: int</code></p> </li> <li> <p><code>Event.SIGN_DATA</code> \u2014 emitted when a sign data request is approved. Parameters: <code>user_id: int</code>, <code>sign_data: SignDataResponse</code>, <code>rpc_request_id: int</code></p> </li> </ul>"},{"location":"cookbook/tonconnect-integration/#error-events","title":"Error Events","text":"<p>These events are triggered if the corresponding action fails due to user rejection, timeout, or internal wallet/app errors:</p> <ul> <li><code>EventError.CONNECT</code> \u2014 error during wallet connection.</li> <li><code>EventError.DISCONNECT</code> \u2014 error during wallet disconnection.</li> <li><code>EventError.TRANSACTION</code> \u2014 error during transaction confirmation.</li> <li><code>EventError.SIGN_DATA</code> \u2014 error during sign data request.</li> </ul> <p>All error events receive:</p> <ul> <li><code>user_id: int</code></li> <li><code>error: TonConnectError</code></li> </ul> <p>Note: All error types are described in detail in the error handling section.</p> <p>You can handle these errors the same way as standard events using <code>register_event</code> or decorators. This separation allows you to keep success and failure logic cleanly isolated.</p>"},{"location":"cookbook/tonconnect-integration/#handling-events","title":"Handling Events","text":"<p>You can register event handlers in two ways:</p>"},{"location":"cookbook/tonconnect-integration/#using-method","title":"Using method","text":"<pre><code>def on_transaction(user_id: int, transaction: SendTransactionResponse):\n    print(f\"Transaction received for user {user_id}\")\n\ntc.register_event(Event.TRANSACTION, on_transaction)\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#using-decorators","title":"Using decorators","text":"<pre><code>@tc.on_event(Event.TRANSACTION)\nasync def on_transaction(user_id: int, transaction: SendTransactionResponse):\n    print(f\"Transaction confirmed for user {user_id}\")\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#additional-parameters","title":"Additional Parameters","text":"<p>In addition to standard event arguments, you can pass custom parameters (e.g., database session, context objects, comments) to your event handlers.</p>"},{"location":"cookbook/tonconnect-integration/#attaching-parameters-to-a-specific-event","title":"Attaching parameters to a specific event:","text":"<p>Use <code>add_event_kwargs</code> before entering the context manager or triggering the request:</p> <pre><code>connector.add_event_kwargs(\n    event=Event.CONNECT,\n    comment=\"Hello from tonutils!\",\n    db_session=session,\n)\n</code></pre> <p>The extra keyword arguments will be passed directly to the corresponding handler:</p> <pre><code>@tc.on_event(Event.CONNECT)\nasync def on_connect(user_id: int, wallet: WalletInfo, comment: str, db_session: Session):\n    ...\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#defining-global-parameters-for-all-events","title":"Defining global parameters for all events:","text":"<p>You can define default parameters for all events at the connector level:</p> <pre><code>tc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\ntc[\"db_session\"] = session\ntc[\"comment\"] = \"Shared message\"\n</code></pre> <p>These parameters will be available in all event handlers:</p> <pre><code>@tc.on_event(Event.SIGN_DATA)\nasync def on_sign_data(user_id: int, sign_data: SignDataResponse, db_session: Session, comment: str):\n    ...\n</code></pre>"},{"location":"cookbook/tonconnect-integration/#error-handling","title":"Error Handling","text":"<p>When working with TON Connect, errors may occur both during wallet connection and when sending requests.</p>"},{"location":"cookbook/tonconnect-integration/#connection-errors","title":"Connection Errors","text":"<p>These errors can occur during the wallet connection initialization process:</p> Code Error Description 0 <code>UnknownError</code> An unknown error occurred in the wallet during request processing. 1 <code>BadRequestError</code> The request is malformed or contains invalid parameters. 2 <code>ManifestNotFoundError</code> The specified <code>manifest_url</code> is unreachable or does not exist. 3 <code>ManifestContentError</code> The manifest content has an invalid structure or is improperly formatted. 100 <code>UnknownAppError</code> Application logic error while preparing the request data. 300 <code>UserRejectsError</code> The user declined to connect their wallet to your application. 400 <code>MethodNotSupportedError</code> The selected wallet does not support the requested operation or method. 500 <code>RequestTimeoutError</code> The user did not complete the connection within the allotted time."},{"location":"cookbook/tonconnect-integration/#request-errors","title":"Request Errors","text":"<p>These errors may occur when processing requests.</p> Code Error Description 0 <code>UnknownError</code> An unknown error occurred in the wallet during request processing. 1 <code>BadRequestError</code> The request is malformed or contains invalid parameters. 100 <code>UnknownAppError</code> Application logic error while preparing the request data. 300 <code>UserRejectsError</code> The user rejected the request or refused to sign. 400 <code>MethodNotSupportedError</code> The selected wallet does not support the requested operation or method. 500 <code>RequestTimeoutError</code> The user did not confirm the request within the allotted time."},{"location":"cookbook/tonconnect-integration/#conclusion","title":"Conclusion","text":"<p>TON Connect provides a secure and user-friendly way to interact with wallets on the TON blockchain. With support for transaction signing, identity verification, and event handling, it enables seamless integration of wallet functionality into Python applications.</p>"},{"location":"cookbook/tonconnect-integration/#see-also","title":"See also","text":"<ul> <li>TON Connect usage examples</li> <li>Telegram bot with TON Connect</li> </ul>"},{"location":"cookbook/tonconnect-telegram/","title":"TON Connect Telegram Bot","text":""},{"location":"cookbook/tonconnect-telegram/#introduction","title":"Introduction","text":"<p>This guide demonstrates how to integrate TON Connect into a Telegram bot using <code>tonutils</code> \u2014 a Python SDK designed for seamless interaction with TON.</p> <p>The bot provides the following functionality:</p> <ul> <li>Connect a wallet via QR code or link</li> <li>Sign arbitrary data</li> <li>Send transactions</li> </ul> <p>The implementation follows production best practices: persistent session storage, asynchronous architecture, anti-spam protection, and a minimal UI using inline buttons.</p> <p>Tip</p> <p>Before getting started, it's recommended to review the documentation Cookbook: TON Connect Integration</p>"},{"location":"cookbook/tonconnect-telegram/#setup","title":"Setup","text":"<p>Before getting started, complete the following steps.</p>"},{"location":"cookbook/tonconnect-telegram/#creating-a-telegram-bot","title":"Creating a Telegram Bot","text":"<ol> <li>Open @BotFather in Telegram.</li> <li>Send the <code>/newbot</code> command and follow the prompts.</li> <li>Save the bot token.</li> </ol>"},{"location":"cookbook/tonconnect-telegram/#create-tonconnect-manifest","title":"Create TonConnect Manifest","text":"<p>Create a JSON file describing your application. This manifest is displayed in the wallet during connection.</p> <pre><code>{\n  \"url\": \"&lt;app-url&gt;\",                        // required\n  \"name\": \"&lt;app-name&gt;\",                      // required\n  \"iconUrl\": \"&lt;app-icon-url&gt;\",               // required\n  \"termsOfUseUrl\": \"&lt;terms-of-use-url&gt;\",     // optional\n  \"privacyPolicyUrl\": \"&lt;privacy-policy-url&gt;\" // optional\n}\n</code></pre> <p>Note</p> <p>Ensure this file is publicly accessible via its URL.</p> <p>Refer to the official manifest documentation for detailed specifications.</p>"},{"location":"cookbook/tonconnect-telegram/#installing-dependencies","title":"Installing Dependencies","text":"<p>Create a <code>requirements.txt</code> file with the following contents:</p> <pre><code>aiogram~=3.20.0\ncachetools==5.5.2\nenvirons==14.2.0\nredis==6.2.0\ntonutils==0.4.4\n</code></pre> <p>Install all dependencies by running:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#environment-configuration","title":"Environment Configuration","text":"<p>Create a <code>.env</code> file in the root directory of your project and define the following variables:</p> <pre><code>BOT_TOKEN=your_bot_token\nREDIS_DSN=redis://localhost:6379/0\nTC_MANIFEST=https://your-domain.com/manifest.json\n</code></pre> <p>Description of variables:</p> <ul> <li><code>BOT_TOKEN</code> \u2014 Telegram bot token obtained from @BotFather.</li> <li><code>REDIS_DSN</code> \u2014 Redis connection string used to store sessions and states.</li> <li><code>TC_MANIFEST</code> \u2014 HTTPS URL pointing to the publicly available TON Connect manifest.</li> </ul>"},{"location":"cookbook/tonconnect-telegram/#project-structure","title":"Project Structure","text":"<pre><code>\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 utils/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 keyboards.py\n    \u2502   \u251c\u2500\u2500 models.py\n    \u2502   \u251c\u2500\u2500 storage.py\n    \u2502   \u2514\u2500\u2500 windows.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 events.py\n    \u251c\u2500\u2500 handlers.py\n    \u251c\u2500\u2500 middlewares.py\n    \u2514\u2500\u2500 session_manager.py\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#implementation","title":"Implementation","text":"<p>The project is split into separate modules, each handling a specific responsibility. Let's go through them step by step.</p>"},{"location":"cookbook/tonconnect-telegram/#configuration","title":"Configuration","text":"<p>File: <code>src/utils/models.py</code></p> <p>This module is responsible for:</p> <ul> <li>Loading configuration values from the <code>.env</code> file.</li> <li>Creating the <code>Context</code> class that holds essential dependencies.</li> </ul>"},{"location":"cookbook/tonconnect-telegram/#context-contents","title":"Context contents","text":"<ul> <li><code>bot: Bot</code> \u2014 instance of the Telegram bot (<code>aiogram</code>).</li> <li><code>state: FSMContext</code> \u2014 finite-state machine context per user.</li> <li><code>tc: TonConnect</code> \u2014 main interface to interact with TON wallets.</li> <li><code>connector: Connector</code> \u2014 user-specific connection session.</li> </ul>"},{"location":"cookbook/tonconnect-telegram/#usage","title":"Usage","text":"<ul> <li>At startup, <code>Config.load()</code> is called to load environment variables.</li> <li>The middleware creates a <code>Context</code> instance and injects it into all handlers for convenient access to shared resources.</li> </ul> Code example <pre><code>from __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom aiogram import Bot\nfrom aiogram.fsm.context import FSMContext\nfrom environs import Env\nfrom tonutils.tonconnect import TonConnect, Connector\n\n\n@dataclass\nclass Context:\n    \"\"\"\n    Aggregated context object passed throughout the bot's logic.\n\n    :param bot: The bot instance used to send and receive messages.\n    :param state: Finite State Machine context for user session management.\n    :param tc: Instance of TonConnect for managing wallet connections.\n    :param connector: Connector used to communicate with a specific wallet.\n    \"\"\"\n    bot: Bot\n    state: FSMContext\n    tc: TonConnect\n    connector: Connector\n\n\n@dataclass\nclass Config:\n    \"\"\"\n    Configuration data loaded from the environment.\n\n    :param BOT_TOKEN: Telegram bot token.\n    :param REDIS_DSN: Redis connection string for FSM or other caching.\n    :param TC_MANIFEST: URL to the TonConnect manifest file.\n    \"\"\"\n    BOT_TOKEN: str\n    REDIS_DSN: str\n    TC_MANIFEST: str\n\n    @classmethod\n    def load(cls) -&gt; Config:\n        \"\"\"\n        Loads configuration from environment variables using .env file.\n\n        :return: An instance of Config populated with environment values.\n        \"\"\"\n        env = Env()\n        env.read_env()\n\n        return cls(\n            BOT_TOKEN=env.str(\"BOT_TOKEN\"),\n            REDIS_DSN=env.str(\"REDIS_DSN\"),\n            TC_MANIFEST=env.str(\"TC_MANIFEST\"),\n        )\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#session-storage","title":"Session Storage","text":"<p>File: <code>src/utils/storage.py</code></p> <p>In the web version of TON Connect, wallet sessions are stored using <code>localStorage</code>. In a Python server environment, you need to implement a custom session storage solution.</p> <p>This project uses Redis, where TON Connect sessions are stored and retrieved using the user's Telegram ID as the key.</p>"},{"location":"cookbook/tonconnect-telegram/#module-responsibilities","title":"Module responsibilities","text":"<ul> <li>Store TON Connect session data by Telegram ID.</li> <li>Retrieve session data when the user reconnects.</li> <li>Delete session data upon disconnect or cleanup.</li> </ul> <p>This approach ensures reliable persistence and recovery of user session state.</p> Code example <pre><code>from typing import Optional\n\nfrom redis.asyncio import Redis\nfrom tonutils.tonconnect import IStorage\n\n\nclass RedisStorage(IStorage):\n    \"\"\"\n    Redis-based implementation of the IStorage interface.\n    Used for storing TonConnect session data.\n\n    :param redis_client: Redis connection instance.\n    \"\"\"\n\n    def __init__(self, redis_client: Redis):\n        self.redis = redis_client\n\n    async def set_item(self, key: str, value: str) -&gt; None:\n        \"\"\"\n        Store a key-value pair in Redis.\n\n        :param key: The key to store.\n        :param value: The value to associate with the key.\n        \"\"\"\n        async with self.redis.client() as client:\n            await client.set(name=key, value=value)\n\n    async def get_item(self, key: str, default_value: Optional[str] = None) -&gt; Optional[str]:\n        \"\"\"\n        Retrieve a value from Redis by key.\n\n        :param key: The key to retrieve.\n        :param default_value: Value to return if key is not found.\n        :return: Retrieved value or default_value.\n        \"\"\"\n        async with self.redis.client() as client:\n            value = await client.get(name=key)\n            return value if value else default_value\n\n    async def remove_item(self, key: str) -&gt; None:\n        \"\"\"\n        Remove a key-value pair from Redis.\n\n        :param key: The key to remove.\n        \"\"\"\n        async with self.redis.client() as client:\n            await client.delete(key)\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#message-cleanup","title":"Message Cleanup","text":"<p>File: <code>src/utils/__init__.py</code></p> <p>This module ensures that the user's previous message is deleted before a new one is sent. It prevents clutter in the chat and helps maintain a clean, minimal user interface.</p>"},{"location":"cookbook/tonconnect-telegram/#how-it-works","title":"How it works","text":"<ul> <li>The user's FSM context stores the <code>message_id</code> of the last message sent by the bot.</li> <li>Before sending a new message, the bot tries to delete the previous one.</li> <li>After sending, it stores the new <code>message_id</code> for the next cleanup cycle.</li> </ul> <p>This is especially useful for bots with dynamic inline UIs that refresh often.</p> Code example <pre><code>from contextlib import suppress\n\nfrom .models import Context\n\n\nasync def delete_last_message(context: Context, user_id: int, message_id: int) -&gt; None:\n    \"\"\"\n    Delete the previously stored message and store the new one for future cleanup.\n\n    :param context: Current context with bot and FSM state.\n    :param user_id: Telegram user ID.\n    :param message_id: New message ID to store.\n    \"\"\"\n    state_data = await context.state.get_data()\n    last_message_id = state_data.get(\"last_message_id\")\n\n    if last_message_id is not None:\n        with suppress(Exception):\n            await context.bot.delete_message(chat_id=user_id, message_id=last_message_id)\n\n    await context.state.update_data(last_message_id=message_id)\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#keyboards","title":"Keyboards","text":"<p>File: <code>src/utils/keyboards.py</code></p> <p>This module is responsible for generating inline keyboards for user interaction. It ensures fast navigation and a clean, responsive interface.</p>"},{"location":"cookbook/tonconnect-telegram/#main-keyboard-types","title":"Main keyboard types","text":"<ul> <li>Wallet connection \u2014 a list of available wallets with connect buttons.</li> <li>Request confirmation \u2014 buttons for opening the wallet or canceling the current request.</li> <li>Main action menu \u2014 send transaction, batch transfer, sign data, disconnect.</li> <li>Signature format selection \u2014 choose between text, binary, or <code>cell</code>.</li> <li>Back to menu \u2014 return to the main screen.</li> </ul> <p>The keyboards are dynamically adjusted based on user context and current workflow.</p> Code example <pre><code>from typing import List\n\nfrom aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup\nfrom aiogram.utils.keyboard import InlineKeyboardBuilder\nfrom tonutils.tonconnect.models import WalletApp\n\n\ndef connect_wallet(wallets: List[WalletApp], selected_wallet: WalletApp, connect_url: str) -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard for selecting a wallet and connecting it.\n\n    :param wallets: List of available wallet apps.\n    :param selected_wallet: Currently selected wallet app.\n    :param connect_url: Connection URL for the selected wallet.\n    :return: Inline keyboard with wallet selection and connect button.\n    \"\"\"\n    wallets_button = [\n        InlineKeyboardButton(\n            text=f\"\u2022 {wallet.name} \u2022\" if wallet.app_name == selected_wallet.app_name else wallet.name,\n            callback_data=f\"app_wallet:{wallet.app_name}\",\n        ) for wallet in wallets\n    ]\n    connect_wallet_button = InlineKeyboardButton(\n        text=f\"Connect {selected_wallet.name}\",\n        url=connect_url,\n    )\n    builder = InlineKeyboardBuilder()\n    builder.row(connect_wallet_button)\n    builder.row(*wallets_button, width=2)\n\n    return builder.as_markup()\n\n\ndef confirm_request(url: str, wallet_name: str) -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard to confirm or cancel the current request.\n\n    :param url: URL to open the wallet for confirmation.\n    :param wallet_name: Name of the wallet.\n    :return: Inline keyboard with confirm and cancel buttons.\n    \"\"\"\n    return InlineKeyboardMarkup(\n        inline_keyboard=[\n            [InlineKeyboardButton(text=f\"Open {wallet_name}\", url=url)],\n            [InlineKeyboardButton(text=\"Cancel\", callback_data=\"cancel_transaction\")],\n        ]\n    )\n\n\ndef choose_action() -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build the main menu keyboard for wallet actions.\n\n    :return: Inline keyboard with wallet action options.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.row(InlineKeyboardButton(text=\"Send Transaction\", callback_data=\"send_transaction\"))\n    builder.row(InlineKeyboardButton(text=\"Send Batch Transaction\", callback_data=\"send_batch_transaction\"))\n    builder.row(InlineKeyboardButton(text=\"Send Sign Data Request\", callback_data=\"send_sign_data_request\"))\n    builder.row(InlineKeyboardButton(text=\"Disconnect Wallet\", callback_data=\"disconnect_wallet\"))\n\n    return builder.as_markup()\n\n\ndef choose_sign_data_type() -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard to choose a sign data format.\n\n    :return: Inline keyboard with sign data format options.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"Text\", callback_data=\"send_sign_data_request:text\"))\n    builder.add(InlineKeyboardButton(text=\"Binary\", callback_data=\"send_sign_data_request:binary\"))\n    builder.add(InlineKeyboardButton(text=\"Cell\", callback_data=\"send_sign_data_request:cell\"))\n    builder.row(InlineKeyboardButton(text=\"Main Menu\", callback_data=\"main_menu\"))\n\n    return builder.as_markup()\n\n\ndef go_to_main_menu() -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard with a single button to return to the main menu.\n\n    :return: Inline keyboard with a main menu button.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.row(InlineKeyboardButton(text=\"Main Menu\", callback_data=\"main_menu\"))\n\n    return builder.as_markup()\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#ui-windows","title":"UI Windows","text":"<p>File: <code>src/utils/windows.py</code></p> <p>This module handles communication with the user via Telegram messages and inline keyboards. It implements logical UI \u201cscreens\u201d that represent different interaction states.</p>"},{"location":"cookbook/tonconnect-telegram/#key-responsibilities","title":"Key responsibilities","text":"<ul> <li>Wallet connection screen \u2014 shows the list of wallets, generates <code>ton_proof</code>, builds a connect link and QR code.</li> <li>Main menu \u2014 displays the connected wallet address and offers actions: send, sign, disconnect.</li> <li>Request confirmation \u2014 prompts the user to confirm the action inside their wallet app.</li> <li>Result display \u2014 shows transaction hashes, signature data, and verification results.</li> <li>Error handling \u2014 informs the user of failures and offers options to retry or return.</li> </ul> Code example <pre><code>import base64\nimport json\n\nfrom aiogram.types import InlineKeyboardButton\nfrom aiogram.utils.keyboard import InlineKeyboardBuilder\nfrom aiogram.utils.markdown import hide_link, hblockquote, hbold\nfrom tonutils.tonconnect.models import Event, SendTransactionResponse, SignDataResponse\nfrom tonutils.tonconnect.utils import generate_proof_payload\n\nfrom ..utils import Context, delete_last_message\nfrom ..utils import keyboards\n\n\nasync def connect_wallet(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Show wallet selection and QR code for connection.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    state_data = await context.state.get_data()\n    wallets = await context.tc.get_wallets()\n    selected_wallet_name = state_data.get(\"selected_wallet\", wallets[0].app_name)\n\n    selected_wallet = next((w for w in wallets if w.app_name == selected_wallet_name), wallets[0])\n    redirect_url = \"https://t.me/tonconnect_demo_bot\"\n    ton_proof = generate_proof_payload()\n\n    await context.state.update_data(ton_proof=ton_proof)\n    context.connector.add_event_kwargs(Event.CONNECT, state=context.state)\n\n    connect_url = await context.connector.connect_wallet(\n        wallet_app=selected_wallet,\n        redirect_url=redirect_url,\n        ton_proof=ton_proof,\n    )\n\n    qrcode_url = (\n        f\"https://qrcode.ness.su/create?\"\n        f\"box_size=20&amp;border=7&amp;image_padding=20\"\n        f\"&amp;data={base64.b64encode(connect_url.encode()).decode()}\"\n        f\"&amp;image_url={base64.b64encode(selected_wallet.image.encode()).decode()}\"\n    )\n\n    text = f\"{hide_link(qrcode_url)}&lt;b&gt;Connect your wallet!&lt;/b&gt;\"\n    reply_markup = keyboards.connect_wallet(wallets, selected_wallet, connect_url)\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def wallet_connected(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Show connected wallet address and main menu.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    wallet_address = context.connector.wallet.account.address.to_str(is_bounceable=False)\n    reply_markup = keyboards.choose_action()\n    text = f\"&lt;b&gt;Connected wallet:&lt;/b&gt;\\n{hblockquote(wallet_address)}\\n\\nChoose an action:\"\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def send_request(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Prompt user to confirm the request in wallet.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    reply_markup = keyboards.confirm_request(\n        url=context.connector.wallet_app.direct_url,\n        wallet_name=context.connector.wallet_app.name,\n    )\n    text = \"&lt;b&gt;Please confirm the request in your wallet.&lt;/b&gt;\"\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def transaction_sent(context: Context, user_id: int, transaction: SendTransactionResponse) -&gt; None:\n    \"\"\"\n    Show transaction confirmation and details.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    :param transaction: Transaction result.\n    \"\"\"\n    text = (\n        \"&lt;b&gt;Transaction sent!&lt;/b&gt;\\n\\n\"\n        f\"Normalized hash:\\n{hblockquote(transaction.normalized_hash)}\\n\"\n        f\"BoC:\\n{hblockquote(transaction.boc)}\\n\"\n    )\n    reply_markup = keyboards.go_to_main_menu()\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def choose_sign_data_type(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Show menu to select data type for signing.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    text = \"&lt;b&gt;Choose the type of data you want to sign:&lt;/b&gt;\"\n    reply_markup = keyboards.choose_sign_data_type()\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def sign_data_sent(context: Context, user_id: int, sign_data: SignDataResponse) -&gt; None:\n    \"\"\"\n    Show signed data result and verification.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    :param sign_data: Sign data result.\n    \"\"\"\n    is_signed = sign_data.verify_sign_data(context.connector.account.public_key)\n\n    if is_signed:\n        text = (\n            \"&lt;b&gt;Data successfully signed!&lt;/b&gt;\\n\\n\"\n            f\"Payload:\\n{hblockquote(json.dumps(sign_data.result.payload.to_dict(), indent=4))}\"\n        )\n    else:\n        text = (\n            \"&lt;b&gt;Failed to verify the signed data.&lt;/b&gt;\\n\"\n            \"The signature may be invalid or tampered.\"\n        )\n\n    reply_markup = keyboards.go_to_main_menu()\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def error(context: Context, user_id: int, message_text: str, button_text: str, callback_data: str) -&gt; None:\n    \"\"\"\n    Show error message with a retry button.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    :param message_text: Text to show in the error message.\n    :param button_text: Text for the retry button.\n    :param callback_data: Callback data for retry action.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))\n    reply_markup = builder.as_markup()\n\n    message = await context.bot.send_message(chat_id=user_id, text=hbold(message_text), reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#session-cleanup","title":"Session Cleanup","text":"<p>File: <code>src/session_manager.py</code></p> <p>This module implements a background task that monitors user activity and closes inactive TON Connect SSE sessions to reduce resource usage.</p>"},{"location":"cookbook/tonconnect-telegram/#key-mechanisms","title":"Key mechanisms","text":"<ul> <li>User last activity timestamps are stored in Redis using a sorted set (<code>ZSET</code>).</li> <li>The cleaner periodically scans for users who have been inactive for longer than <code>session_lifetime</code>.</li> <li>For each inactive user, <code>pause_sse()</code> is called on their connector to suspend the open connection.</li> <li>After pausing, the user record is removed from Redis.</li> </ul>"},{"location":"cookbook/tonconnect-telegram/#configuration-parameters","title":"Configuration parameters","text":"<ul> <li><code>session_lifetime</code> \u2014 maximum allowed inactivity duration (default: 1 hour).</li> <li><code>check_interval</code> \u2014 interval between cleanup iterations (default: 10 minutes).</li> <li><code>redis_key</code> \u2014 Redis key used to track last activity timestamps.</li> </ul> <p>This mechanism is essential in production environments where open connections must be optimized for scalability.</p> Code example <pre><code>import asyncio\nimport time\nfrom contextlib import suppress\n\nfrom redis.asyncio import Redis\nfrom tonutils.tonconnect import TonConnect\n\n\nclass TonConnectSessionManager:\n    \"\"\"\n    Closes inactive TonConnect sessions using Redis-based activity tracking.\n    \"\"\"\n\n    def __init__(\n            self,\n            redis: Redis,\n            tc: TonConnect,\n            session_lifetime: int = 3600,\n            check_interval: int = 600,\n            redis_key: str = \"tonconnect:last_seen\",\n    ) -&gt; None:\n        \"\"\"\n        :param redis: Redis client instance.\n        :param tc: TonConnect instance.\n        :param session_lifetime: Inactivity threshold in seconds.\n        :param check_interval: Interval between cleanup runs in seconds.\n        :param redis_key: Redis sorted set key for storing user activity.\n        \"\"\"\n        self.redis = redis\n        self.tc = tc\n        self.session_lifetime = session_lifetime\n        self.check_interval = check_interval\n        self.redis_key = redis_key\n        self._running = False\n\n    async def update(self, user_id: int) -&gt; None:\n        \"\"\"\n        Register user activity by storing a timestamp in Redis.\n\n        :param user_id: Telegram user ID.\n        \"\"\"\n        await self.redis.zadd(self.redis_key, {str(user_id): time.time()})\n\n    async def _cleanup(self, cutoff: float) -&gt; None:\n        \"\"\"\n        Close sessions for users inactive since the given timestamp.\n\n        :param cutoff: UNIX timestamp used as inactivity threshold.\n        \"\"\"\n        user_ids = await self.redis.zrangebyscore(\n            self.redis_key, min=0, max=cutoff, start=0, num=100\n        )\n        if not user_ids:\n            return\n\n        for raw_id in user_ids:\n            user_id = int(raw_id)\n            connector = await self.tc.get_connector(user_id)\n            if connector and connector.connected and not connector.bridge.is_session_closed:\n                with suppress(Exception):\n                    await connector.bridge.pause_sse()\n\n            await self.redis.zrem(self.redis_key, user_id)\n\n    async def start(self) -&gt; None:\n        \"\"\"\n        Launch the background task for periodic session cleanup.\n        \"\"\"\n        self._running = True\n        while self._running:\n            cutoff = time.time() - self.session_lifetime\n            await self._cleanup(cutoff)\n\n            await asyncio.sleep(self.check_interval)\n\n    def run(self) -&gt; None:\n        loop = asyncio.get_running_loop()\n        loop.create_task(self.start())\n\n    def stop(self) -&gt; None:\n        \"\"\"\n        Stop the background cleanup loop.\n        \"\"\"\n        self._running = False\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#middleware","title":"Middleware","text":"<p>File: <code>src/middlewares.py</code></p> <p>This module defines two essential middlewares for the Telegram bot:</p>"},{"location":"cookbook/tonconnect-telegram/#contextmiddleware","title":"ContextMiddleware","text":"<ul> <li>Creates a <code>Context</code> object for each incoming update.</li> <li>It also updates the user's last activity timestamp, allowing accurate session tracking and cleanup.</li> </ul>"},{"location":"cookbook/tonconnect-telegram/#throttlingmiddleware","title":"ThrottlingMiddleware","text":"<ul> <li>A simple anti-spam mechanism.</li> <li>Uses a TTL-based cache to block repeated requests from the same user within a short interval.</li> </ul> Code example <pre><code>from contextlib import suppress\nfrom typing import Callable, Dict, Any, Awaitable, Optional\n\nfrom aiogram import BaseMiddleware, Bot, Dispatcher\nfrom aiogram.fsm.context import FSMContext\nfrom aiogram.types import TelegramObject, User\nfrom cachetools import TTLCache\nfrom tonutils.tonconnect import TonConnect\n\nfrom .session_manager import TonConnectSessionManager\nfrom .utils.models import Context\n\n\nclass ContextMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware to inject a custom Context object into handler data.\n    \"\"\"\n\n    def __init__(self, tc_session_manager: TonConnectSessionManager) -&gt; None:\n        self.tc_session_manager = tc_session_manager\n\n    async def __call__(\n            self,\n            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],\n            event: TelegramObject,\n            data: Dict[str, Any],\n    ) -&gt; Any:\n        \"\"\"\n        Inject context if event is from a valid user.\n\n        :param handler: Event handler to call next.\n        :param event: Incoming Telegram update.\n        :param data: Handler context data.\n        :return: Handler result.\n        \"\"\"\n        user: User = data.get(\"event_from_user\")\n\n        if user and not user.is_bot:\n            await self.tc_session_manager.update(user.id)\n\n            bot: Bot = data.get(\"bot\")\n            tc: TonConnect = data.get(\"tc\")\n            state: FSMContext = data.get(\"state\")\n            connector = await tc.init_connector(user.id)\n\n            context = Context(\n                bot=bot,\n                state=state,\n                tc=tc,\n                connector=connector,\n            )\n\n            tc[\"context\"] = context\n            data[\"context\"] = context\n\n        return await handler(event, data)\n\n\nclass ThrottlingMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware to prevent spam by throttling user input.\n    \"\"\"\n\n    def __init__(self, ttl: float = 0.7) -&gt; None:\n        \"\"\"\n        :param ttl: Time-to-live in seconds for each user.\n        \"\"\"\n        self.cache = TTLCache(maxsize=10_000, ttl=ttl)\n\n    async def __call__(\n            self,\n            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],\n            event: TelegramObject,\n            data: Dict[str, Any],\n    ) -&gt; Optional[Any]:\n        \"\"\"\n        Block repeated events from the same user within TTL.\n\n        :param handler: Event handler to call next.\n        :param event: Incoming Telegram update.\n        :param data: Handler context data.\n        :return: Handler result or None if throttled.\n        \"\"\"\n        user: Optional[User] = data.get(\"event_from_user\")\n\n        if user and user.id in self.cache:\n            with suppress(Exception):\n                await getattr(event, \"message\", None).delete()\n            return None\n\n        if user:\n            self.cache[user.id] = None\n\n        return await handler(event, data)\n\n\ndef register_middlewares(dp: Dispatcher) -&gt; None:\n    \"\"\"\n    Register all middlewares in the dispatcher.\n\n    :param dp: Aiogram dispatcher instance.\n    \"\"\"\n    dp.update.middleware.register(ContextMiddleware(dp[\"tc_session_manager\"]))\n    dp.update.middleware.register(ThrottlingMiddleware())\n\n\n__all__ = [\"register_middlewares\"]\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#event-handling","title":"Event Handling","text":"<p>File: <code>src/events.py</code></p> <p>This module registers and handles all TON Connect events, along with associated errors.</p>"},{"location":"cookbook/tonconnect-telegram/#main-event-types","title":"Main event types","text":"<ul> <li> <p>Wallet connection (<code>CONNECT</code>)</p> <ul> <li>Verifies <code>ton_proof</code> to confirm wallet ownership.</li> <li>On success, displays the main action menu.</li> <li>On failure, disconnects and prompts the user to retry.</li> </ul> </li> <li> <p>Connection errors</p> <ul> <li>Handles timeouts and request rejections.</li> <li>Notifies the user and provides an option to reconnect.</li> </ul> </li> <li> <p>Wallet disconnection (<code>DISCONNECT</code>)</p> <ul> <li>Handles both manual and forced disconnects (e.g. invalid proof).</li> <li>Prompts the user to reconnect.</li> </ul> </li> <li> <p>Disconnection errors</p> <ul> <li>Notifies the user without interrupting the session flow.</li> </ul> </li> <li> <p>Transaction (<code>TRANSACTION</code>)</p> <ul> <li>Displays transaction hash on success.</li> <li>Shows error message with options to retry or return to menu on failure.</li> </ul> </li> <li> <p>Sign data (<code>SIGN_DATA</code>)</p> <ul> <li>Shows signature results and verification status.</li> <li>Informs the user of any issues during the signing process.</li> </ul> </li> </ul> <p>All event handlers are registered using the <code>register_event</code> method of the <code>TonConnect</code> instance.</p> Code example <pre><code>from tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import (\n    Event,\n    EventError,\n    SendTransactionResponse,\n    SignDataResponse,\n    WalletInfo,\n)\nfrom tonutils.tonconnect.utils.exceptions import *\n\nfrom .utils import Context, windows\n\n\nasync def connect_event(user_id: int, wallet: WalletInfo, context: Context) -&gt; None:\n    \"\"\"\n    Called when the wallet is connected.\n\n    :param user_id: Telegram user ID.\n    :param wallet: Connected wallet information.\n    :param context: Execution context.\n    \"\"\"\n    state_data = await context.state.get_data()\n    stored_proof = state_data.get(\"ton_proof\")\n\n    if wallet.verify_proof_payload(stored_proof):\n        await windows.wallet_connected(context, user_id)\n    else:\n        context.connector.add_event_kwargs(Event.DISCONNECT, failed_proof=True)\n        await context.connector.disconnect_wallet()\n\n\nasync def connect_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle wallet connection errors.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"connect_wallet\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the wallet connection.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Connection request timed out.\"\n    else:\n        message_text = f\"Connection error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\nasync def disconnect_event(user_id: int, context: Context, failed_proof: Optional[bool] = None) -&gt; None:\n    \"\"\"\n    Called when the wallet is disconnected.\n\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    :param failed_proof: Whether disconnection was triggered by invalid proof.\n    \"\"\"\n    if failed_proof:\n        message_text = \"Wallet proof verification failed.\\n\\nPlease try again.\"\n        await windows.error(context, user_id, message_text, \"Try again\", \"connect_wallet\")\n    else:\n        await windows.connect_wallet(context, user_id)\n\n\nasync def disconnect_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle wallet disconnection errors.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"connect_wallet\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the wallet disconnection.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Disconnect request timed out.\"\n    else:\n        message_text = f\"Disconnect error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\nasync def transaction_event(user_id: int, transaction: SendTransactionResponse, context: Context) -&gt; None:\n    \"\"\"\n    Called when a transaction is sent successfully.\n\n    :param user_id: Telegram user ID.\n    :param transaction: Transaction result.\n    :param context: Execution context.\n    \"\"\"\n    await windows.transaction_sent(context, user_id, transaction)\n\n\nasync def transaction_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle errors during transaction.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"main_menu\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the transaction.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Transaction request timed out.\"\n    else:\n        message_text = f\"Transaction error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\nasync def sign_data_event(user_id: int, sign_data: SignDataResponse, context: Context) -&gt; None:\n    \"\"\"\n    Called when sign data request completes successfully.\n\n    :param user_id: Telegram user ID.\n    :param sign_data: Sign data result.\n    :param context: Execution context.\n    \"\"\"\n    await windows.sign_data_sent(context, user_id, sign_data)\n\n\nasync def sign_data_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle errors during sign data request.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"main_menu\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the data signing request.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Data signing request timed out.\"\n    else:\n        message_text = f\"Sign data error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\ndef register_events(tc: TonConnect) -&gt; None:\n    \"\"\"\n    Register all TonConnect event and error handlers.\n\n    :param tc: TonConnect instance.\n    \"\"\"\n    tc.register_event(Event.CONNECT, connect_event)\n    tc.register_event(Event.DISCONNECT, disconnect_event)\n    tc.register_event(Event.TRANSACTION, transaction_event)\n    tc.register_event(Event.SIGN_DATA, sign_data_event)\n\n    tc.register_event(EventError.CONNECT, connect_error)\n    tc.register_event(EventError.DISCONNECT, disconnect_error)\n    tc.register_event(EventError.TRANSACTION, transaction_error)\n    tc.register_event(EventError.SIGN_DATA, sign_data_error)\n\n\n__all__ = [\"register_events\"]\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#telegram-handlers","title":"Telegram Handlers","text":"<p>File: <code>src/handlers.py</code></p> <p>This module contains Telegram handlers for user interactions via commands and inline buttons.</p>"},{"location":"cookbook/tonconnect-telegram/#main-responsibilities","title":"Main responsibilities","text":"<ul> <li> <p>Handling the <code>/start</code> command</p> <ul> <li>If no wallet is connected \u2014 initiates wallet selection and connection flow.</li> <li>If already connected \u2014 displays the main menu with available actions.</li> </ul> </li> <li> <p>Handling inline callback queries</p> <ul> <li>Selecting a wallet and starting the connection process.</li> <li>Navigating through menus: main menu, connect, disconnect.</li> <li>Cancelling active requests: transactions or signing.</li> <li>Sending a single transaction.</li> <li>Sending a batch transaction.</li> <li>Requesting data signing.</li> </ul> </li> </ul> Code example <pre><code>from aiogram import Dispatcher\nfrom aiogram.filters import CommandStart\nfrom aiogram.types import CallbackQuery, Message\nfrom pytoniq_core import begin_cell\nfrom tonutils.tonconnect.models import (\n    SignDataPayloadText,\n    SignDataPayloadBinary,\n    SignDataPayloadCell,\n)\nfrom tonutils.tonconnect.utils.exceptions import *\nfrom tonutils.wallet.messages import TransferMessage\n\nfrom .utils import windows, Context\n\n\nasync def start_command(message: Message, context: Context) -&gt; None:\n    \"\"\"\n    Handle /start command. Launch wallet connection or main menu.\n\n    :param message: Incoming /start message.\n    :param context: Execution context.\n    \"\"\"\n    state_data = await context.state.get_data()\n    rpc_request_id = state_data.get(\"rpc_request_id\")\n\n    if context.connector.is_request_pending(rpc_request_id):\n        context.connector.cancel_pending_request(rpc_request_id)\n\n    if not context.connector.connected:\n        await windows.connect_wallet(context, message.from_user.id)\n    else:\n        await windows.wallet_connected(context, message.from_user.id)\n\n\nasync def callback_query_handler(callback_query: CallbackQuery, context: Context) -&gt; None:\n    \"\"\"\n    Handle all inline callback actions.\n\n    :param callback_query: Incoming callback query.\n    :param context: Execution context.\n    \"\"\"\n    state_data = await context.state.get_data()\n    rpc_request_id = state_data.get(\"rpc_request_id\")\n    data = callback_query.data\n\n    if data.startswith(\"app_wallet:\"):\n        selected_wallet = data.split(\":\")[1]\n        await context.state.update_data(selected_wallet=selected_wallet)\n        await windows.connect_wallet(context, callback_query.from_user.id)\n\n    elif data == \"main_menu\":\n        await windows.wallet_connected(context, callback_query.from_user.id)\n\n    elif data == \"connect_wallet\":\n        await windows.connect_wallet(context, callback_query.from_user.id)\n\n    elif data == \"disconnect_wallet\":\n        await context.connector.disconnect_wallet()\n\n    elif data == \"cancel_transaction\":\n        if context.connector.pending_request_context(rpc_request_id):\n            context.connector.cancel_pending_request(rpc_request_id)\n        await windows.wallet_connected(context, callback_query.from_user.id)\n\n    elif data == \"send_transaction\":\n        rpc_request_id = await context.connector.send_transfer(\n            destination=context.connector.account.address,\n            amount=0.000000001,\n            body=\"Hello from tonutils!\",\n        )\n        await windows.send_request(context, callback_query.from_user.id)\n        await context.state.update_data(rpc_request_id=rpc_request_id)\n\n    elif data == \"send_batch_transaction\":\n        max_messages = context.connector.device.get_max_supported_messages(context.connector.wallet)\n        messages = [\n            TransferMessage(\n                destination=context.connector.account.address,\n                amount=0.000000001,\n                body=\"Hello from tonutils!\",\n            ) for _ in range(max_messages)\n        ]\n        rpc_request_id = await context.connector.send_batch_transfer(messages)\n        await windows.send_request(context, callback_query.from_user.id)\n        await context.state.update_data(rpc_request_id=rpc_request_id)\n\n    elif data == \"send_sign_data_request\":\n        await windows.choose_sign_data_type(context, callback_query.from_user.id)\n\n    elif data.startswith(\"send_sign_data_request:\"):\n        payload_type = data.split(\":\")[1]\n        payload_data = \"Hello from tonutils!\"\n\n        if payload_type == \"text\":\n            payload = SignDataPayloadText(text=payload_data)\n        elif payload_type == \"binary\":\n            payload = SignDataPayloadBinary(bytes=payload_data.encode())\n        else:\n            schema = \"text_comment#00000000 text:Snakedata = InMsgBody;\"\n            cell = begin_cell().store_uint(0, 32).store_snake_string(payload_data).end_cell()\n            payload = SignDataPayloadCell(cell=cell, schema=schema)\n\n        try:\n            context.connector.device.verify_sign_data_feature(\n                context.connector.wallet, payload,\n            )\n            rpc_request_id = await context.connector.sign_data(payload)\n            await context.state.update_data(rpc_request_id=rpc_request_id)\n            await windows.send_request(context, callback_query.from_user.id)\n        except WalletNotSupportFeatureError:\n            await callback_query.answer(\"Your wallet does not support the sign data feature!\", show_alert=True)\n\n    await callback_query.answer()\n\n\ndef register_handlers(dp: Dispatcher) -&gt; None:\n    \"\"\"\n    Register bot handlers.\n\n    :param dp: Aiogram dispatcher.\n    \"\"\"\n    dp.message.register(start_command, CommandStart())\n    dp.callback_query.register(callback_query_handler)\n\n\n__all__ = [\"register_handlers\"]\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#entry-point","title":"Entry Point","text":"<p>File: <code>src/__main__.py</code></p> <p>This module serves as the glue for the entire application and initiates the bot lifecycle.</p>"},{"location":"cookbook/tonconnect-telegram/#main-responsibilities_1","title":"Main responsibilities","text":"<ul> <li>Loads configuration from <code>.env</code> using <code>Config.load()</code>.</li> <li>Establishes Redis connections:<ul> <li>for FSM state storage,</li> <li>for TonConnect session persistence.</li> </ul> </li> <li>Initializes key components <code>Bot</code>, <code>TonConnect</code>, <code>Dispatcher</code>:</li> <li>Registers:<ul> <li>Telegram command and callback handlers,</li> <li>TonConnect event listeners,</li> <li>middlewares.</li> </ul> </li> <li>Starts the background <code>TonConnectSessionManager</code> task to suspend inactive sessions.</li> <li>Launches polling to process incoming Telegram updates.</li> </ul> Code example <pre><code>import logging\n\nfrom aiogram import Dispatcher, Bot\nfrom aiogram.client.default import DefaultBotProperties\nfrom aiogram.fsm.storage.redis import RedisStorage as BotStorage\nfrom redis.asyncio import Redis\nfrom tonutils.tonconnect import TonConnect\n\nfrom .events import register_events\nfrom .handlers import register_handlers\nfrom .middlewares import register_middlewares\nfrom .session_manager import TonConnectSessionManager\nfrom .utils.models import Config\nfrom .utils.storage import RedisStorage as TCStorage\n\n\nasync def main() -&gt; None:\n    \"\"\"\n    Entry point for the bot application.\n    Initializes config, Redis, TonConnect, dispatcher, and starts polling.\n    \"\"\"\n    logging.basicConfig(level=logging.INFO)\n    config = Config.load()\n\n    # Redis connections for Aiogram FSM and TonConnect storage\n    redis = Redis.from_url(url=config.REDIS_DSN)\n    bot_storage = BotStorage(redis)\n    tc_storage = TCStorage(redis)\n\n    # Bot setup\n    props = DefaultBotProperties(parse_mode=\"HTML\")\n    bot = Bot(token=config.BOT_TOKEN, default=props)\n\n    # TonConnect setup\n    tc = TonConnect(storage=tc_storage, manifest_url=config.TC_MANIFEST)\n    tc_session_manager = TonConnectSessionManager(redis=redis, tc=tc)\n\n    # Dispatcher\n    dp = Dispatcher(storage=bot_storage, tc=tc, tc_session_manager=tc_session_manager)\n\n    # Register handlers, events, and middleware\n    register_events(tc)\n    register_handlers(dp)\n    register_middlewares(dp)\n    tc_session_manager.run()\n\n    # Start polling\n    await dp.start_polling(bot)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/tonconnect-telegram/#running-the-bot","title":"Running the Bot","text":"<ul> <li>Ensure the <code>.env</code> file is present in the project root with all required environment variables.</li> <li>Make sure the Redis server is running and reachable at the <code>REDIS_DSN</code> address.</li> <li> <p>Start the bot using:</p> <pre><code>python -m src\n</code></pre> </li> </ul>"},{"location":"cookbook/tonconnect-telegram/#conclusion","title":"Conclusion","text":"<p>This bot provides a solid and extensible foundation for integrating TON Connect into Telegram. It implements essential functionality for wallet connection, transaction sending, and data signing, while also supporting session persistence and SSE-based resource optimization. The modular architecture makes it easy to adapt and extend for various use cases.</p> <p>Full source code is available at: tonconnect-demo-bot</p>"},{"location":"cookbook/tonconnect-telegram/#see-also","title":"See also","text":"<ul> <li>TON Connect Documentation and Specifications</li> <li>tonutils TON Connect Documentation</li> <li>aiogram Documentation</li> </ul>"},{"location":"cookbook/vanity/","title":"Creating Vanity Address","text":""},{"location":"cookbook/vanity/#introduction","title":"Introduction","text":"<p>This guide explains how to create vanity addresses on the TON blockchain \u2014 contracts or wallets with custom patterns (for example, specific starting or ending characters) that make the address visually distinctive. Vanity addresses are often used for branding, better recognizability, or aesthetic purposes.</p>"},{"location":"cookbook/vanity/#vanity-contract-address","title":"Vanity Contract Address","text":"<p>To create a vanity contract address (for example, for a Jetton Master contract), follow these steps.</p>"},{"location":"cookbook/vanity/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/ton-community/vanity-contract\n</code></pre>"},{"location":"cookbook/vanity/#install-dependencies","title":"Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"cookbook/vanity/#run-the-generator","title":"Run the Generator","text":"<pre><code>python src/generator/run.py --end {suffix} -w -0 --case-sensitive {owner_address}\n</code></pre> <ul> <li>Replace <code>{suffix}</code> with the desired ending for the generated address.</li> <li>Replace <code>{owner_address}</code> with the wallet address from which the deployment will be made.</li> </ul> <p>Example:</p> <pre><code>python src/generator/run.py --end NESS -w -0 --case-sensitive UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\n</code></pre> <p>If a match is found, you will see a message like:</p> <pre><code>Found: EQC7PA9iWnUVWv001Drj3vTu-pmAkTc30OarHy5iDJ1uNESS salt: 7c9398f0999a96fe5480b5d573817255d53377a000be18d0fb47d090a5606dfe\n</code></pre>"},{"location":"cookbook/vanity/#deploy-the-contract","title":"Deploy the Contract","text":"<p>Copy the <code>salt</code> value and use it in the <code>SALT</code> constant in the deployment script:</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOnchainContent\nfrom tonutils.vanity import Vanity\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The salt for the vanity address\nSALT = \"\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStandard(\n        content=JettonOnchainContent(\n            name=\"Ness Jetton\",\n            symbol=\"NESS\",\n            description=\"Probably nothing\",\n            decimals=9,\n            image=\"https://ton.org/download/ton_symbol.png\",\n        ),\n        admin_address=wallet.address,\n    )\n    vanity = Vanity(\n        owner_address=wallet.address,\n        salt=SALT,\n    )\n    body = vanity.build_deploy_body(jetton_master)\n\n    tx_hash = await wallet.transfer(\n        destination=vanity.address,\n        amount=0.05,\n        body=body,\n        state_init=vanity.state_init,\n    )\n\n    print(f\"Successfully deployed contract at address: {vanity.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"cookbook/vanity/#vanity-wallet-address","title":"Vanity Wallet Address","text":"<p>Note</p> <p>The mnemonic phrase and wallet ID generated by this tool are only compatible with <code>WalletV3R2</code>.</p> <p>To create a vanity wallet address using GPU acceleration, follow these steps.</p>"},{"location":"cookbook/vanity/#check-requirements","title":"Check Requirements","text":"<p>NVIDIA GPU (driver version 555.* or later).</p>"},{"location":"cookbook/vanity/#download-binary","title":"Download Binary","text":"<p>Download the <code>gpu-generator-linux</code> binary from the latest release.</p>"},{"location":"cookbook/vanity/#run-the-generator_1","title":"Run the Generator","text":"<p>To start the generator with interactive input:</p> <pre><code>./gpu-generator-linux\n</code></pre> <p>To run the generator with predefined constraints directly from the command line:</p> <pre><code>./gpu-generator-linux -q \"start[*][T][O][N] | end[1][2][3]\"\n</code></pre> <p>Follow the on-screen instructions to monitor progress and view results.</p> <p>After a successful match, the tool will display the mnemonic phrase and the wallet ID for use with a <code>WalletV3R2</code> wallet.</p> <p>Constraints Syntax</p> <ul> <li> <p>Allowed characters: <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>_</code>, <code>-</code></p> </li> <li> <p>Start constraint (after <code>UQ</code> prefix, third character):</p> <p>Example \u2192 <code>start[A][P][P][L][E]</code> or <code>start[*][T][O][N]</code></p> </li> <li> <p>End constraint:</p> <p>Example \u2192 <code>end[T][O][N]</code> or <code>end[Tt][Oo][Nn]</code></p> </li> <li> <p>Combined constraints:</p> <p>Example \u2192 <code>start[*][T][O][N] &amp; end[T][O][N]</code></p> </li> <li> <p>Multiple variants (OR):</p> <p>Example \u2192 <code>start[*][T][O][N] &amp; end[T][O][N] | start[D][D][D] | end[0][0][0]</code></p> </li> </ul> <p>Performance Reference</p> Hardware 5 chars 6 chars 7 chars 8 chars Intel i5-8350U 4 min 4 h 40 m 12.5 days &gt; 2 years AMD Ryzen 5 3600 26 sec 30 min 31.5 h 84 days NVIDIA GTX 1650 SUPER 2 sec 2 min 2 h 5.5 days NVIDIA RTX 4090 &lt;1 sec 13 sec 13.5 min 14.5 h"},{"location":"cookbook/vanity/#use-the-generated-wallet","title":"Use the Generated Wallet","text":"<p>After obtaining the mnemonic and wallet ID, use the following code:</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV3R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Wallet ID\nWALLET_ID = 0\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV3R2.from_mnemonic(client, MNEMONIC, WALLET_ID)\n\n    print(f\"Address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"cookbook/vanity/#conclusion","title":"Conclusion","text":"<p>Vanity addresses are a cosmetic feature that can make your TON wallet or contract stand out. While they offer no functional advantage, they can be useful for branding, marketing, or personal aesthetics.</p>"},{"location":"cookbook/vanity/#see-also","title":"See also","text":"<ul> <li>Vanity Contract Generator</li> <li>Vanity Wallet Generator</li> </ul>"},{"location":"guide/getting-testnet-assets/","title":"Getting Testnet Assets","text":"<p>This section explains how to claim testnet assets.</p>"},{"location":"guide/getting-testnet-assets/#ton","title":"TON","text":"TON To get TON, go to the Telegram bot and follow its instructions. Open Telegram Bot"},{"location":"guide/getting-testnet-assets/#not-jetton-9-decimals","title":"NOT Jetton (9 decimals)","text":"NOT Jetton To claim NOT jettons, scan this QR code in your TON wallet. Claim Testnet NOT"},{"location":"guide/getting-testnet-assets/#usd-jetton-6-decimals","title":"USD\u20ae Jetton (6 decimals)","text":"USD\u20ae Jetton To claim USD\u20ae jettons, scan this QR code in your TON wallet. Claim Testnet USD\u20ae"},{"location":"guide/installation-and-initialization/","title":"Installation and Initialization","text":"<p>This section explains how to install the <code>tonutils</code> library and select the appropriate client depending on your needs.</p>"},{"location":"guide/installation-and-initialization/#installation","title":"Installation","text":"<p>To install the base <code>tonutils</code> package:</p> <pre><code>pip install tonutils\n</code></pre> <p>If you need to use Native ADNL connections, install with optional dependencies:</p> <pre><code>pip install 'tonutils[pytoniq]'\n</code></pre>"},{"location":"guide/installation-and-initialization/#available-clients","title":"Available Clients","text":""},{"location":"guide/installation-and-initialization/#rpc-api","title":"RPC API","text":""},{"location":"guide/installation-and-initialization/#common-parameters","title":"Common Parameters","text":"<p>All API clients in the <code>tonutils.client</code> library support request rate management parameters:</p> <ul> <li> <p><code>rps</code> \u2014 requests per second limit.   Different APIs enforce their own rate limits. This parameter helps ensure the client does not exceed those limits, avoiding <code>rate limit</code> errors.</p> </li> <li> <p><code>max_retries</code> \u2014 number of retry attempts when a rate limit error (HTTP 429) occurs.   If the API temporarily rejects a request due to too many requests, the client will wait and retry.</p> </li> </ul>"},{"location":"guide/installation-and-initialization/#toncenter","title":"toncenter","text":"<p>toncenter.com \u2014 fast and reliable HTTP API for The Open Network.  </p> <p>Note</p> <p>API key is optional, but for better performance it is recommended to obtain one via  @tonapibot.</p> <pre><code>from tonutils.client import ToncenterV2Client\nfrom tonutils.client import ToncenterV3Client\n\nAPI_KEY = \"your api key\"  # Optional\nIS_TESTNET = True\n\n# Using Toncenter V3 client\nclient_v3 = ToncenterV3Client(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n\n# Using Toncenter V2 client (if needed)\n# client_v2 = ToncenterV2Client(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n</code></pre>"},{"location":"guide/installation-and-initialization/#tonapi","title":"tonapi","text":"<p>tonapi.io \u2014 REST API to the TON blockchain explorer.  </p> <p>Note</p> <p>Requires an API key from tonconsole.com.</p> <pre><code>from tonutils.client import TonapiClient\n\nAPI_KEY = \"your api key\"\nIS_TESTNET = True\nclient = TonapiClient(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n</code></pre>"},{"location":"guide/installation-and-initialization/#quicknode","title":"quicknode","text":"<p>quicknode.com \u2014 low-latency HTTP API access to TON via global infrastructure.  </p> <p>Note</p> <p>Requires an API URL from quicknode.com.</p> <p>Quicknode does not support testnet!</p> <pre><code>from tonutils.client import QuicknodeClient\n\nHTTP_PROVIDER_URL = \"https://blissful-withered-surf.ton-mainnet.quiknode.pro/d6e8...1964\"\nclient = QuicknodeClient(HTTP_PROVIDER_URL, rps=1)\n</code></pre>"},{"location":"guide/installation-and-initialization/#tatum","title":"tatum","text":"<p>tatum.io \u2014 RPCs and APIs powering Web3.  </p> <p>Note</p> <p>Requires an API key from tatum.io.</p> <pre><code>from tonutils.client import TatumClient\n\nAPI_KEY = \"your api key\"\nIS_TESTNET = True\nclient = TatumClient(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n</code></pre>"},{"location":"guide/installation-and-initialization/#native-adnl","title":"Native ADNL","text":""},{"location":"guide/installation-and-initialization/#pytoniq","title":"pytoniq","text":"<p>pytoniq \u2014 library for direct interaction with Lite servers.  </p> <p>Note</p> <p>For better performance, provide your own config, which can be obtained from the liteserver bot.</p> <pre><code>from tonutils.client import LiteserverClient\n\nIS_TESTNET = True\nclient = LiteserverClient(is_testnet=IS_TESTNET)\n\n# Using custom configuration\n# config = {}  # Your LiteServer config here \n# client = LiteserverClient(config=config)\n</code></pre>"},{"location":"guide/usage-scenarios/","title":"Usage Scenarios","text":"<p>This section provides practical examples of working with the <code>tonutils</code> library. You will learn how to create and import wallets, send transactions, retrieve contract data, and call methods on the TON network.</p>"},{"location":"guide/usage-scenarios/#working-with-wallets","title":"Working with Wallets","text":""},{"location":"guide/usage-scenarios/#creating-a-wallet","title":"Creating a Wallet","text":"<pre><code>from tonutils.wallet import WalletV4R2\nfrom tonutils.client import ToncenterV3Client\n\nclient = ToncenterV3Client(is_testnet=True, rps=1)\nwallet, public_key, private_key, mnemonic = WalletV4R2.create(client)\n</code></pre> <p>Result:</p> <ul> <li><code>wallet</code>: an instance of <code>WalletV4R2</code>, ready to use</li> <li><code>public_key</code>: byte representation of the public key (<code>bytes</code>)</li> <li><code>private_key</code>: byte representation of the private key (<code>bytes</code>)</li> <li><code>mnemonic</code>: list of 24 words (<code>List[str]</code>)</li> </ul>"},{"location":"guide/usage-scenarios/#importing-a-wallet","title":"Importing a Wallet","text":"<pre><code>wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n</code></pre> <p>Parameter:</p> <ul> <li><code>MNEMONIC</code> \u2014 can be provided in one of two formats:<ul> <li>a string of 12/24 space-separated words;</li> <li>a list of 12/24 words.</li> </ul> </li> </ul>"},{"location":"guide/usage-scenarios/#sending-transactions","title":"Sending Transactions","text":""},{"location":"guide/usage-scenarios/#single-transaction","title":"Single Transaction","text":"<pre><code>tx_hash = await wallet.transfer(\n    destination=\"nessshon.t.me\",\n    amount=1,\n    body=\"Hello from tonutils!\",\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>destination</code>: the recipient \u2014 can be:<ul> <li>a string with the address;</li> <li>an <code>Address</code> object;</li> <li>a <code>.ton</code> or <code>.t.me</code> domain name;</li> </ul> </li> <li><code>amount</code>: amount in TON (not in nanotons);</li> <li><code>body</code>: comment as a string or custom data as a <code>Cell</code>.</li> </ul> <p>Result:</p> <ul> <li>Normalized transaction hash (<code>str</code>)</li> </ul>"},{"location":"guide/usage-scenarios/#batch-transfer","title":"Batch Transfer","text":"<p>Allows sending multiple transfers in a single transaction:</p> <pre><code>from tonutils.wallet.messages import TransferMessage\n\ntx_hash = await wallet.batch_transfer_messages([\n    TransferMessage(destination=\"UQ...\", amount=0.01, body=\"Hello from tonutils!\"),\n    TransferMessage(destination=\"UQ...\", amount=0.02, body=\"Hello from tonutils!\"),\n])\n</code></pre> <p>Result:</p> <ul> <li>Normalized transaction hash (<code>str</code>)</li> </ul>"},{"location":"guide/usage-scenarios/#send-mode","title":"Send Mode","text":"<p>The <code>send_mode</code> parameter controls transaction behavior \u2014 for example, it can send the entire balance (<code>128</code>).</p> <pre><code>await wallet.transfer(\n    destination=\"UQ...\",\n    amount=0,\n    send_mode=128,\n)\n</code></pre> <p>Note</p> <p>For more details on available send modes, see the official TON documentation.</p>"},{"location":"guide/usage-scenarios/#contract-information","title":"Contract Information","text":""},{"location":"guide/usage-scenarios/#contract-balance","title":"Contract Balance","text":"<pre><code>balance = await client.get_account_balance(\"UQ...\")\n</code></pre> <p>Result:</p> <p>An integer (<code>int</code>) representing the contract balance in nanotons.</p>"},{"location":"guide/usage-scenarios/#contract-data","title":"Contract Data","text":"<pre><code>contract_data = await client.get_raw_account(\"UQ...\")\n</code></pre> <p>Result:</p> <p>An object containing contract information with the following fields:</p> <ul> <li><code>balance</code>: current contract balance in nanotons (<code>int</code>);</li> <li><code>status</code>: account state: <code>active</code>, <code>nonexist</code>, <code>frozen</code>, <code>uninit</code>;</li> <li><code>code</code>: contract code (<code>Optional[Cell]</code>);</li> <li><code>data</code>: contract data (<code>Optional[Cell]</code>);</li> <li><code>last_transaction_lt</code>: logical time of the last transaction (<code>Optional[int]</code>);</li> <li><code>last_transaction_hash</code>: hash of the last transaction (<code>Optional[str]</code>);</li> <li><code>state_init</code>: <code>StateInit</code> object if <code>code</code> and <code>data</code> are present.</li> </ul>"},{"location":"guide/usage-scenarios/#calling-a-contract-method","title":"Calling a Contract Method","text":"<p>The <code>run_get_method</code> function allows invoking a contract's <code>get-method</code>.</p> <pre><code>result = await client.run_get_method(\n    address=\"UQ...\",\n    method_name=\"get_my_data\",\n    stack=[0]\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>address</code>: contract address as a string;</li> <li><code>method_name</code>: name of the method to call (<code>str</code>);</li> <li><code>stack</code>: list of arguments (supported types: <code>int</code>, <code>Cell</code>, <code>Slice</code>).</li> </ul> <p>Result:</p> <p>A list of values returned from the method's execution stack.</p>"},{"location":"guide/examples/dns-operations/","title":"Managing TON DNS","text":"<p>This section provides a complete guide to managing TON DNS records and subdomains using the <code>tonutils</code> library. It covers setting various DNS records, deploying and minting subdomains as NFTs, and using both subdomain collections and simple subdomain managers.</p> <p>Note</p> <p>For a practical example of creating and managing TON subdomains, see Cookbook: Minting TON Subdomains.</p>"},{"location":"guide/examples/dns-operations/#set-records","title":"Set Records","text":""},{"location":"guide/examples/dns-operations/#set-site","title":"Set Site","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the site record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The ADNL address that will be set in the DNS record\nADNL_ADDRESS = \"{hex}\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_site_record_body(ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Site record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-wallet","title":"Set Wallet","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the wallet record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The address of the wallet that will be set in the DNS record\nWALLET_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_wallet_record_body(Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Wallet record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-storage","title":"Set Storage","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the storage record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The hex-encoded BAG ID for the storage record\nBAG_ID = \"{hex}\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_storage_record_body(BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Storage record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-next-resolver","title":"Set Next Resolver","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the next resolver record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The address of the contract to be set as the next resolver\nCONTRACT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_next_resolver_record_body(Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Next resolver record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#subdomain-collection","title":"Subdomain Collection","text":""},{"location":"guide/examples/dns-operations/#deploy-collection","title":"Deploy Collection","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_collection import SubdomainCollection\nfrom tonutils.dns.subdomain_collection.content import SubdomainCollectionContent\nfrom tonutils.dns.subdomain_collection.data import FullDomain\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# NFT domain name and address from TON DNS Domains\n# Obtainable from https://dns.ton.org/ or https://dns.ton.org/?testnet=true\nDOMAIN_NAME = \"ghost\"  # ghost \u2192 ghost.ton\nDOMAIN_ADDRESS = \"EQ...\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n# The base URL of the API for generating metadata for NFTs.\n# API source code: https://github.com/nessshon/subdomains-toolbox\nAPI_BASE_URL = \"https://dns.ness.su/api/ton/\"\n\n# Metadata for the NFT collection\nCOLLECTION_METADATA = {\n    \"name\": f\"{DOMAIN_NAME.title()} DNS Domains\",\n    \"image\": f\"{API_BASE_URL}{DOMAIN_NAME}.png\",\n    \"description\": f\"*.{DOMAIN_NAME}.ton domains\",\n    \"prefix_uri\": API_BASE_URL,\n}\n\"\"\"\n{\n    \"name\": \"Ghost DNS Domains\",\n    \"image\": \"https://dns.ness.su/api/ton/ghost.png\",\n    \"description\": \"*.ghost.ton domains\",\n    \"prefix_uri\": \"https://dns.ness.su/api/ton/\"\n}\n\"\"\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = SubdomainCollection(\n        owner_address=wallet.address,\n        content=SubdomainCollectionContent(**COLLECTION_METADATA),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=wallet.address,\n        ),\n        full_domain=FullDomain(DOMAIN_NAME, \"ton\"),\n    )\n\n    tx_hash = await wallet.batch_transfer_messages(\n        [\n            # Deploy collection\n            TransferMessage(\n                destination=collection.address,\n                amount=0.05,\n                body=collection.build_deploy_body(),\n                state_init=collection.state_init,\n            ),\n            # Binding a Subdomain Collection to the main domain\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(collection.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#mint-subdomain-nft","title":"Mint Subdomain NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Subdomain Collection contract\nSUBDOMAIN_COLLECTION_ADDRESS = \"EQ...\"\n\n# The name of the subdomain to be minted\nSUBDOMAIN_NAME = \"alice\"  # alice \u2192 alice.ghost.ton\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_COLLECTION_ADDRESS,\n        amount=0.1,\n        body=SUBDOMAIN_NAME,\n    )\n\n    print(f\"Successfully minted subdomain {SUBDOMAIN_NAME}!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#simple-subdomain-manager","title":"Simple Subdomain Manager","text":""},{"location":"guide/examples/dns-operations/#deploy-manager","title":"Deploy Manager","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Subdomain Manager\nADMIN_ADDRESS = \"UQ...\"\n\n# NFT domain address from TON DNS Domains\n# Obtainable from https://dns.ton.org/ or https://dns.ton.org/?testnet=true\nDOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    subdomain_manager = SubdomainManager(Address(ADMIN_ADDRESS))\n\n    tx_hash = await wallet.batch_transfer_messages(\n        [\n            # Deploy collection\n            TransferMessage(\n                destination=subdomain_manager.address,\n                amount=0.05,\n                state_init=subdomain_manager.state_init,\n            ),\n            # Binding a Subdomain Manager to the main domain\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(subdomain_manager.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Manager at address: {subdomain_manager.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-site-record","title":"Set Site Record","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The ADNL address to be set for the subdomain\nADNL_ADDRESS = \"{hex}\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_site_record_body(SUBDOMAIN, ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Subdomain successfully registered and site record set!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-wallet-record","title":"Set Wallet Record","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The address of the wallet to be set for the subdomain\nWALLET_ADDRESS = \"UQ...\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_wallet_record_body(SUBDOMAIN, Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Subdomain successfully registered and wallet set!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-storage-record","title":"Set Storage Record","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The ID of the storage bag to be set for the subdomain\nBAG_ID = \"{hex}\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_storage_record_body(SUBDOMAIN, BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Subdomain successfully registered and storage record set!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/dns-operations/#set-next-resolver-record","title":"Set Next Resolver Record","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The address of the next resolver contract\nCONTRACT_ADDRESS = \"EQ...\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_next_resolver_record_body(SUBDOMAIN, Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully registered subdomain and set the next resolver!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/","title":"Working with Jettons","text":"<p>This section provides a complete guide to working with Jettons using the <code>tonutils</code> library. It covers operations for both Stablecoin Jettons (by Notcoin) and Standard Jettons, including deployment, minting, burning, administration, and swaps through decentralized exchanges like STON.fi and DeDust.io.</p>"},{"location":"guide/examples/jetton-operations/#stablecoin-jetton","title":"Stablecoin Jetton","text":""},{"location":"guide/examples/jetton-operations/#deploy-jetton-master","title":"Deploy Jetton Master","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.jetton.content import JettonStablecoinContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Jetton Master\nADMIN_ADDRESS = \"UQ...\"\n\n# URI for the off-chain content of the Jetton\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nURI = \"https://example.com/jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStablecoin(\n        content=JettonStablecoinContent(URI),\n        admin_address=ADMIN_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_master.address,\n        amount=0.05,\n        state_init=jetton_master.state_init,\n    )\n\n    print(f\"Successfully deployed Jetton Master at address: {jetton_master.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#upgrade-contract","title":"Upgrade Contract","text":"<pre><code>from pytoniq_core import Cell\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Cell containing the updated contract code\nNEW_CODE_CELL = Cell.one_from_boc(\"code hex\")\n\n# Cell containing the updated contract data\nNEW_DATA_CELL = Cell.one_from_boc(\"data hex\")\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_upgrade_message_body(\n        new_code=NEW_CODE_CELL,\n        new_data=NEW_DATA_CELL,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully upgraded the contract!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#mint-jetton","title":"Mint Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The amount of Jettons to mint (in base units, considering decimals)\nJETTON_AMOUNT = 1000000\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_mint_body(\n        destination=wallet.address,\n        jetton_amount=int(JETTON_AMOUNT * (10 ** 9)),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.1,\n        body=body,\n    )\n\n    print(f\"Successfully minted {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#burn-jetton","title":"Burn Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin, JettonWalletStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The amount of Jettons to burn (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_wallet_address = await JettonMasterStablecoin.get_wallet_address(\n        client=client,\n        owner_address=wallet.address.to_str(),\n        jetton_master_address=JETTON_MASTER_ADDRESS,\n    )\n    body = JettonWalletStablecoin.build_burn_body(\n        jetton_amount=int(JETTON_AMOUNT * (10 ** 9)),\n        response_address=wallet.address,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully burned {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#change-admin","title":"Change Admin","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract where the admin will be changed\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The new administrator address to be set for the Jetton Master contract\nNEW_ADMIN_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_change_admin_body(\n        new_admin_address=Address(NEW_ADMIN_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully changed the admin of the Jetton Master!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#drop-admin","title":"Drop Admin","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract where the admin will be changed\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_drop_admin_body()\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Jetton Master admin has been successfully dropped!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#change-content","title":"Change Content","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.jetton.content import JettonStablecoinContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# New URI for the Jetton offchain content\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nNEW_URI = \"https://example.com/new-jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_change_content_body(\n        new_content=JettonStablecoinContent(NEW_URI),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully updated Jetton content!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#standard-jetton","title":"Standard Jetton","text":""},{"location":"guide/examples/jetton-operations/#deploy-jetton-master-onchain","title":"Deploy Jetton Master (onchain)","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOnchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Jetton Master\nADMIN_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStandard(\n        content=JettonOnchainContent(\n            name=\"Ness Jetton\",\n            symbol=\"NESS\",\n            description=\"Probably nothing\",\n            decimals=9,\n            image=\"https://example.com/image.png\",\n        ),\n        admin_address=ADMIN_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_master.address,\n        amount=0.05,\n        state_init=jetton_master.state_init,\n    )\n\n    print(f\"Successfully deployed Jetton Master at address: {jetton_master.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#deploy-jetton-master-offchain","title":"Deploy Jetton Master (offchain)","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Jetton Master\nADMIN_ADDRESS = \"UQ...\"\n\n# URI for the off-chain content of the Jetton\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nURI = \"https://example.com/jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStandard(\n        content=JettonOffchainContent(URI),\n        admin_address=ADMIN_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_master.address,\n        amount=0.05,\n        state_init=jetton_master.state_init,\n    )\n\n    print(f\"Successfully deployed Jetton Master at address: {jetton_master.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#mint-jetton_1","title":"Mint Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The amount of Jettons to mint (in base units, considering decimals)\nJETTON_AMOUNT = 1000000\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStandard.build_mint_body(\n        destination=wallet.address,\n        jetton_amount=int(JETTON_AMOUNT * (10 ** JETTON_DECIMALS)),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully minted {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#burn-jetton_1","title":"Burn Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard, JettonWalletStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# The amount of Jettons to burn (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_wallet_address = await JettonMasterStandard.get_wallet_address(\n        client=client,\n        owner_address=wallet.address.to_str(),\n        jetton_master_address=JETTON_MASTER_ADDRESS,\n    )\n    body = JettonWalletStandard.build_burn_body(\n        jetton_amount=int(JETTON_AMOUNT * (10 ** JETTON_DECIMALS)),\n        response_address=wallet.address,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully burned {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#change-admin_1","title":"Change Admin","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract where the admin will be changed\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The new administrator address to be set for the Jetton Master contract\nNEW_ADMIN_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStandard.build_change_admin_body(\n        new_admin_address=Address(NEW_ADMIN_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully changed the admin of the Jetton Master!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#change-content_1","title":"Change Content","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# New URI for the Jetton offchain content\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nNEW_URI = \"https://example.com/new-jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStandard.build_change_content_body(\n        new_content=JettonOffchainContent(NEW_URI),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully updated Jetton content!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#swap-jettons","title":"Swap Jettons","text":""},{"location":"guide/examples/jetton-operations/#using-stonfi","title":"Using STON.fi","text":""},{"location":"guide/examples/jetton-operations/#swap-ton-jetton","title":"Swap TON \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.stonfi import StonfiRouterV2, StonfiRouterV1\nfrom tonutils.jetton.dex.stonfi.utils import get_stonfi_router_details\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master for swapping (TON &gt; USD\u20ae)\nTO_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap (in base units, considering decimals)\nTON_AMOUNT = 1\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    version, router_address, pton_address = await get_stonfi_router_details(\n        offer_address=\"ton\",\n        ask_address=TO_JETTON_MASTER_ADDRESS,\n        amount=TON_AMOUNT,\n        decimals=9,\n        is_testnet=client.is_testnet,\n    )\n\n    if version == 1:\n        router_v1 = StonfiRouterV1(client, router_address, pton_address)\n\n        to, value, body = await router_v1.get_swap_ton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(TON_AMOUNT),\n            min_ask_amount=to_nano(MIN_AMOUNT, JETTON_DECIMALS),\n        )\n    else:\n        router_v2 = StonfiRouterV2(client, router_address, pton_address)\n\n        to, value, body = await router_v2.get_swap_ton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            receiver_address=wallet.address,\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(TON_AMOUNT),\n            min_ask_amount=to_nano(MIN_AMOUNT, JETTON_DECIMALS),\n            refund_address=wallet.address,\n        )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#swap-jetton-ton","title":"Swap Jetton \u2192 TON","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.stonfi import StonfiRouterV2, StonfiRouterV1\nfrom tonutils.jetton.dex.stonfi.utils import get_stonfi_router_details\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Minimum amount of TON to receive\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    version, router_address, pton_address = await get_stonfi_router_details(\n        offer_address=FROM_JETTON_MASTER_ADDRESS,\n        ask_address=\"ton\",\n        amount=JETTON_AMOUNT,\n        decimals=JETTON_DECIMALS,\n        is_testnet=client.is_testnet,\n    )\n\n    if version == 1:\n        router_v1 = StonfiRouterV1(client, router_address, pton_address)\n\n        to, value, body = await router_v1.get_swap_jetton_to_ton_tx_params(\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            user_wallet_address=wallet.address,\n            offer_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT),\n        )\n    else:\n        router_v2 = StonfiRouterV2(client, router_address, pton_address)\n\n        to, value, body = await router_v2.get_swap_jetton_to_ton_tx_params(\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            receiver_address=wallet.address,\n            user_wallet_address=wallet.address,\n            offer_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT),\n            refund_address=wallet.address,\n        )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#swap-jetton-jetton","title":"Swap Jetton \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.stonfi import StonfiRouterV2, StonfiRouterV1\nfrom tonutils.jetton.dex.stonfi.utils import get_stonfi_router_details\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\nTO_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 6\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    version, router_address, pton_address = await get_stonfi_router_details(\n        offer_address=FROM_JETTON_MASTER_ADDRESS,\n        ask_address=TO_JETTON_MASTER_ADDRESS,\n        amount=JETTON_AMOUNT,\n        decimals=FROM_JETTON_DECIMALS,\n        is_testnet=client.is_testnet,\n    )\n\n    if version == 1:\n        router_v1 = StonfiRouterV1(client, router_address, pton_address)\n        to, value, body = await router_v1.get_swap_jetton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(JETTON_AMOUNT, FROM_JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT, TO_JETTON_DECIMALS),\n        )\n    else:\n        router_v2 = StonfiRouterV2(client, router_address, pton_address)\n        to, value, body = await router_v2.get_swap_jetton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            receiver_address=wallet.address,\n            refund_address=wallet.address,\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(JETTON_AMOUNT, FROM_JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT, TO_JETTON_DECIMALS),\n        )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#using-dedustio","title":"Using DeDust.io","text":""},{"location":"guide/examples/jetton-operations/#swap-ton-jetton_1","title":"Swap TON \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.dedust import Factory\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap\nTON_AMOUNT = 1\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    to, value, body = await Factory(client).get_swap_ton_to_jetton_tx_params(\n        recipient_address=wallet.address,\n        offer_jetton_address=Address(JETTON_MASTER_ADDRESS),\n        offer_amount=to_nano(TON_AMOUNT),\n        min_ask_amount=to_nano(MIN_AMOUNT, JETTON_DECIMALS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#swap-jetton-ton_1","title":"Swap Jetton \u2192 TON","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.dedust import Factory\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Minimum amount of TON to receive\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    to, value, body = await Factory(client).get_swap_jetton_to_ton_tx_params(\n        recipient_address=wallet.address,\n        offer_jetton_address=Address(JETTON_MASTER_ADDRESS),\n        offer_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n        min_ask_amount=to_nano(MIN_AMOUNT),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/jetton-operations/#swap-jetton-jetton_1","title":"Swap Jetton \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.dedust import Factory\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\nTO_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 6\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    to, value, body = await Factory(client).get_swap_jetton_to_jetton_tx_params(\n        recipient_address=wallet.address,\n        offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n        ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n        offer_amount=to_nano(JETTON_AMOUNT, FROM_JETTON_DECIMALS),\n        min_ask_amount=to_nano(MIN_AMOUNT, TO_JETTON_DECIMALS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/","title":"Working with NFTs","text":"<p>This section provides a complete guide to working with NFT collections using the <code>tonutils</code> library. It covers Standard, Soulbound, Editable, and Editable Onchain collections, including deployment, minting, batch operations, editing, and administrative tasks.</p>"},{"location":"guide/examples/nft-operations/#standard-collection","title":"Standard Collection","text":""},{"location":"guide/examples/nft-operations/#deploy-collection","title":"Deploy Collection","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionStandard\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT collection\nOWNER_ADDRESS = \"UQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionStandard(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    \"\"\" If you want the option to withdraw extra balance in the future and store collection and NFT data on-chain,\n        you can use `CollectionStandardModified`. It removes the need for `prefix_uri` because NFTs minted in this\n        format include a direct link to the metadata for each item, rather than using a shared prefix for all items.\n\n    Example:\n\n    collection = CollectionStandardModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/collection.json`.\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#mint-nft","title":"Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.nft.contract.standard.collection import CollectionStandard\nfrom tonutils.nft.contract.standard.nft import NFTStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"{NFT_INDEX}.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTStandard(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionStandard.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionStandard` and `NFTStandard` with their modified versions,\n        and use `NFTModifiedOffchainContent` to specify the full `URI` for the NFT metadata.\n\n    Example:\n\n    nft = NFTStandardModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionStandardModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/0.json`.\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#batch-mint-nft","title":"Batch Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionStandard\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Starting index for minting items\nFROM_INDEX = 0\n\n# Number of items to mint\nITEMS_COUNT = 100\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionStandard.build_batch_mint_body(\n        data=[\n            (\n                NFTOffchainContent(suffix_uri=f\"{index}.json\"),\n                Address(OWNER_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionStandard` with `CollectionStandardModified`, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for each NFT metadata.\n\n    Example:\n\n    body = CollectionStandardModified.build_batch_mint_body(\n        data=[\n            (\n                NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/{index}.json`.\n                Address(OWNER_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=ITEMS_COUNT * 0.05,\n        body=body,\n    )\n\n    print(f\"Successfully minted {ITEMS_COUNT} items in the collection at address: {COLLECTION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#soulbound-collection","title":"Soulbound Collection","text":""},{"location":"guide/examples/nft-operations/#deploy-collection_1","title":"Deploy Collection","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionSoulbound\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionSoulbound(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    \"\"\" If you want the option to withdraw extra balance in the future and store collection and NFT data on-chain,\n        you can use `CollectionSoulboundModified`. It removes the need for `prefix_uri` because NFTs minted in this\n        format include a direct link to the metadata for each item, rather than using a shared prefix for all items.\n\n    Example:\n\n    collection = CollectionSoulboundModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/collection.json`.\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#mint-nft_1","title":"Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionSoulbound, NFTSoulbound\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"{NFT_INDEX}.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTSoulbound(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionSoulbound.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionSoulbound` and `NFTSoulbound` with their modified versions, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for the NFT metadata.\n\n    Example:\n\n    nft = NFTSoulboundModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionSoulboundModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/0.json`.\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#batch-mint-nft_1","title":"Batch Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionSoulbound\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner and editor of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nEDITOR_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Starting index for minting items\nFROM_INDEX = 0\n\n# Number of items to mint\nITEMS_COUNT = 100\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionSoulbound.build_batch_mint_body(\n        data=[\n            (\n                NFTOffchainContent(suffix_uri=f\"{index}.json\"),\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n                None,  # revoked at\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionSoulbound` with `CollectionSoulboundModified`, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for each NFT metadata.\n\n    Example:\n\n    body = CollectionSoulboundModified.build_batch_mint_body(\n        data=[\n            (\n                NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/{index}.json`.\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n                None,  # revoked at\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=ITEMS_COUNT * 0.05,\n        body=body,\n    )\n\n    print(f\"Minted {ITEMS_COUNT} items in collection {COLLECTION_ADDRESS}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#revoke-nft","title":"Revoke NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTSoulbound\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be revoked\nNFT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    # Initialize TonapiClient and Wallet\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTSoulbound.build_revoke_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully revoked NFT at address: {NFT_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#destroy-nft","title":"Destroy NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTSoulbound\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be destroyed\nNFT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTSoulbound.build_destroy_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully destroyed NFT at address: {NFT_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#editable-collection","title":"Editable Collection","text":""},{"location":"guide/examples/nft-operations/#deploy-collection_2","title":"Deploy Collection","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT collection\nOWNER_ADDRESS = \"UQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionEditable(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    \"\"\" If you want the option to withdraw extra balance in the future and store collection and NFT data on-chain,\n        you can use `CollectionEditableModified`. It removes the need for `prefix_uri` because NFTs minted in this\n        format include a direct link to the metadata for each item, rather than using a shared prefix for all items.\n\n    Example:\n\n    collection = CollectionEditableModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/collection.json`.\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#mint-nft_2","title":"Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable, NFTEditable\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"{NFT_INDEX}.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTEditable(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionEditable.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionEditable` and `NFTEditable` with their modified versions,\n        and use `NFTModifiedOffchainContent` to specify the full `URI` for the NFT metadata.\n\n    Example:\n\n    nft = NFTEditableModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionEditableModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/0.json`.\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#batch-mint-nft_2","title":"Batch Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner and editor of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nEDITOR_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Starting index for minting items\nFROM_INDEX = 0\n\n# Number of items to mint\nITEMS_COUNT = 100\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditable.build_batch_mint_body(\n        data=[\n            (\n                NFTOffchainContent(suffix_uri=f\"{index}.json\"),\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionEditable` with `CollectionEditableModified`, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for each NFT metadata.\n\n    Example:\n\n    body = CollectionEditableModified.build_batch_mint_body(\n        data=[\n            (\n                NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/{index}.json`.\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=ITEMS_COUNT * 0.05,\n        body=body,\n    )\n\n    print(f\"Minted {ITEMS_COUNT} items in collection {COLLECTION_ADDRESS}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#edit-nft-content","title":"Edit NFT Content","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTEditable\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be edited\nNFT_ADDRESS = \"EQ...\"\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"new-content.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTEditable.build_edit_content_body(\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully edited the content of NFT at address: {NFT_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#change-nft-editorship","title":"Change NFT Editorship","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTEditable\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT whose editorship will be changed\nNFT_ADDRESS = \"EQ...\"\n\n# Address of the new editor to whom the editorship will be transferred\nNEW_EDITOR_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTEditable.build_change_editorship_body(\n        editor_address=Address(NEW_EDITOR_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully changed the editorship of NFT {NFT_ADDRESS} to {NEW_EDITOR_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#edit-collection-content","title":"Edit Collection Content","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the royalty receiver and the NFT collection contract\nROYALTY_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 60  # 6% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditable.build_edit_content_body(\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(ROYALTY_ADDRESS),\n        ),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully edited the collection at address: {COLLECTION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#change-collection-owner","title":"Change Collection Owner","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the new owner to whom the collection ownership will be transferred\nNEW_OWNER_ADDRESS = \"UQ...\"\n\n# Address of the NFT collection whose ownership will be changed\nCOLLECTION_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditable.build_change_owner_body(\n        owner_address=Address(NEW_OWNER_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully changed the owner of collection {COLLECTION_ADDRESS} to {NEW_OWNER_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#editable-onchain-collection","title":"Editable Onchain Collection","text":""},{"location":"guide/examples/nft-operations/#deploy-collection_3","title":"Deploy Collection","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditableModified\nfrom tonutils.nft.content import CollectionModifiedOnchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT collection\nOWNER_ADDRESS = \"UQ...\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionEditableModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOnchainContent(\n            name=\"Welcome to TON\",\n            description=\"Each digital artwork represents a memorable token\",\n            image_data=b'image data',\n        ),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#mint-nft_3","title":"Mint NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditableModified, NFTEditableModified\nfrom tonutils.nft.content import NFTModifiedOnchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTEditableModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionEditableModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOnchainContent(\n            name=\"TON Collectible #0\",\n            description=\"Memorable token for completing an onboarding quest about the TON ecosystem\",\n            image_data=b'image data',\n        ),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#return-collection-balance","title":"Return Collection Balance","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditableModified\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT collection contract\nCOLLECTION_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditableModified.build_return_balance()\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully returned the balance of collection {COLLECTION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#listing-on-getgemsio","title":"Listing on Getgems.io","text":""},{"location":"guide/examples/nft-operations/#list-nft-for-sale","title":"List NFT for Sale","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection, NFT\nfrom tonutils.nft.marketplace.getgems.addresses import *\nfrom tonutils.nft.marketplace.getgems.contract.salev3r3 import SaleV3R3\nfrom tonutils.utils import to_nano\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be listed for sale\nNFT_ADDRESS = \"EQ..\"\n\n# Sale price for the NFT in TON\nPRICE = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft_data = await NFT.get_nft_data(client, NFT_ADDRESS)\n    royalty_params = await Collection.get_royalty_params(client, nft_data.collection_address)\n\n    price = to_nano(PRICE)\n    royalty_fee = int(price * (royalty_params.base / royalty_params.factor))\n    marketplace_fee = int(price * 0.05)\n\n    sale = SaleV3R3(\n        nft_address=NFT_ADDRESS,\n        owner_address=wallet.address,\n        marketplace_address=TESTNET_GETGEMS_ADDRESS if IS_TESTNET else GETGEMS_ADDRESS,\n        marketplace_fee_address=TESTNET_GETGEMS_FEE_ADDRESS if IS_TESTNET else GETGEMS_FEE_ADDRESS,\n        royalty_address=royalty_params.address,\n        marketplace_fee=marketplace_fee,\n        royalty_fee=royalty_fee,\n        price=price,\n    )\n    body = sale.build_transfer_nft_body(\n        destination=Address(TESTNET_GETGEMS_DEPLOYER_ADDRESS if IS_TESTNET else GETGEMS_DEPLOYER_ADDRESS),\n        owner_address=wallet.address,\n        state_init=sale.state_init,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.25,\n        body=body,\n    )\n\n    # Print the result of the operation\n    print(f\"NFT {NFT_ADDRESS} successfully put on sale at price {PRICE} TON.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#change-nft-price","title":"Change NFT Price","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection, NFT\nfrom tonutils.nft.marketplace.getgems.contract.salev3r3 import SaleV3R3\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT and sale contract\nNFT_ADDRESS = \"EQ...\"\nSALE_ADDRESS = \"EQ...\"\n\n# New sale price for the NFT in TON\nPRICE = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft_data = await NFT.get_nft_data(client, NFT_ADDRESS)\n    royalty_params = await Collection.get_royalty_params(client, nft_data.collection_address)\n\n    price = int(PRICE * 1e9)\n    royalty_fee = int(price * (royalty_params.base / royalty_params.factor))\n    marketplace_fee = int(price * 0.05)\n\n    body = SaleV3R3.build_change_price_body(\n        marketplace_fee=marketplace_fee,\n        royalty_fee=royalty_fee,\n        price=price,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=SALE_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n\n    print(f\"Successfully updated the price for NFT sale.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/nft-operations/#cancel-nft-sale","title":"Cancel NFT Sale","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft.marketplace.getgems.contract.salev3r3 import SaleV3R3\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the sale contract\nSALE_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SaleV3R3.build_cancel_sale_body()\n\n    tx_hash = await wallet.transfer(\n        destination=SALE_ADDRESS,\n        amount=0.2,\n        body=body,\n    )\n\n    print(\"Sale has been successfully canceled.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/ton-connect-operations/","title":"Using TON Connect","text":"<p>This section provides a complete guide to working with TON Connect using the <code>tonutils</code> library. It covers wallet connection, transaction sending, and signing data, including initialization, request handling, and response verification.</p> <p>Note</p> <p>Before using these examples, we recommend reviewing the detailed guide in Cookbook: TON Connect Integration.</p>"},{"location":"guide/examples/ton-connect-operations/#storage-implementation","title":"Storage Implementation","text":"<pre><code>import json\nimport os\nfrom asyncio import Lock\nfrom typing import Dict, Optional\n\nimport aiofiles\n\nfrom tonutils.tonconnect import IStorage\n\n\nclass FileStorage(IStorage):\n    \"\"\"\n    File-based asynchronous implementation of TonConnect IStorage interface.\n\n    Stores key-value pairs in a local JSON file using asyncio-compatible file I/O.\n\n    :param file_path: Path to the JSON file used for persistent storage.\n    \"\"\"\n\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n        self.lock = Lock()\n\n        if not os.path.exists(self.file_path):\n            with open(self.file_path, \"w\") as f:\n                json.dump({}, f)\n\n    async def _read_data(self) -&gt; Dict[str, str]:\n        \"\"\"\n        Read the current contents of the JSON storage file.\n\n        :return: Dictionary containing all stored key-value pairs.\n        \"\"\"\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"r\") as f:\n                content = await f.read()\n                return json.loads(content) if content else {}\n\n    async def _write_data(self, data: Dict[str, str]) -&gt; None:\n        \"\"\"\n        Write a new dictionary to the JSON storage file.\n\n        :param data: Key-value pairs to persist.\n        \"\"\"\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"w\") as f:\n                await f.write(json.dumps(data, indent=4))\n\n    async def set_item(self, key: str, value: str) -&gt; None:\n        \"\"\"\n        Set a key-value pair in storage.\n\n        :param key: Key to set.\n        :param value: Value to associate with the key.\n        \"\"\"\n        data = await self._read_data()\n        data[key] = value\n        await self._write_data(data)\n\n    async def get_item(self, key: str, default_value: Optional[str] = None) -&gt; Optional[str]:\n        \"\"\"\n        Retrieve the value associated with a key.\n\n        :param key: Key to retrieve.\n        :param default_value: Value to return if the key is not found.\n        :return: Stored value or default if not found.\n        \"\"\"\n        data = await self._read_data()\n        return data.get(key, default_value)\n\n    async def remove_item(self, key: str) -&gt; None:\n        \"\"\"\n        Remove a key-value pair from storage.\n\n        :param key: Key to remove.\n        \"\"\"\n        data = await self._read_data()\n        if key in data:\n            del data[key]\n            await self._write_data(data)\n</code></pre>"},{"location":"guide/examples/ton-connect-operations/#connect-wallet","title":"Connect Wallet","text":"<pre><code>from storage import FileStorage\n\nfrom tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import *\nfrom tonutils.tonconnect.utils import generate_proof_payload\nfrom tonutils.tonconnect.utils.exceptions import *\n\n# Public URL to the application manifest.\n# The manifest defines app metadata (name, icon, URL, permissions).\n# Reference: https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#app-manifest\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\n\n# Storage backend for persisting wallet connection data.\n# File-based implementation using aiofiles.\nTC_STORAGE = FileStorage(\"connection.json\")\n\n# Initialize TonConnect with storage, manifest, and fallback wallet list.\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n\n\n@tc.on_event(Event.CONNECT)\nasync def on_wallet_connect(user_id: int, wallet: WalletInfo) -&gt; None:\n    \"\"\"\n    Handle successful wallet connection.\n\n    :param user_id: Identifier of the connected user.\n    :param wallet: Connected wallet information.\n\n    WalletInfo contains:\n        - wallet.account: Address, chain ID, state init, and optional public key.\n        - wallet.ton_proof: Domain, payload, signature, and timestamp.\n        - wallet.device: Device information such as platform and app version.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.CONNECT, comment=\"example\")\n    \"\"\"\n    wallet_address = wallet.account.address.to_str(is_bounceable=False)\n    print(f\"[Event CONNECT] Wallet {wallet_address} connected to user {user_id}.\")\n\n\n@tc.on_event(EventError.CONNECT)\nasync def on_wallet_connect_error(user_id: int, error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during wallet connection.\n\n    :param user_id: Identifier of the user attempting connection.\n    :param error: Raised error during the connection attempt.\n\n    Recognized error types:\n        - UserRejectsError: The user rejected the connection.\n        - RequestTimeoutError: Wallet did not respond within timeout.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, UserRejectsError):\n        print(f\"[EventError CONNECT] User {user_id} rejected the wallet connection.\")\n    elif isinstance(error, RequestTimeoutError):\n        print(f\"[EventError CONNECT] Connection request timed out for user {user_id}.\")\n    else:\n        print(f\"[EventError CONNECT] Connection error for user {user_id}: {error.message}\")\n\n\n@tc.on_event(Event.DISCONNECT)\nasync def on_wallet_disconnect(user_id: int, wallet: WalletInfo) -&gt; None:\n    \"\"\"\n    Handle successful wallet disconnection.\n\n    :param user_id: Identifier of the user whose wallet was disconnected.\n    :param wallet: Disconnected wallet information.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.DISCONNECT, comment=\"example\")\n    \"\"\"\n    wallet_address = wallet.account.address.to_str(is_bounceable=False)\n    print(f\"[Event DISCONNECT] Wallet {wallet_address} disconnected from user {user_id}.\")\n\n\n@tc.on_event(EventError.DISCONNECT)\nasync def on_wallet_disconnect_error(user_id: int, error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during wallet disconnection.\n\n    :param user_id: Identifier of the user whose wallet failed to disconnect.\n    :param error: Raised error during the disconnect attempt.\n\n    Recognized error types:\n        - RequestTimeoutError: Wallet did not respond to the disconnect request.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, RequestTimeoutError):\n        print(f\"[EventError DISCONNECT] Disconnect request timed out for user {user_id}.\")\n    else:\n        print(f\"[EventError DISCONNECT] Disconnect error for user {user_id}: {error.message}\")\n\n\nasync def main() -&gt; None:\n    user_id = 12345  # Example user identifier\n\n    # Initialize the connector for the user\n    connector = await tc.init_connector(user_id)\n\n    # Generate a TON Connect proof payload for authentication\n    ton_proof = generate_proof_payload()\n\n    # Check wallet connection\n    if not connector.connected:\n        print(\"Wallet not connected! Please connect the wallet to continue.\")\n\n        # Get all available wallets\n        wallets = await tc.get_wallets()\n\n        # As an example, we will select the wallet with index 1 (Tonkeeper)\n        selected_wallet = wallets[1]\n        connect_url = await connector.connect_wallet(selected_wallet, ton_proof=ton_proof)\n\n        print(f\"Please connect your wallet by visiting the following URL:\\n{connect_url}\")\n        print(\"Waiting for wallet connection...\")\n\n        # Add additional parameters to be passed to event handlers\n        connector.add_event_kwargs(event=Event.TRANSACTION, comment=\"Hello from tonutils!\")\n\n        # In addition to the handler, you can use a context manager to get the connection result\n        async with connector.connect_wallet_context() as response:\n            if isinstance(response, TonConnectError):\n                print(f\"Connection error: {response.message}\")\n            else:\n                if connector.wallet.verify_proof_payload(ton_proof):\n                    wallet_address = response.account.address.to_str(is_bounceable=False)\n                    print(f\"Connected wallet: {wallet_address}\")\n                else:\n                    await connector.disconnect_wallet()\n                    print(\"Proof verification failed.\")\n    else:\n        wallet_address = connector.account.address.to_str(is_bounceable=False)\n        print(f\"Wallet already connected: {wallet_address}\")\n\n        user_input = input(\"Do you want to disconnect the wallet? (y/n): \").strip().lower()\n        if user_input == \"y\":\n            await connector.disconnect_wallet()\n            print(\"Wallet successfully disconnected.\")\n        else:\n            print(\"Wallet remains connected.\")\n\n    await tc.close_all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    try:\n        asyncio.run(main())\n    except (KeyboardInterrupt, SystemExit):\n        asyncio.run(tc.close_all())\n</code></pre>"},{"location":"guide/examples/ton-connect-operations/#send-transaction","title":"Send Transaction","text":"<pre><code>from storage import FileStorage\n\nfrom tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import *\nfrom tonutils.tonconnect.utils.exceptions import *\nfrom tonutils.wallet.messages import TransferMessage\n\n# Public URL to the application manifest.\n# The manifest defines app metadata (name, icon, URL, permissions).\n# Reference: https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#app-manifest\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\n\n# Storage backend for persisting wallet connection data.\n# File-based implementation using aiofiles.\nTC_STORAGE = FileStorage(\"connection.json\")\n\n# Initialize TonConnect with storage, manifest, and fallback wallet list.\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n\n\n@tc.on_event(Event.TRANSACTION)\nasync def on_transaction(transaction: SendTransactionResponse) -&gt; None:\n    \"\"\"\n    Handle successful transaction event.\n\n    :param transaction: Transaction response containing BoC, hash, and message cell.\n\n    Transaction details:\n        - transaction.boc (str): Raw BoC of the outgoing message.\n        - transaction.normalized_hash (str): Hash of the message for tracking.\n        - transaction.cell (Cell): Parsed message cell.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.TRANSACTION, comment=\"example\")\n    \"\"\"\n    print(f\"[Event TRANSACTION] Transaction sent successfully. Message hash: {transaction.normalized_hash}\")\n\n\n@tc.on_event(EventError.TRANSACTION)\nasync def on_transaction_error(error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during transaction sending.\n\n    :param error: Error raised when the transaction could not be processed.\n\n    Recognized error types:\n        - UserRejectsError: The user rejected the transaction.\n        - RequestTimeoutError: The wallet did not respond in time.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, UserRejectsError):\n        print(\"[EventError TRANSACTION] User rejected the transaction.\")\n    elif isinstance(error, RequestTimeoutError):\n        print(\"[EventError TRANSACTION] Transaction request timed out.\")\n    else:\n        print(f\"[EventError TRANSACTION] Failed to send transaction: {error.message}\")\n\n\nasync def main() -&gt; None:\n    user_id = 12345  # Example user identifier\n\n    # Initialize the connector for the user\n    connector = await tc.init_connector(user_id)\n\n    # Start the event processing loop\n    while True:\n        # Check wallet connection\n        if not connector.connected:\n            print(\"Wallet not connected! Please connect the wallet to continue.\")\n\n            # Get all available wallets\n            wallets = await tc.get_wallets()\n\n            # As an example, we will select the wallet with index 1 (Tonkeeper)\n            selected_wallet = wallets[1]\n            connect_url = await connector.connect_wallet(selected_wallet)\n\n            print(f\"Please connect your wallet by visiting the following URL:\\n{connect_url}\")\n            print(\"Waiting for wallet connection...\")\n\n            async with connector.connect_wallet_context() as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Connection error: {response.message}\")\n                    continue\n                wallet_address = response.account.address.to_str(is_bounceable=False)\n                print(f\"Connected wallet: {wallet_address}\")\n\n        # If the wallet is connected, prompt the user to choose an action\n        call = input(\n            \"\\nChoose an action:\\n\"\n            \"1. Send a transaction\\n\"\n            \"2. Send a batch of transactions\\n\"\n            \"3. Disconnect wallet\\n\"\n            \"q. Quit\\n\"\n            \"\\nEnter your choice: \"\n        ).strip()\n\n        if call in [\"1\", \"2\"]:\n            if call == \"1\":\n                print(\"Preparing to send one transaction...\")\n                rpc_request_id = await connector.send_transfer(\n                    destination=connector.account.address,\n                    amount=0.000000001,\n                    body=\"Hello from tonutils!\",\n                )\n                print(\"Request to send one transaction has been sent.\")\n            else:\n                print(\"Preparing to send a batch of transactions...\")\n                # Get the maximum number of messages supported in a transaction\n                max_messages = connector.device.get_max_supported_messages(connector.wallet)\n                print(f\"Maximum number of messages: {max_messages}. Sending {max_messages} transactions...\")\n\n                rpc_request_id = await connector.send_batch_transfer(\n                    messages=[\n                        TransferMessage(\n                            destination=connector.account.address,\n                            amount=0.000000001,\n                            body=\"Hello from tonutils!\",\n                        ) for _ in range(max_messages)  # Create the maximum number of messages\n                    ]\n                )\n                print(\"Request to send a batch of transactions has been sent.\")\n\n            # Add additional parameters to be passed to event handlers\n            connector.add_event_kwargs(event=Event.TRANSACTION, comment=\"Hello from tonutils!\")\n\n            # Get the transaction status (whether it has been confirmed by the user in the wallet)\n            # Note: This is different from blockchain confirmation\n            is_pending = connector.is_request_pending(rpc_request_id)\n            print(f\"Transaction is pending confirmation: {is_pending}\")\n\n            # In addition to the handler, you can use a context manager to get the transaction result by rpc_request_id\n            async with connector.pending_request_context(rpc_request_id) as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Error sending transaction: {response.message}\")\n                else:\n                    print(f\"Transaction successful! Hash: {response.normalized_hash}\")\n\n        elif call == \"3\":\n            await connector.disconnect_wallet()\n            print(\"Wallet successfully disconnected.\")\n            continue\n\n        elif call.lower() == \"q\":\n            print(\"Exiting the program...\")\n            break\n\n        else:\n            print(\"Invalid choice! Please select a valid option.\")\n\n    await tc.close_all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    try:\n        asyncio.run(main())\n    except (KeyboardInterrupt, SystemExit):\n        asyncio.run(tc.close_all())\n</code></pre>"},{"location":"guide/examples/ton-connect-operations/#sign-data","title":"Sign Data","text":"<pre><code>from pytoniq_core import begin_cell\nfrom storage import FileStorage\n\nfrom tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import *\nfrom tonutils.tonconnect.utils.exceptions import *\n\n# Public URL to the application manifest.\n# The manifest defines app metadata (name, icon, URL, permissions).\n# Reference: https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#app-manifest\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\n\n# Storage backend for persisting wallet connection data.\n# File-based implementation using aiofiles.\nTC_STORAGE = FileStorage(\"connection.json\")\n\n# Initialize TonConnect with storage, manifest, and fallback wallet list.\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n\n\n@tc.on_event(Event.SIGN_DATA)\nasync def on_sign_data(sign_data: SignDataResponse) -&gt; None:\n    \"\"\"\n    Handle successful sign data event.\n\n    :param sign_data: Response containing signed data result.\n\n    SignDataResponse details:\n        - sign_data.result (str): Base64-encoded signed payload.\n        - sign_data.original (dict): Original payload that was signed.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.SIGN_DATA, comment=\"example\")\n    \"\"\"\n    print(f\"[Event SIGN_DATA] Data to sign: {sign_data.result}\")\n\n\n@tc.on_event(EventError.SIGN_DATA)\nasync def on_sign_data_error(error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during sign data request.\n\n    :param error: Error raised when sign data could not be processed.\n\n    Recognized error types:\n        - UserRejectsError: The user rejected the sign data request.\n        - RequestTimeoutError: The wallet did not respond in time.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, UserRejectsError):\n        print(\"[EventError SIGN_DATA] User rejected the sign data request.\")\n    elif isinstance(error, RequestTimeoutError):\n        print(\"[EventError SIGN_DATA] Sign data request timed out.\")\n    else:\n        print(f\"[EventError SIGN_DATA] Failed to send sign data: {error.message}\")\n\n\nasync def main() -&gt; None:\n    user_id = 12345  # Example user identifier\n\n    # Initialize the connector for the user\n    connector = await tc.init_connector(user_id)\n\n    # Start the event processing loop\n    while True:\n        # Check wallet connection\n        if not connector.connected:\n            print(\"Wallet not connected. Please connect a wallet to continue.\")\n\n            # Get all available wallets\n            wallets = await tc.get_wallets()\n\n            # As an example, we will select the wallet with index 1 (Tonkeeper)\n            selected_wallet = wallets[1]\n            connect_url = await connector.connect_wallet(selected_wallet)\n\n            print(f\"Please connect your wallet by visiting the following URL:\\n{connect_url}\")\n            print(\"Waiting for wallet connection...\")\n\n            async with connector.connect_wallet_context() as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Connection error: {response.message}\")\n                    continue\n                wallet_address = response.account.address.to_str(is_bounceable=False)\n                print(f\"Connected wallet: {wallet_address}\")\n\n        call = input(\n            \"\\nChoose an action:\\n\"\n            \"1. Sign Text Data\\n\"\n            \"2. Sign Binary Data\\n\"\n            \"3. Sign Cell Data\\n\"\n            \"d. Disconnect Wallet\\n\"\n            \"q. Quit\\n\"\n            \"\\nEnter your choice: \"\n        ).strip().lower()\n\n        if call == \"q\":\n            print(\"Exiting the program...\")\n            break\n\n        elif call == \"d\":\n            await connector.disconnect_wallet()\n            print(\"Wallet successfully disconnected.\")\n            continue\n\n        elif call in {\"1\", \"2\", \"3\"}:\n            data = \"Hello from tonutils!\"\n\n            if call == \"1\":\n                payload = SignDataPayloadText(text=data)\n            elif call == \"2\":\n                payload = SignDataPayloadBinary(bytes=data.encode(\"utf-8\"))\n            else:\n                payload = SignDataPayloadCell(\n                    cell=begin_cell().store_uint(0, 32).store_snake_string(data).end_cell(),\n                    schema=\"text_comment#00000000 text:Snakedata = InMsgBody;\"\n                )\n\n            try:\n                connector.device.verify_sign_data_feature(connector.wallet, payload)\n            except WalletNotSupportFeatureError:\n                print(\"Wallet does not support sign data feature.\")\n                continue\n\n            rpc_request_id = await connector.sign_data(payload)\n\n            # Add additional parameters to be passed to event handlers\n            connector.add_event_kwargs(event=Event.SIGN_DATA, comment=\"Hello from tonutils!\")\n\n            # Get the transaction status (whether it has been confirmed by the user in the wallet)\n            # Note: This is different from blockchain confirmation\n            is_pending = connector.is_request_pending(rpc_request_id)\n            print(f\"Sign data is pending confirmation: {is_pending}\")\n\n            # In addition to the handler, you can use a context manager to get the sign data result by rpc_request_id\n            async with connector.pending_request_context(rpc_request_id) as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Error sending sign data: {response.message}\")\n                else:\n                    key = connector.wallet.account.public_key\n                    if response.verify_sign_data(key):\n                        print(\"Verified sign data.\")\n                    else:\n                        print(\"Failed to verify sign data.\")\n        else:\n            print(\"Invalid choice. Please select a valid option.\")\n\n    await tc.close_all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    try:\n        asyncio.run(main())\n    except (KeyboardInterrupt, SystemExit):\n        asyncio.run(tc.close_all())\n</code></pre>"},{"location":"guide/examples/wallet-operations/","title":"Wallet Operations","text":"<p>This section provides a complete guide to managing wallets using the <code>tonutils</code> library. It covers key operations such as:</p> <ul> <li>Creating and deploying wallets</li> <li>Importing wallets from mnemonic or private key</li> <li>Sending transactions (TON, NFTs, Jettons)</li> <li>Performing batch transfers</li> <li>Executing Jetton swaps (via STON.fi and DeDust.io)</li> </ul>"},{"location":"guide/examples/wallet-operations/#supported-wallet","title":"Supported Wallet","text":"<p>The library supports multiple wallet versions and types:</p> <ul> <li>Standard wallets:   <code>WalletV2R1</code>, <code>WalletV2R2</code>, <code>WalletV3R1</code>, <code>WalletV3R2</code>, <code>WalletV4R1</code>, <code>WalletV4R2</code>, <code>WalletV5R1</code></li> <li>Highload wallets (for services and exchanges):   <code>HighloadWalletV2</code>, <code>HighloadWalletV3</code></li> <li>Preprocessed wallets (for economical batch operations):   <code>PreprocessedWalletV2</code>, <code>PreprocessedWalletV2R1</code></li> </ul>"},{"location":"guide/examples/wallet-operations/#recommendations","title":"Recommendations","text":"<ul> <li>For general use, it\u2019s recommended to work with wallet versions v3r2 to v5r1, preferably v5r1 for full feature support.</li> <li>For service and exchange integrations, use HighloadWalletV3.</li> <li>For large-scale batch transfers where gas optimization is critical, use PreprocessedWallet types.</li> </ul>"},{"location":"guide/examples/wallet-operations/#create-wallet","title":"Create Wallet","text":"<p>To create a new wallet, use the <code>.create()</code> method provided by the wallet class you select. This generates a wallet instance along with its public key, private key, and mnemonic phrase.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import (\n    # Uncomment the following lines to use different wallet versions:\n    # WalletV2R1,\n    # WalletV2R2,\n    # WalletV3R1,\n    # WalletV3R2,\n    # WalletV4R1,\n    WalletV4R2,\n    # WalletV5R1,\n    # HighloadWalletV2,\n    # HighloadWalletV3,\n    # PreprocessedWalletV2,\n    # PreprocessedWalletV2R1,\n)\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.create(client)\n\n    # Uncomment and use the following lines to create different wallet versions:\n    # wallet, public_key, private_key, mnemonic = WalletV3R2.create(client)\n    # wallet, public_key, private_key, mnemonic = WalletV4R1.create(client)\n    # wallet, public_key, private_key, mnemonic = WalletV4R2.create(client)\n    # wallet, public_key, private_key, mnemonic = WalletV5R1.create(client)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV2.create(client)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV3.create(client)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2.create(client)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2R1.create(client)\n\n    print(\"Wallet has been successfully created!\")\n    print(f\"Address: {wallet.address.to_str()}\")\n    print(f\"Mnemonic: {mnemonic}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"guide/examples/wallet-operations/#import-wallet","title":"Import Wallet","text":"<p>You can import a wallet either from a mnemonic phrase or directly from a private key.</p>"},{"location":"guide/examples/wallet-operations/#from-mnemonic","title":"From Mnemonic","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    print(f\"Wallet address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"guide/examples/wallet-operations/#from-private-key","title":"From Private Key","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Private key (32 or 64 bytes)\nPRIVATE_KEY: bytes = b\"your_private_key_bytes\"\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet = WalletV4R2.from_private_key(client, PRIVATE_KEY)\n\n    print(f\"Wallet address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"guide/examples/wallet-operations/#deploy-wallet","title":"Deploy Wallet","text":"<p>To deploy a wallet, reconstruct it from a mnemonic and call the <code>.deploy()</code> method. This will publish the wallet contract on-chain.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import (\n    # Uncomment the following lines to use different wallet versions:\n    # WalletV2R1,\n    # WalletV2R2,\n    # WalletV3R1,\n    # WalletV3R2,\n    # WalletV4R1,\n    WalletV4R2,\n    # WalletV5R1,\n    # HighloadWalletV2,\n    # HighloadWalletV3,\n    # PreprocessedWalletV2,\n    # PreprocessedWalletV2R1,\n)\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    # Uncomment and use the following lines to create different wallet versions from mnemonic:\n    # wallet, public_key, private_key, mnemonic = WalletV2R1.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV2R2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV3R2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV4R1.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV5R1.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV3.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2R1.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.deploy()\n\n    print(f\"Wallet deployed successfully!\")\n    print(f\"Wallet address: {wallet.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#transfers","title":"Transfers","text":""},{"location":"guide/examples/wallet-operations/#send-ton","title":"Send TON","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Optional comment to include in the forward payload\nCOMMENT = \"Hello from tonutils!\"\n\n# Amount to transfer in TON\nAMOUNT = 0.01\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer(\n        destination=DESTINATION_ADDRESS,\n        amount=AMOUNT,\n        body=COMMENT,\n    )\n\n    print(f\"Successfully transferred {AMOUNT} TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#send-nft","title":"Send NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferNFTMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be transferred and the new owner address\nNFT_ADDRESS = \"EQ...\"\nNEW_OWNER_ADDRESS = \"UQ...\"\n\n# Optional comment to include in the forward payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=TransferNFTMessage(\n            destination=NEW_OWNER_ADDRESS,\n            nft_address=NFT_ADDRESS,\n            forward_payload=COMMENT,\n        ),\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#send-jetton","title":"Send Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to transfer (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Comment to include in the transfer payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=TransferJettonMessage(\n            destination=DESTINATION_ADDRESS,\n            jetton_master_address=JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n            forward_payload=COMMENT,\n        ),\n    )\n\n    print(f\"Successfully transferred {JETTON_AMOUNT} jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-transfers","title":"Batch Transfers","text":""},{"location":"guide/examples/wallet-operations/#batch-send-ton","title":"Batch Send TON","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n        ]\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-send-nft","title":"Batch Send NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferNFTMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            )\n        ]\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-send-jetton","title":"Batch Send Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferJettonMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n        ]\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#jetton-swaps","title":"Jetton Swaps","text":""},{"location":"guide/examples/wallet-operations/#using-stonfi","title":"Using STON.fi","text":""},{"location":"guide/examples/wallet-operations/#swap-ton-jetton","title":"Swap TON \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapTONToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master for swapping (TON &gt; USD\u20ae)\nTO_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap (in TON)\nSWAP_TON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=StonfiSwapTONToJettonMessage(\n            jetton_master_address=TO_JETTON_MASTER_ADDRESS,\n            ton_amount=SWAP_TON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#swap-jetton-ton","title":"Swap Jetton \u2192 TON","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToTONMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master for swapping (TON &gt; USD\u20ae)\nTO_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=StonfiSwapJettonToTONMessage(\n            jetton_master_address=TO_JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#swap-jetton-jetton","title":"Swap Jetton \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\nTO_JETTON_MASTER_ADDRESS = \"EQAvlWFDxGF2lXm67y4yzC17wYKD9A0guwPkMs1gOsM__NOT\"  # noqa\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 6\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=StonfiSwapJettonToJettonMessage(\n            from_jetton_master_address=FROM_JETTON_MASTER_ADDRESS,\n            to_jetton_master_address=TO_JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            from_jetton_decimals=FROM_JETTON_DECIMALS,\n            to_jetton_decimals=TO_JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-swap-ton-jetton","title":"Batch Swap TON \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapTONToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ],\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-swap-jetton-ton","title":"Batch Swap Jetton \u2192 TON","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToTONMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ],\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-swap-jetton-jetton","title":"Batch Swap Jetton \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of STON.fi. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n        ],\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#using-dedustio","title":"Using DeDust.io","text":""},{"location":"guide/examples/wallet-operations/#swap-ton-jetton_1","title":"Swap TON \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapTONToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap (in TON)\nSWAP_TON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=DedustSwapTONToJettonMessage(\n            jetton_master_address=JETTON_MASTER_ADDRESS,\n            ton_amount=SWAP_TON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#swap-jetton-ton_1","title":"Swap Jetton \u2192 TON","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToTONMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=DedustSwapJettonToTONMessage(\n            jetton_master_address=JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#swap-jetton-jetton_1","title":"Swap Jetton \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"\nTO_JETTON_MASTER_B_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 9\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=DedustSwapJettonToJettonMessage(\n            from_jetton_master_address=FROM_JETTON_MASTER_ADDRESS,\n            to_jetton_master_address=TO_JETTON_MASTER_B_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            from_jetton_decimals=FROM_JETTON_DECIMALS,\n            to_jetton_decimals=TO_JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-swap-ton-jetton_1","title":"Batch Swap TON \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapTONToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ]\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-swap-jetton-ton_1","title":"Batch Swap Jetton \u2192 TON","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToTONMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ]\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"guide/examples/wallet-operations/#batch-swap-jetton-jetton_1","title":"Batch Swap Jetton \u2192 Jetton","text":"<p>Note</p> <p>Before using these instructions, please consult the official documentation of DeDust.io. Use with caution and always test carefully on a testnet first. I take no responsibility for any lost funds. If you find errors or have suggestions for improvement, feel free to open a pull request \u2014 let\u2019s make this better together.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n        ]\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/create-multiple-wallets/","title":"Create Multiple Wallets","text":"<p>This example shows how to generate multiple wallet addresses from a single mnemonic by changing the <code>subwallet_id</code>. Each <code>subwallet_id</code> produces a unique address under the same seed phrase.</p>"},{"location":"how-to/create-multiple-wallets/#example","title":"Example","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Subwallet ID\nWALLET_ID = 0\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC, WALLET_ID)\n\n    print(f\"Address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/create-multiple-wallets/#explanation","title":"Explanation","text":"<ul> <li><code>subwallet_id</code> \u2192 a 32-bit integer used to derive distinct wallet addresses from the same mnemonic.</li> <li> <p>Use cases:</p> <ul> <li>Splitting funds across logical accounts.</li> <li>Managing separate balances.</li> <li>Creating derived wallets for contract operations.</li> </ul> </li> </ul>"},{"location":"how-to/create-multiple-wallets/#important-notes","title":"Important Notes","text":"<ul> <li> <p><code>subwallet_id</code> (or <code>wallet_id</code>) is not supported in:</p> <ul> <li><code>WalletV2*</code></li> <li><code>PreprocessedWallet*</code></li> </ul> </li> <li> <p>Default <code>wallet_id</code> values:</p> <ul> <li>All wallet types except <code>WalletV5R1</code> \u2192 <code>698983191</code></li> <li> <p><code>WalletV5R1</code>:</p> global_id workchain wallet_version subwallet_number wallet_id -239 0 0 0 2147483409 -239 -1 0 0 8388369 -3 0 0 0 2147483645 -3 -1 0 0 8388605 </li> </ul> </li> </ul>"},{"location":"how-to/get-contract-code-and-data/","title":"Get Contract Code and Data","text":"<p>To retrieve the code and data of a contract, you can use TON explorers such as tonviewer.com, tonscan.org, and others, or use the <code>get_raw_account</code> method programmatically.</p>"},{"location":"how-to/get-contract-code-and-data/#using-ton-explorers","title":"Using TON explorers","text":"<ol> <li>Open Tonviewer.</li> <li>Enter the contract address into the search field.</li> <li>Navigate to the Code tab.</li> <li>The Bytecode section contains the contract code.</li> <li>The Raw data section contains the contract data.</li> </ol>"},{"location":"how-to/get-contract-code-and-data/#using-get_raw_account-method","title":"Using <code>get_raw_account</code> method","text":"<pre><code>from tonutils.client import ToncenterV3Client\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    contract_address = \"EQ...\"\n    account = await client.get_raw_account(contract_address)\n\n    # Print contract code (hex-encoded BOC)\n    print(account.code.to_boc().hex())\n\n    # Print contract data (hex-encoded BOC)\n    print(account.data.to_boc().hex())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> <p>See RawAccount fields overview</p>"},{"location":"how-to/get-contract-information/","title":"Get Contract Information","text":"<p>This example shows how to retrieve full contract details, including balance, status, code, data, and last transaction metadata.</p>"},{"location":"how-to/get-contract-information/#example","title":"Example","text":"<pre><code>from tonutils.client import ToncenterV3Client\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    contract_address = \"EQ...\"\n\n    contract = await client.get_raw_account(contract_address)\n\n    print(f\"Balance: {contract.balance}\")\n    print(f\"Status: {contract.status}\")\n    print(f\"Code: {contract.code}\")\n    print(f\"Data: {contract.data}\")\n    print(f\"Last Transaction LT: {contract.last_transaction_lt}\")\n    print(f\"Last Transaction Hash: {contract.last_transaction_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/get-contract-information/#rawaccount-fields-overview","title":"<code>RawAccount</code> fields overview","text":"<ul> <li> <p>balance \u2192 integer (in nanoTON)   Current balance of the contract.</p> </li> <li> <p>status \u2192 string   Contract status, one of:</p> <ul> <li><code>active</code> \u2192 contract exists and is active</li> <li><code>nonexist</code> \u2192 contract does not exist</li> <li><code>frozen</code> \u2192 contract is frozen</li> <li><code>uninit</code> \u2192 contract exists but is not initialized</li> </ul> </li> <li> <p>code \u2192 <code>Cell</code> (optional)   The contract\u2019s executable code (if present).</p> </li> <li> <p>data \u2192 <code>Cell</code> (optional)   The contract\u2019s persistent data (if present).</p> </li> <li> <p>last_transaction_lt \u2192 integer (optional)   Logical time (LT) of the most recent transaction.</p> </li> <li> <p>last_transaction_hash \u2192 string (optional)   Hash of the most recent transaction.</p> </li> <li> <p>state_init \u2192 <code>StateInit</code> (optional)   Combined object representing the full contract state if both code and data are available.</p> </li> </ul>"},{"location":"how-to/get-jetton-wallet-address/","title":"Get Jetton Wallet Address","text":"<p>There are several ways to obtain the address of a Jetton Wallet.</p>"},{"location":"how-to/get-jetton-wallet-address/#standard-jetton","title":"Standard Jetton","text":""},{"location":"how-to/get-jetton-wallet-address/#using-get-method","title":"Using get-method","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    owner_address = \"UQ...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = await JettonMasterStandard.get_wallet_address(\n        client,\n        owner_address,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/get-jetton-wallet-address/#calculating-locally","title":"Calculating locally","text":"<p>Note</p> <p>Prepare the Jetton Wallet contract code by following the instructions in Get Contract code and data.</p> <pre><code>from tonutils.jetton import JettonMasterStandard\n\n\ndef main() -&gt; None:\n    owner_address = \"UQ...\"\n    jetton_wallet_code = \"...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = JettonMasterStandard.calculate_user_jetton_wallet_address(\n        owner_address,\n        jetton_wallet_code,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/get-jetton-wallet-address/#stablecoin-jetton","title":"Stablecoin Jetton","text":"<p>e.g., USD\u20ae, NOT</p>"},{"location":"how-to/get-jetton-wallet-address/#using-get-method_1","title":"Using get-method","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    owner_address = \"UQ...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = await JettonMasterStablecoin.get_wallet_address(\n        client,\n        owner_address,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/get-jetton-wallet-address/#calculating-locally_1","title":"Calculating locally","text":"<p>Note</p> <p>Prepare the Jetton Wallet contract code by following the instructions in Get Contract code and data.</p> <pre><code>from tonutils.jetton import JettonMasterStablecoin\n\n\ndef main() -&gt; None:\n    owner_address = \"UQ...\"\n    jetton_wallet_code = \"...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = JettonMasterStablecoin.calculate_user_jetton_wallet_address(\n        owner_address,\n        jetton_wallet_code,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/get-nft-item-address/","title":"Get NFT Item Address","text":"<p>There are several ways to obtain the address of an NFT Item.</p>"},{"location":"how-to/get-nft-item-address/#standard-collections","title":"Standard collections","text":""},{"location":"how-to/get-nft-item-address/#using-get-method","title":"Using get-method","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    nft_index = 1\n    collection_address = \"EQ...\"\n\n    nft_address = await Collection.get_nft_address_by_index(\n        client,\n        nft_index,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/get-nft-item-address/#calculating-locally","title":"Calculating locally","text":"<p>Note</p> <p>Prepare the NFT Item contract code by following the instructions in Get Contract code and data.</p> <pre><code>from tonutils.nft import Collection\n\n\ndef main() -&gt; None:\n    nft_index = 1\n    nft_item_code = \"...\"\n    collection_address = \"EQ...\"\n\n    nft_address = Collection.calculate_nft_item_address(\n        nft_index,\n        nft_item_code,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/get-nft-item-address/#ton-dns-domains-collection","title":"TON DNS Domains collection","text":"<p>Note</p> <p>The index is computed as <code>slice_hash(name)</code>. See Use FunC hash functions for details.</p>"},{"location":"how-to/get-nft-item-address/#using-get-method_1","title":"Using get-method","text":"<pre><code>from pytoniq_core import begin_cell\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection\nfrom tonutils.utils import slice_hash\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    domain_name = \"temp\"\n    domain_index = slice_hash(begin_cell().store_string(domain_name))\n    collection_address = \"EQ...\"\n\n    nft_address = await Collection.get_nft_address_by_index(\n        client,\n        domain_index,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/get-nft-item-address/#calculating-locally_1","title":"Calculating locally","text":"<p>Note</p> <p>Prepare the NFT Item contract code by following the instructions in Get Contract code and data.</p> <pre><code>from pytoniq_core import begin_cell\nfrom tonutils.nft import Collection\nfrom tonutils.utils import slice_hash\n\n\ndef main() -&gt; None:\n    domain_name = \"temp\"\n    domain_index = slice_hash(begin_cell().store_string(domain_name))\n    nft_item_code = \"...\"\n    collection_address = \"EQ...\"\n\n    nft_address = Collection.calculate_nft_item_address(\n        domain_index,\n        nft_item_code,\n        collection_address,\n        index_len=256,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/get-nft-item-address/#telegram-gifts-anonymous-telegram-numbers","title":"Telegram Gifts / Anonymous Telegram Numbers","text":"<p>Note</p> <p>The index is computed as <code>string_hash(telemint_token_name)</code>. See Use FunC hash functions for details.</p>"},{"location":"how-to/get-nft-item-address/#using-get-method_2","title":"Using get-method","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection\nfrom tonutils.utils import string_hash\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    telemint_token_name = \"8888888\"\n    token_index = string_hash(telemint_token_name)\n    collection_address = \"EQ...\"\n\n    nft_address = await Collection.get_nft_address_by_index(\n        client,\n        token_index,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/get-nft-item-address/#calculating-locally_2","title":"Calculating locally","text":"<p>Note</p> <p>Prepare the NFT Item contract code by following the instructions in Get Contract code and data.</p> <pre><code>from tonutils.nft import Collection\nfrom tonutils.utils import string_hash\n\n\ndef main() -&gt; None:\n    telemint_token_name = \"8888888\"\n    token_index = string_hash(telemint_token_name)\n    nft_item_code = \"...\"\n    collection_address = \"EQ...\"\n\n    nft_address = Collection.calculate_nft_item_address(\n        token_index,\n        nft_item_code,\n        collection_address,\n        index_len=256,\n        is_telemint_token=True,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/send-claim-mintless-jetton/","title":"Send/Claim Mintless Jetton","text":"<p>This example contains information on how to claim or send mintless Jettons using <code>TonapiClient</code>.</p> <p>Note</p> <p>You need an API key from tonconsole.com.</p>"},{"location":"how-to/send-claim-mintless-jetton/#send-mintless-jetton","title":"Send Mintless Jetton","text":"<pre><code>from typing import Any, Dict, Union\n\nimport aiohttp\nfrom aiohttp import ClientResponseError\nfrom pytoniq_core import Address, Cell, Slice, StateInit, begin_cell\n\nfrom tonutils.client import TonapiClient\nfrom tonutils.jetton import JettonWalletStandard\nfrom tonutils.utils import to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# API key for accessing the Tonapi (obtainable from https://tonconsole.com)\nAPI_KEY = \"\"\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Comment for transfer payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = TonapiClient(api_key=API_KEY)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_data = await get_jetton(client, wallet.address.to_str())\n    if jetton_data is None:\n        raise Exception(\"Jetton data not found. Are there jettons in this wallet?\")\n\n    jetton_balance = int(jetton_data[\"balance\"])\n    custom_payload_api_uri = jetton_data[\"jetton\"][\"custom_payload_api_uri\"]\n    jetton_custom_payload = await get_payload(custom_payload_api_uri, wallet.address.to_str())\n    jetton_wallet_address = jetton_custom_payload[\"jetton_wallet\"]\n\n    if not await is_claimed(client, jetton_wallet_address):\n        custom_payload = Cell.one_from_boc(jetton_custom_payload[\"custom_payload\"])\n        state_init = StateInit.deserialize(Slice.one_from_boc(jetton_custom_payload[\"state_init\"]))\n    else:\n        custom_payload = state_init = None\n\n    body = JettonWalletStandard.build_transfer_body(\n        recipient_address=Address(DESTINATION_ADDRESS),\n        response_address=wallet.address,\n        jetton_amount=jetton_balance,\n        custom_payload=custom_payload,\n        forward_payload=(\n            begin_cell()\n            .store_uint(0, 32)\n            .store_snake_string(COMMENT)\n            .end_cell()\n        ),\n        forward_amount=1,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.1,\n        body=body,\n        state_init=state_init,\n        bounce=True,\n    )\n\n    print(f\"Successfully transferred {to_amount(jetton_balance)} jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nasync def get_jetton(client: TonapiClient, addr: str) -&gt; Union[Dict[str, Any], None]:\n    method = f\"/v2/accounts/{addr}/jettons\"\n    params = {\"supported_extensions\": \"custom_payload\"}\n    try:\n        result = await client._request(\"GET\", path=method, params=params)  # noqa\n        return next(\n            (b for b in result.get(\"balances\", [])\n             if Address(b[\"jetton\"][\"address\"]) == Address(JETTON_MASTER_ADDRESS)),\n            None\n        )\n    except Exception as e:\n        print(f\"Error fetching jetton data: {e}\")\n        return None\n\n\nasync def get_payload(api_uri: str, wallet_address: str) -&gt; Dict[str, Any]:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"{api_uri}/wallet/{wallet_address}\") as response:\n            response.raise_for_status()\n            return await response.json()\n\n\nasync def is_claimed(client: TonapiClient, jetton_addr: str) -&gt; bool:\n    try:\n        result = await client.run_get_method(jetton_addr, \"is_claimed\")\n        return bool(result[0])\n    except ClientResponseError as e:\n        if e.status == 404:\n            return False\n        raise\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/send-claim-mintless-jetton/#claim-mintless-jetton","title":"Claim Mintless Jetton","text":"<pre><code>from typing import Any, Dict, Union\n\nimport aiohttp\nfrom aiohttp import ClientResponseError\nfrom pytoniq_core import Address, Cell, Slice, StateInit\n\nfrom tonutils.client import TonapiClient\nfrom tonutils.jetton import JettonWalletStandard\nfrom tonutils.utils import to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# API key for accessing the Tonapi (obtainable from https://tonconsole.com)\nAPI_KEY = \"\"\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = TonapiClient(api_key=API_KEY)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_data = await get_jetton(client, wallet.address.to_str())\n    if jetton_data is None:\n        raise Exception(\"Jetton data not found. Are there jettons in this wallet?\")\n\n    jetton_balance = int(jetton_data[\"balance\"])\n    custom_payload_api_uri = jetton_data[\"jetton\"][\"custom_payload_api_uri\"]\n    jetton_custom_payload = await get_payload(custom_payload_api_uri, wallet.address.to_str())\n    jetton_wallet_address = jetton_custom_payload[\"jetton_wallet\"]\n\n    if not await is_claimed(client, jetton_wallet_address):\n        custom_payload = Cell.one_from_boc(jetton_custom_payload[\"custom_payload\"])\n        state_init = StateInit.deserialize(Slice.one_from_boc(jetton_custom_payload[\"state_init\"]))\n    else:\n        print(\"Jetton already claimed!\")\n        return\n\n    body = JettonWalletStandard.build_transfer_body(\n        recipient_address=wallet.address,\n        response_address=wallet.address,\n        jetton_amount=jetton_balance,\n        custom_payload=custom_payload,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.1,\n        body=body,\n        state_init=state_init,\n        bounce=True,\n    )\n\n    print(f\"Successfully claimed {to_amount(jetton_balance)} jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nasync def get_jetton(client: TonapiClient, addr: str) -&gt; Union[Dict[str, Any], None]:\n    method = f\"/v2/accounts/{addr}/jettons\"\n    params = {\"supported_extensions\": \"custom_payload\"}\n    try:\n        result = await client._request(\"GET\", path=method, params=params)  # noqa\n        return next(\n            (b for b in result.get(\"balances\", [])\n             if Address(b[\"jetton\"][\"address\"]) == Address(JETTON_MASTER_ADDRESS)),\n            None\n        )\n    except Exception as e:\n        print(f\"Error fetching jetton data: {e}\")\n        return None\n\n\nasync def get_payload(api_uri: str, wallet_address: str) -&gt; Dict[str, Any]:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"{api_uri}/wallet/{wallet_address}\") as response:\n            response.raise_for_status()\n            return await response.json()\n\n\nasync def is_claimed(client: TonapiClient, jetton_addr: str) -&gt; bool:\n    try:\n        result = await client.run_get_method(jetton_addr, \"is_claimed\")\n        return bool(result[0])\n    except ClientResponseError as e:\n        if e.status == 404:\n            return False\n        raise\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/send-encrypted-message/","title":"Send Encrypted Message","text":"<p>This example shows how to send a TON transfer with an encrypted comment. The encrypted comment ensures the payload is securely delivered only to the intended recipient.</p>"},{"location":"how-to/send-encrypted-message/#example","title":"Example","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the recipient wallet\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Amount to transfer in TON\nTRANSFER_AMOUNT = 0.01\n\n# Comment to include in the transfer payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = await wallet.build_encrypted_comment_body(\n        text=COMMENT,\n        destination=DESTINATION_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=DESTINATION_ADDRESS,\n        amount=TRANSFER_AMOUNT,\n        body=body,\n    )\n\n    print(f\"Successfully transferred {TRANSFER_AMOUNT} TON to address {DESTINATION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/send-gasless-transaction/","title":"Send Gasless Transaction","text":"<p>This example demonstrates how to send a gasless Jetton transfer.</p> <p>Note</p> <p>This method leverages the gasless relayer feature provided by tonapi.io. You must obtain an API key from tonconsole.com.</p>"},{"location":"how-to/send-gasless-transaction/#prerequisites","title":"Prerequisites","text":"<p>Install dependencies:</p> <pre><code>pip install pytonapi\n</code></pre>"},{"location":"how-to/send-gasless-transaction/#example","title":"Example","text":"<pre><code>from pytonapi import AsyncTonapi\nfrom pytoniq_core import Address, Cell\n\nfrom tonutils.client import TonapiClient\nfrom tonutils.jetton import JettonMasterStandard, JettonWalletStandard\nfrom tonutils.utils import to_nano\nfrom tonutils.wallet import WalletV5R1\n\n# API key for accessing the Tonapi (obtainable from https://tonconsole.com)\nAPI_KEY = \"\"\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to transfer (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Amount for jetton transfer.\nBASE_JETTON_SEND_AMOUNT = 0.05\n\n\nasync def main() -&gt; None:\n    tonapi, client = AsyncTonapi(api_key=API_KEY), TonapiClient(api_key=API_KEY)\n    wallet, public_key, private_key, _ = WalletV5R1.from_mnemonic(client, MNEMONIC)\n\n    gasless_config = await tonapi.gasless.get_config()\n    relayer_address = Address(gasless_config.relay_address)\n\n    jetton_wallet_address = await JettonMasterStandard.get_wallet_address(\n        client=client,\n        owner_address=wallet.address,\n        jetton_master_address=JETTON_MASTER_ADDRESS,\n    )\n    tether_transfer_body = JettonWalletStandard.build_transfer_body(\n        jetton_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n        recipient_address=Address(DESTINATION_ADDRESS),\n        response_address=relayer_address,\n        forward_amount=1,\n    )\n    message_to_estimate = wallet.create_internal_msg(\n        dest=jetton_wallet_address,\n        value=to_nano(BASE_JETTON_SEND_AMOUNT),\n        body=tether_transfer_body,\n    )\n\n    sign_raw_params = await tonapi.gasless.estimate_gas_price(\n        master_id=JETTON_MASTER_ADDRESS,\n        body={\n            \"wallet_address\": wallet.address.to_str(),\n            \"wallet_public_key\": public_key.hex(),\n            \"messages\": [\n                {\n                    \"boc\": message_to_estimate.serialize().to_boc().hex(),\n                }\n            ]\n        }\n    )\n\n    try:\n        seqno = await WalletV5R1.get_seqno(client, wallet.address)\n    except (Exception,):\n        seqno = 0\n\n    tether_transfer_for_send = wallet.create_signed_internal_msg(\n        messages=[\n            wallet.create_wallet_internal_message(\n                destination=Address(message.address),\n                value=int(message.amount),\n                body=Cell.one_from_boc(message.payload),\n            ) for message in sign_raw_params.messages\n        ],\n        seqno=seqno,\n        valid_until=sign_raw_params.valid_until,\n    )\n    ext_message = wallet.create_external_msg(\n        dest=wallet.address,\n        body=tether_transfer_for_send,\n        state_init=wallet.state_init if seqno == 0 else None,\n    )\n\n    await tonapi.gasless.send(\n        body={\n            \"wallet_public_key\": public_key.hex(),\n            \"boc\": ext_message.serialize().to_boc().hex(),\n        }\n    )\n\n    print(f\"A gasless transfer sent!\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"how-to/use-func-hash-functions/","title":"Use FunC Hash Functions","text":""},{"location":"how-to/use-func-hash-functions/#cell_hash","title":"cell_hash","text":"<p>Calculates the representation hash of the given cell <code>c</code> and returns it as a 256-bit unsigned integer <code>x</code>. This function is handy for signing and verifying signatures of arbitrary entities structured as a tree of cells.</p> <pre><code>from tonutils.utils import cell_hash\nfrom pytoniq_core import begin_cell\n\n\ndef main() -&gt; None:\n    c = begin_cell().store_string(\"ness\").end_cell()\n    x = cell_hash(c)\n    print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/use-func-hash-functions/#slice_hash","title":"slice_hash","text":"<p>Computes the hash of the given slice <code>s</code> and returns it as a 256-bit unsigned integer <code>x</code>. The result is equivalent to creating a standard cell containing only the data and references from <code>s</code> and then computing its hash using <code>cell_hash</code>.</p> <pre><code>from tonutils.utils import slice_hash\nfrom pytoniq_core import begin_cell\n\n\ndef main() -&gt; None:\n    s = begin_cell().store_string(\"ness\")\n    x = slice_hash(s)\n    print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"how-to/use-func-hash-functions/#string_hash","title":"string_hash","text":"<p>Calculates the SHA-256 hash of the data bits in the given slice <code>s</code>. A cell underflow exception is thrown if the bit length of <code>s</code> is not a multiple of eight. The hash is returned as a 256-bit unsigned integer <code>x</code>.</p> <pre><code>from tonutils.utils import string_hash\n\n\ndef main() -&gt; None:\n    s = \"ness\"\n    x = string_hash(s)\n    print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>Tonutils \u2014 \u044d\u0442\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u043e\u043c TON. \u041e\u043d\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f:</p> <p>Tip</p> <p>\u0414\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b TON \u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0442\u0430\u043a\u0436\u0435 \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 TON.</p> <p>RPC API</p> <ul> <li>tonapi.io \u2014 REST API \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0434\u0430\u043d\u043d\u044b\u043c \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 TON.</li> <li>toncenter.com \u2014 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0438 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 HTTP API \u0434\u043b\u044f The Open Network.</li> <li>quicknode.com \u2014 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441 \u043d\u0438\u0437\u043a\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0434\u043b\u044f HTTP-\u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a TON.</li> <li>tatum.io \u2014 RPC \u0438 API \u0434\u043b\u044f Web3-\u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432: \u0431\u044b\u0441\u0442\u0440\u044b\u0435, \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0435, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435.</li> </ul> <p>\u041d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 ADNL</p> <ul> <li>pytoniq \u2014 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043b\u0430\u0439\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438 TON.</li> </ul> <p>Tonutils \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u044d\u0442\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u043c\u043e\u0449\u043d\u044b\u0439 \u0438 \u0433\u0438\u0431\u043a\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043d\u0430 \u0431\u0430\u0437\u0435 \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u044b TON.</p> <p>Tip</p> <p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 \u2014 \u0442\u0430\u043a\u0438\u0445, \u043a\u0430\u043a \u0441\u043f\u0438\u0441\u043a\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043a\u0438 NFT, \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0442.\u043f. \u2014 \u043d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u044e\u0449\u0438\u0435 API, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a Toncenter, Tonapi \u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b. \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Tonapi \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043c\u043e\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python: pytonapi.</p>"},{"location":"ru/#_1","title":"\u0412\u043a\u043b\u0430\u0434 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<p>\u0412\u0430\u0448 \u0432\u043a\u043b\u0430\u0434 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f! \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0432\u044b \u043d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443, \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 issue \u0438\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 pull request \u043d\u0430 GitHub.</p> <p>Note</p> <p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0420\u0430\u0437\u0434\u0435\u043b\u044b \u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438\u043b\u0438 \u0431\u044b\u0442\u044c \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u043c\u0438 \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e.</p>"},{"location":"ru/donate/","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c","text":"<p>\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044e \u0437\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u043c\u043e\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b! \u0412\u0430\u0448 \u0432\u043a\u043b\u0430\u0434 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043c\u043d\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435 \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u2764\ufe0f</p>"},{"location":"ru/donate/#_1","title":"\u041f\u0440\u044f\u043c\u044b\u0435 \u0434\u043e\u043d\u0430\u0442\u044b \u043d\u0430 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043d\u0430\u0442 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430:</p> <ul> <li> <p>TON <code>UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness</code></p> </li> <li> <p>BTC <code>1FKJDBSxdtsMad84iYY96zLJBVEChehbx1</code></p> </li> <li> <p>USDT (TRC-20) <code>TDHMG7JRkmJBDD1qd4bNhdfoy2uzVd8ixA</code></p> </li> </ul>"},{"location":"ru/donate/#_2","title":"\u0414\u043e\u043d\u0430\u0442\u044b \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u043e\u0432","text":"<p>\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043d\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0431\u043e\u0442\u043e\u0432:</p> <ul> <li> <p>Crypto Bot \u0414\u043e\u043d\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 Crypto Bot</p> </li> <li> <p>xRocket Bot \u0414\u043e\u043d\u0430\u0442 \u0447\u0435\u0440\u0435\u0437 xRocket</p> </li> </ul>"},{"location":"ru/sponsors/","title":"\u0421\u043f\u043e\u043d\u0441\u043e\u0440\u044b","text":"<p>\u042f \u0438\u0441\u043a\u0440\u0435\u043d\u043d\u0435 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044e \u0432\u0441\u0435\u0445, \u043a\u0442\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442. \u2764\ufe0f</p>"},{"location":"ru/sponsors/#_2","title":"\u041f\u0440\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435","text":"<ul> <li> <p>TON Society   \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 Grants and Bounties.</p> </li> <li> <p>TONAPI   \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0430\u0436\u043d\u0443\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 API-\u0441\u0435\u0440\u0432\u0438\u0441\u044b.</p> </li> </ul>"},{"location":"ru/sponsors/#_3","title":"\u041e\u0441\u043e\u0431\u0430\u044f \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u043d\u043e\u0441\u0442\u044c","text":"<ul> <li>Igroman787 </li> <li>Roman Inozemtsev </li> <li>Cron </li> </ul>"},{"location":"ru/sponsors/#_4","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0432\u0448\u0438\u0435","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0432\u0441\u0435\u043c, \u043a\u0442\u043e \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u043b \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442!</p> <ul> <li><code>svatoshscammer.ton</code> </li> <li><code>vtonsdk.t.me</code></li> </ul>"},{"location":"ru/sponsors/#_5","title":"\u0425\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c?","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043c\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u2014 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u043e\u043d\u0430\u0442\u043e\u0432. \u0412\u0430\u0448\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043b\u0443\u0447\u0448\u0435.</p>"},{"location":"ru/cookbook/cnft/","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0421\u0436\u0430\u0442\u044b\u0445 NFT","text":""},{"location":"ru/cookbook/cnft/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442 \u0441 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0435\u0439 \u0441\u0436\u0430\u0442\u044b\u0445 NFT (cNFT) \u0432 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0435 TON \u2014 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u0430\u043a\u0442\u0438\u0432\u043e\u0432, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441\u0436\u0430\u0442\u0438\u044f \u0438 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u041c\u0435\u0440\u043a\u043b\u0430. \u0417\u0434\u0435\u0441\u044c \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f, \u043a\u0430\u043a cNFT \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0441\u043d\u0438\u0436\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043d\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0448\u0430\u0433\u0438 \u043f\u043e \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u043c\u0438 NFT-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438.</p>"},{"location":"ru/cookbook/cnft/#_2","title":"\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432: \u0414\u0435\u0440\u0435\u0432\u044c\u044f \u041c\u0435\u0440\u043a\u043b\u0430 \u0445\u0440\u0430\u043d\u044f\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u043d\u0438\u0436\u0430\u044f \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0433\u0430\u0437 \u0438 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043d\u0430 \u0441\u0435\u0442\u044c.</li> <li>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u0430\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c: \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043e\u0431\u044a\u0451\u043c\u044b NFT \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</li> <li>\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: \u041c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0430 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0435 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0438 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u043c\u0435\u0441\u0442\u043e.</li> <li>\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u0430\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c: \u0414\u0435\u0440\u0435\u0432\u044c\u044f \u041c\u0435\u0440\u043a\u043b\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0431\u044b\u0441\u0442\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0430\u0434\u0451\u0436\u043d\u0443\u044e \u0437\u0430\u0449\u0438\u0442\u0443 \u0430\u043a\u0442\u0438\u0432\u043e\u0432.</li> <li>\u0421\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u0442\u0440\u0430\u0442: \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u201c\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445\u201d on-chain \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438.</li> </ul>"},{"location":"ru/cookbook/cnft/#_3","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430","text":"<p>\u0422\u0435\u043a\u0443\u0449\u0438\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0438 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u043e\u0432 \u043d\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442 \u043d\u0435\u0437\u0430\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u043d\u044b\u0435 cNFT \u0438\u043b\u0438 NFT \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0442\u043d\u0451\u0440\u0430\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Telegram Wallet \u0438 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441 Getgems \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u044b\u0435 200 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043d\u0435\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u0440\u0443\u043f\u043d\u044b\u043c\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438.</p> <p>\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0430\u0442\u0430\u043a\u0438 \u0417\u043b\u043e\u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0442\u043d\u0438 \u0442\u044b\u0441\u044f\u0447 NFT \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c\u0438, \u0432\u044b\u043d\u0443\u0436\u0434\u0430\u044f \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u2014 \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0441\u0430\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u044b, \u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044e.</p> <p>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0441\u043c\u043e\u0433\u0443\u0442 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u00ab\u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c\u00bb (claim) \u0441\u0432\u043e\u0438 cNFT. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 NFT \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430\u0445 \u0438 \u043d\u0430 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0430\u0445 \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 NFT, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0443\u044e \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c.</p>"},{"location":"ru/cookbook/cnft/#_4","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"ru/cookbook/cnft/#nft","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 NFT","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 NFT.</p>"},{"location":"ru/cookbook/cnft/#_5","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li> <p>\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438   \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>collection.json</code>, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445 NFT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432.   \u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>{\n    \"name\": \"&lt;collection name&gt;\",\n    \"description\": \"&lt;collection description&gt;\",\n    \"image\": \"&lt;link to the image (e.g. https://yourdomain.com/logo.png)&gt;\"\n}\n</code></pre> </li> <li> <p>\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 NFT-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432   \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e NFT \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 JSON-\u0444\u0430\u0439\u043b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>0.json</code>, <code>1.json</code> \u0438 \u0442.\u0434.) \u0441 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 NFT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432.   \u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>{\n    \"name\": \"&lt;item name&gt;\",\n    \"description\": \"&lt;item description&gt;\",\n    \"image\": \"&lt;link to the image (e.g. https://yourdomain.com/0.png)&gt;\"\n}\n</code></pre> </li> </ul>"},{"location":"ru/cookbook/cnft/#_6","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"<ul> <li>\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f: \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>logo.png</code> \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0432\u0430\u0442\u0430\u0440\u0430) \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e NFT (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>0.png</code>, <code>1.png</code> \u0438 \u0442.\u0434.).</li> <li>JSON-\u0444\u0430\u0439\u043b\u044b: \u0420\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0444\u0430\u0439\u043b <code>collection.json</code> \u0438 JSON-\u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f NFT \u043d\u0430 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438\u043b\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 URL.</li> </ul> <p>Note</p> <p>\u0412\u0441\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 JSON-\u0444\u0430\u0439\u043b\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0441\u0432\u043e\u0438\u043c URL-\u0430\u0434\u0440\u0435\u0441\u0430\u043c.</p>"},{"location":"ru/cookbook/cnft/#tc","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430 TC","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 JSON-\u0444\u0430\u0439\u043b \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430 TON Connect, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430. \u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>{\n  \"url\": \"&lt;app url&gt;\",\n  \"name\": \"&lt;app name&gt;\",\n  \"iconUrl\": \"&lt;app icon url&gt;\"\n}\n</code></pre> <p>Note</p> <p>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e URL-\u0430\u0434\u0440\u0435\u0441\u0443 \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u0435.</p>"},{"location":"ru/cookbook/cnft/#_7","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432","text":"<p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b <code>owners.txt</code>, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 NFT \u2014 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443. \u041f\u0435\u0440\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c <code>0</code>, \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c <code>1</code> \u0438 \u0442.\u0434. \u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>UQDYzZmfsrGzhObKJUw4gzdeIxEai3jAFbiGKGwxvxHinf4K\nUQCDrgGaI6gWK-qlyw69xWZosurGxrpRgIgSkVsgahUtxZR0\n</code></pre>"},{"location":"ru/cookbook/cnft/#_8","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b","text":"<p>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0435\u0433\u043e API \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (claim) NFT. \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a API. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ngrok \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e URL.</p>"},{"location":"ru/cookbook/cnft/#api-nft","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 API \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 NFT","text":"<ol> <li> <p>\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439    \u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b:</p> <pre><code>git clone https://github.com/nessshon/cnft-toolbox \n</code></pre> </li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438    \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 Docker, Docker Compose \u0438 ngrok, \u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043d\u0430 \u0432\u0430\u0448\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u0435.</p> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Telegram-\u0431\u043e\u0442\u0430    \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0431\u043e\u0442\u0430 \u0432 Telegram \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0435\u0433\u043e API-\u0442\u043e\u043a\u0435\u043d.</p> </li> <li> <p>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0434\u043e\u0441\u0442\u0443\u043f \u043a API    \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ngrok \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e URL \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>ngrok http 8080 \n</code></pre> <p>\u0414\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0430: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u043c\u0435\u043d \u0438 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0439\u0442\u0435 Nginx \u0434\u043b\u044f \u043f\u0440\u043e\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0432\u0430\u0448\u0435\u043c\u0443 API \u043d\u0430 \u043f\u043e\u0440\u0442 8080. \u042d\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f:</p> <ul> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0434\u043e\u043c\u0435\u043d\u0430 \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0443 \u0435\u0433\u043e \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443.</li> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 Nginx \u0434\u043b\u044f \u043f\u0440\u043e\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043f\u043e\u0440\u0442 8080.</li> </ul> </li> <li> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>.env</code>    \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>env.example</code> \u043f\u043e\u0434 \u0438\u043c\u0435\u043d\u0435\u043c <code>.env</code> \u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430:</p> Key Description Example Notes <code>PORT</code> \u041f\u043e\u0440\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c API. <code>8080</code> <code>ADMIN_USERNAME</code> \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c. <code>admin</code> <code>ADMIN_PASSWORD</code> \u041f\u0430\u0440\u043e\u043b\u044c \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0437\u0430\u0449\u0438\u0449\u0451\u043d\u043d\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c. <code>password</code> <code>DEPTH</code> \u0413\u043b\u0443\u0431\u0438\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 NFT (\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 = <code>2^DEPTH</code>; \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>DEPTH</code> \u2014 30). <code>20</code> <code>IS_TESTNET</code> \u0423\u043a\u0430\u0436\u0438\u0442\u0435, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0435\u0441\u044c \u043b\u0438 \u0432\u044b \u043a \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438 TON (<code>true</code>) \u0438\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0435\u0442\u0438 (<code>false</code>). <code>true</code> or <code>false</code> <code>POSTGRES_PASSWORD</code> \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a PostgreSQL. <code>secret</code> <code>POSTGRES_DB</code> \u0418\u043c\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL. <code>merkleapi</code> <code>POSTGRES_URI</code> \u041f\u043e\u043b\u043d\u044b\u0439 URI \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a PostgreSQL. <code>postgresql://postgres:secret@db:5432/merkleapi</code> <code>BOT_TOKEN</code> \u0422\u043e\u043a\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e Telegram-\u0431\u043e\u0442\u0430 (\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 @BotFather). <code>123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11</code> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 NFT. <code>API_BASE_URL</code> \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u043e\u043c\u0435\u043d \u0432\u0430\u0448\u0435\u0433\u043e API. <code>https://example.ngrok.io</code> \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u0432\u0430\u0448 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 URL (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0435\u0440\u0435\u0437 ngrok). <code>TONCONNECT_MANIFEST_URL</code> URL \u043a \u0444\u0430\u0439\u043b\u0443 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430 TON Connect. <code>https://example.com/tonconnect-manifest.json</code> \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0432\u0430\u0448\u0435\u0433\u043e \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430. <code>COLLECTION_ADDRESS</code> \u0410\u0434\u0440\u0435\u0441 NFT-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043f\u043e\u0441\u043b\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438. </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 API \u0438 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445    \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 API \u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>docker-compose up -d db api \n</code></pre> </li> <li> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445    \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:</p> <pre><code>docker-compose exec api /ctl migrate \n</code></pre> </li> <li> <p>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432    \u041f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0444\u0430\u0439\u043b <code>owners.txt</code> (\u0441 \u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432) \u0432 \u043f\u0430\u043f\u043a\u0443 <code>api</code>, \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435:</p> <pre><code>docker-compose exec api /ctl add /api/owners.txt \n</code></pre> </li> <li> <p>\u041f\u0435\u0440\u0435\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432    \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>&lt;API_URI&gt;/admin/rediscover</code> \u0438 \u0432\u043e\u0439\u0434\u0438\u0442\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>ADMIN_USERNAME</code> \u0438 <code>ADMIN_PASSWORD</code>. \u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 <code>ok</code>. \u0421\u043f\u0443\u0441\u0442\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f (\u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) \u0432 \u043f\u0430\u043f\u043a\u0435 <code>api/apidata/upd</code> \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0444\u0430\u0439\u043b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 <code>1.json</code>.</p> </li> <li> <p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435     \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f:</p> <pre><code>docker-compose exec api /ctl genupd &lt;path-to-update-file&gt; &lt;collection-owner&gt; &lt;collection-meta&gt; &lt;item-meta-prefix&gt; &lt;royalty-base&gt; &lt;royalty-factor&gt; &lt;royalty-recipient&gt; &lt;api-uri-including-v1&gt; \n</code></pre> <p>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <ul> <li><code>&lt;path-to-update-file&gt;</code>: \u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u043d\u0430 \u0448\u0430\u0433\u0435 9 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>api/apidata/upd/1.json</code>).</li> <li><code>&lt;collection-owner&gt;</code>: \u0410\u0434\u0440\u0435\u0441 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 NFT-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.</li> <li><code>&lt;collection-meta&gt;</code>: \u041f\u043e\u043b\u043d\u044b\u0439 URL \u043a \u0444\u0430\u0439\u043b\u0443 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>https://yourdomain.com/collection.json</code>).</li> <li><code>&lt;item-meta-prefix&gt;</code>: \u041e\u0431\u0449\u0438\u0439 \u043f\u0440\u0435\u0444\u0438\u043a\u0441 \u0434\u043b\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 0 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>https://yourdomain.com/0.json</code>, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>https://yourdomain.com/</code>).</li> <li><code>&lt;royalty-base&gt;</code>: \u0427\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0440\u043e\u044f\u043b\u0442\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 10 \u0434\u043b\u044f 10%, \u0435\u0441\u043b\u0438 \u0444\u0430\u043a\u0442\u043e\u0440-\u0440\u043e\u044f\u043b\u0442\u0438 \u0440\u0430\u0432\u0435\u043d 100).</li> <li><code>&lt;royalty-factor&gt;</code>: \u0417\u043d\u0430\u043c\u0435\u043d\u0430\u0442\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u043e\u044f\u043b\u0442\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 100).</li> <li><code>&lt;royalty-recipient&gt;</code>: \u0410\u0434\u0440\u0435\u0441, \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0440\u043e\u044f\u043b\u0442\u0438 (\u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 <code>&lt;collection-owner&gt;</code>).</li> <li><code>&lt;api-uri-including-v1&gt;</code>: \u041f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 URL \u0432\u0430\u0448\u0435\u0433\u043e API \u0441 \u043f\u043e\u0441\u0442\u0444\u0438\u043a\u0441\u043e\u043c <code>/v1</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 <code>https://yourapi.com/admin/rediscover</code> \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0444\u0430\u0439\u043b\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0437\u0434\u0435\u0441\u044c \u0443\u043a\u0430\u0436\u0438\u0442\u0435 <code>https://yourapi.com/v1</code>).</li> </ul> </li> <li> <p>\u0412\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0441\u044b\u043b\u043a\u0443 <code>ton://</code>     \u041f\u043e\u0441\u043b\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 <code>ton://</code>. \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u044d\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u0443 \u0441\u0441\u044b\u043b\u043a\u0443 \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 QR-\u043a\u043e\u0434\u043e\u0432 \u0438 \u043e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0451 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 Tonhub (\u0432 testnet \u0438\u043b\u0438 mainnet).</p> </li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438     \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>&lt;API_URI&gt;/admin/setaddr/&lt;collection-address&gt;</code>, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 <code>&lt;collection-address&gt;</code> \u043d\u0430 \u0430\u0434\u0440\u0435\u0441, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.</p> </li> <li> <p>\u041e\u0436\u0438\u0434\u0430\u0439\u0442\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f     \u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u043b\u043e\u0433\u0430\u043c\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 API \u0434\u043e \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e <code>committed state</code> (\u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438).</p> <pre><code>docker-compose logs api \n</code></pre> </li> <li> <p>\u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u043e!</p> </li> </ol>"},{"location":"ru/cookbook/cnft/#nft_1","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 NFT","text":"<ol> <li> <p>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 \u0444\u0430\u0439\u043b <code>.env</code>    \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 <code>.env</code> \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e <code>COLLECTION_ADDRESS</code>, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043f\u0440\u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.</p> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 Telegram-\u0431\u043e\u0442\u0430    \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u043e\u0442\u0430:</p> <pre><code>docker-compose up -d redis bot \n</code></pre> </li> <li> <p>\u0412\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0441 \u0431\u043e\u0442\u043e\u043c    \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 Telegram, \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043a \u0441\u0432\u043e\u0435\u043c\u0443 \u0431\u043e\u0442\u0443 \u0438 \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 NFT.</p> </li> <li> <p>\u0413\u043e\u0442\u043e\u0432\u043e!</p> </li> </ol>"},{"location":"ru/cookbook/cnft/#_9","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0432\u0430\u0448\u0435\u0439 NFT-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438:</p> <ol> <li> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432    \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>new-owners.txt</code> \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0430\u0434\u0440\u0435\u0441\u0430\u043c\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e \u0432 \u043f\u0430\u043f\u043a\u0443 <code>api</code>.</p> </li> <li> <p>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043d\u043e\u0432\u044b\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432    \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <pre><code>docker-compose exec api /ctl add /api/new-owners.txt \n</code></pre> </li> <li> <p>\u041f\u0435\u0440\u0435\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u044c\u0442\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b    \u0412 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 <code>&lt;API_URI&gt;/admin/rediscover</code> \u0438 \u0432\u043e\u0439\u0434\u0438\u0442\u0435 \u043f\u043e\u0434 \u0441\u0432\u043e\u0438\u043c\u0438 <code>ADMIN_USERNAME</code> \u0438 <code>ADMIN_PASSWORD</code>.</p> </li> <li> <p>\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0444\u0430\u0439\u043b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f    \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043f\u0430\u043f\u043a\u0435 <code>api/apidata/upd</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>2.json</code>, \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0431\u044b\u043b <code>1.json</code>).</p> </li> <li> <p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435    \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <pre><code>docker-compose exec api /ctl genupd &lt;path-to-update-file&gt; &lt;collection-address&gt; \n</code></pre> <p>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>&lt;path-to-update-file&gt;</code> \u043d\u0430 \u043f\u0443\u0442\u044c \u043a \u043d\u043e\u0432\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>api/apidata/upd/2.json</code>), \u0430 <code>&lt;collection-address&gt;</code> \u2014 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u0432\u0430\u0448\u0435\u0439 NFT-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438.</p> </li> <li> <p>\u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e <code>ton://</code> \u0441\u0441\u044b\u043b\u043a\u0435    \u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 <code>ton://</code> \u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e. \u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c QR-\u043a\u043e\u0434 \u043f\u043e \u044d\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 \u0438 \u043e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 Tonhub.</p> </li> <li> <p>\u041e\u0436\u0438\u0434\u0430\u0439\u0442\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f    \u0421\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u043b\u043e\u0433\u0430\u043c\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 API \u0434\u043e \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e <code>committed state</code> (\u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438):</p> <pre><code>docker-compose logs api \n</code></pre> </li> <li> <p>\u0413\u043e\u0442\u043e\u0432\u043e!</p> </li> </ol>"},{"location":"ru/cookbook/cnft/#_10","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442 \u0441\u0436\u0430\u0442\u044b\u0445 NFT \u043a\u0430\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e NFT \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044f \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0435 \u0438 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043c\u0430\u0441\u0441\u043e\u0432\u043e\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u0430 NFT. \u0423\u0441\u0442\u0440\u0430\u043d\u044f\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432, \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0431\u043e\u043b\u0435\u0435 \u0448\u0438\u0440\u043e\u043a\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044e NFT \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0432 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432 \u0438 \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u043a\u0430\u043c\u043f\u0430\u043d\u0438\u044f\u0445.</p>"},{"location":"ru/cookbook/cnft/#_11","title":"\u0421\u043c. \u0422\u0430\u043a\u0436\u0435","text":"<ul> <li>Compressed NFT standard implementation</li> <li>Reference augmenting API implementation</li> <li>Compressed NFT toolbox</li> </ul>"},{"location":"ru/cookbook/subdomains/","title":"\u0412\u044b\u043f\u0443\u0441\u043a \u041f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 TON","text":""},{"location":"ru/cookbook/subdomains/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0451\u0442 \u0432\u0430\u0441 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 \u0432 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0435 TON \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c. \u041e\u043d\u043e \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438, \u0432\u044b\u043f\u0443\u0441\u043a \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 DNS-\u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438.</p>"},{"location":"ru/cookbook/subdomains/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0432\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 \u0432 TON, \u0432\u044b\u0431\u043e\u0440 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f:</p>"},{"location":"ru/cookbook/subdomains/#_3","title":"\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":"<p>GitHub \u2197</p> <p>\u042d\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0432 \u0432\u0438\u0434\u0435 NFT. \u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u044b\u043f\u0443\u0441\u043a \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432, \u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 NFT \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043d\u0430\u0434 \u0441\u0432\u043e\u0438\u043c \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u043c.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:</p> <ul> <li>\u041f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u043f\u0440\u043e\u0434\u0430\u0432\u0430\u0442\u044c</li> <li>\u0414\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u2014 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430 \u0441\u0432\u043e\u0439 \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442</li> <li>\u0422\u0440\u0435\u0431\u0443\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, API \u0434\u043b\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445)</li> </ul>"},{"location":"ru/cookbook/subdomains/#_4","title":"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":"<p>GitHub \u2197</p> <p>\u042d\u0442\u043e \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u0433\u0434\u0435 \u043e\u0434\u0438\u043d \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0440\u043e\u043b\u044c \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0432\u044b\u043f\u0443\u0441\u043a \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0443 \u0438\u0445 DNS-\u0437\u0430\u043f\u0438\u0441\u0435\u0439.</p> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:</p> <ul> <li>\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432</li> <li>\u0411\u044b\u0441\u0442\u0440\u0430\u044f \u0438 \u043b\u0451\u0433\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430</li> <li>\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043e\u0434\u0438\u043d \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442</li> </ul>"},{"location":"ru/cookbook/subdomains/#_5","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Python \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c tonutils, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438.</p>"},{"location":"ru/cookbook/subdomains/#_6","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":"<ul> <li>Python 3.10+</li> <li>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u043c\u0435\u043d .ton:  <ul> <li>Mainnet: dns.ton.org</li> <li>Testnet: dns.ton.org?testnet=true</li> </ul> </li> </ul>"},{"location":"ru/cookbook/subdomains/#_7","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e Python-\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443:</p> <pre><code>pip install tonutils\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_8","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432, \u0432\u0430\u043c \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f:</p> <ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f API \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0414\u043e\u043c\u0435\u043d\u043d\u043e\u0435 \u0438\u043c\u044f, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0435 \u043d\u0430 \u044d\u0442\u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440, \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u043c</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435 Docker \u0438 Docker Compose \u0434\u043b\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f API</li> </ul>"},{"location":"ru/cookbook/subdomains/#_9","title":"\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":""},{"location":"ru/cookbook/subdomains/#_10","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c API \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445. \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0432\u0438\u0441 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 NFT-\u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432, \u0434\u0435\u043b\u0430\u044f \u0438\u0445 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0435\u043c\u044b\u043c\u0438.</p> <ol> <li> <p>\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439:  </p> <pre><code>git clone https://github.com/nessshon/subdomains-toolbox\ncd metadata-api\n</code></pre> </li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Docker:    API \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 <code>8001</code>. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c SSL \u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u043a\u0441\u0438 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430.</p> <pre><code>docker-compose up -d\n</code></pre> </li> <li> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 API:    \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 <code>https://your-domain.com/api/ton/example.png</code>. \u041f\u0440\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0435 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430 <code>example</code>.</p> </li> </ol>"},{"location":"ru/cookbook/subdomains/#_11","title":"\u0420\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 API \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 NFT \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432.</p> <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_collection import SubdomainCollection\nfrom tonutils.dns.subdomain_collection.content import SubdomainCollectionContent\nfrom tonutils.dns.subdomain_collection.data import FullDomain\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# NFT domain name and address from TON DNS Domains\n# Obtainable from https://dns.ton.org/ or https://dns.ton.org/?testnet=true\nDOMAIN_NAME = \"ghost\"  # ghost \u2192 ghost.ton\nDOMAIN_ADDRESS = \"EQ...\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n# Base URL of the API for generating metadata for NFTs\n# API source code: https://github.com/nessshon/subdomains-toolbox\nAPI_BASE_URL = \"https://your-domain.com/api/ton/\"\n\n# Metadata for the NFT collection\nCOLLECTION_METADATA = {\n    \"name\": f\"{DOMAIN_NAME.title()} DNS Domains\",\n    \"image\": f\"{API_BASE_URL}{DOMAIN_NAME}.png\",\n    \"description\": f\"*.{DOMAIN_NAME}.ton domains\",\n    \"prefix_uri\": API_BASE_URL,\n}\n\"\"\"\nExample of the metadata for the NFT collection (JSON format):\n{\n    \"name\": \"Ghost DNS Domains\",\n    \"image\": \"https://your-domain.com/api/ton/ghost.png\",\n    \"description\": \"*.ghost.ton domains\",\n    \"prefix_uri\": \"https://your-domain.com/api/ton/\"\n}\n\"\"\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = SubdomainCollection(\n        owner_address=wallet.address,\n        content=SubdomainCollectionContent(**COLLECTION_METADATA),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=wallet.address,\n        ),\n        full_domain=FullDomain(DOMAIN_NAME, \"ton\"),\n    )\n\n    tx_hash = await wallet.batch_transfer(\n        [\n            # Deploy collection\n            TransferMessage(\n                destination=collection.address,\n                amount=0.05,\n                body=collection.build_deploy_body(),\n                state_init=collection.state_init,\n            ),\n            # Bind Subdomain Collection to the main domain\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(collection.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_12","title":"\u0412\u044b\u043f\u0443\u0441\u043a \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d \u0432 \u0432\u0438\u0434\u0435 NFT:</p> <ol> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 TON-\u043a\u043e\u0448\u0435\u043b\u0451\u043a (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Tonkeeper).</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 0.1 TON \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 (\u043e\u043d \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0438).</li> <li>\u0412 \u043f\u043e\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043a \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>alice</code> \u0434\u043b\u044f <code>alice.ghost.ton</code>).</li> <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0438\u043c\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e (\u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b \u0438 \u0446\u0438\u0444\u0440\u044b, \u0431\u0435\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432) \u0438 \u0435\u0449\u0451 \u043d\u0435 \u0437\u0430\u043d\u044f\u0442\u043e.</li> <li>\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 NFT \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u0432 \u0432\u0430\u0448 \u043a\u043e\u0448\u0435\u043b\u0451\u043a.</li> </ol>"},{"location":"ru/cookbook/subdomains/#_13","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438","text":""},{"location":"ru/cookbook/subdomains/#_14","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","text":"<p>\u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0434\u043b\u044f NFT \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u0435\u043d \u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 TON DNS Domains. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0443 \u043e\u0434\u043d\u0443 \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u2014 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f.</p> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Wallet \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\nfrom pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# Address of the wallet to be set (e.g., UQ...)\nWALLET_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_wallet_record_body(Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Site \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# ADNL address (e.g., \"a1b2c3...\")\nADNL_ADDRESS = \"a1b2c3...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_site_record_body(ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Storage \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# Hex-encoded BAG ID (e.g., \"1234567890abcdef...\")\nBAG_ID = \"1234567890abcdef...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_storage_record_body(BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Next Resolver \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom pytoniq_core import Address\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# Address of the next resolver contract (e.g., EQ...)\nCONTRACT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_next_resolver_record_body(Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_15","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","text":"<p>\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430.</p> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Wallet \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_wallet_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Site \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_site_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Storage \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_storage_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Next Resolver \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the NFT subdomain (e.g., EQ...)\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_delete_next_resolver_record_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_16","title":"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":""},{"location":"ru/cookbook/subdomains/#_17","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430","text":"<p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 tonutils \u043d\u0430 Python. \u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442, \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0434\u043e\u043c\u0435\u043d\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043e\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.</p> <pre><code>import asyncio\nfrom pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Administrator address for managing the Subdomain Manager (e.g., UQ...)\nADMIN_ADDRESS = \"UQ...\"\n\n# NFT address of the main domain from TON DNS Domains collection (e.g., EQ...)\nDOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    subdomain_manager = SubdomainManager(Address(ADMIN_ADDRESS))\n\n    tx_hash = await wallet.batch_transfer(\n        [\n            # Deploy Subdomain Manager\n            TransferMessage(\n                destination=subdomain_manager.address,\n                amount=0.05,\n                state_init=subdomain_manager.state_init,\n            ),\n            # Bind Subdomain Manager to the main domain as a next resolver\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(subdomain_manager.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Manager at address: {subdomain_manager.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_18","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f.</p> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Wallet \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\nfrom pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Address of the wallet to be set for the subdomain (e.g., UQ...)\nWALLET_ADDRESS = \"UQ...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_wallet_record_body(SUBDOMAIN, Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Site \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# ADNL address for the subdomain (e.g., \"a1b2c3...\")\nADNL_ADDRESS = \"a1b2c3...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_site_record_body(SUBDOMAIN, ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Storage \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# ID of the storage bag (hex string, e.g., \"1234567890abcdef...\")\nBAG_ID = \"1234567890abcdef...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_storage_record_body(SUBDOMAIN, BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Next Resolver \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom pytoniq_core import Address\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Address of the next resolver contract (e.g., EQ...)\nCONTRACT_ADDRESS = \"EQ...\"\n\n# Subdomain to be registered (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_next_resolver_record_body(SUBDOMAIN, Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_19","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","text":"<p>\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430.</p> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Wallet \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_wallet_record_body(SUBDOMAIN)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Site \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_site_record_body(SUBDOMAIN, False)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Storage \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_storage_record_body(SUBDOMAIN, True)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> \u0423\u0434\u0430\u043b\u0438\u0442\u044c Next Resolver \u0437\u0430\u043f\u0438\u0441\u044c <pre><code>import asyncio\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network\nIS_TESTNET = True\n\n# Mnemonic phrase for the wallet (list of 24 words, e.g., [\"word1\", \"word2\", ...])\nMNEMONIC: list[str] = []\n\n# Address of the subdomain manager contract (e.g., EQ...)\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# Subdomain to be deleted (e.g., \"example\" for example.your-domain.ton)\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_delete_next_resolver_record_body(SUBDOMAIN)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/subdomains/#_20","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u0411\u043b\u043e\u043a\u0447\u0435\u0439\u043d TON \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0433\u0438\u0431\u043a\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 \u2014 \u0431\u0443\u0434\u044c \u0442\u043e \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0438\u043b\u0438 \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 NFT \u0441 \u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432. \u041e\u0431\u0435 \u0441\u0445\u0435\u043c\u044b \u043b\u0435\u0433\u043a\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043c\u043e\u0449\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 \u0438 DNS-\u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438. \u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0448\u0430\u0433\u0438 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043d\u0430\u0434 \u0432\u0430\u0448\u0438\u043c\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 \u0432 TON.</p>"},{"location":"ru/cookbook/subdomains/#_21","title":"\u0421\u043c. \u0422\u0430\u043a\u0436\u0435","text":"<ul> <li>TON Subdomains Toolbox</li> <li>Subdomain Manager Contract</li> <li>Subdomain Collection Contract</li> </ul>"},{"location":"ru/cookbook/tonconnect-integration/","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f TON Connect","text":""},{"location":"ru/cookbook/tonconnect-integration/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c TON Connect \u0432 Python-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code> \u2014 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0433\u043e SDK, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 TON. \u0412 \u043d\u0451\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 dApp-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438 TON.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":""},{"location":"ru/cookbook/tonconnect-integration/#_3","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pip install tonutils\n</code></pre> <p>\u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\u0445 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0430\u0439\u043b\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>aiofiles</code>:</p> <pre><code>pip install aiofiles\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#manifest","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Manifest","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>manifest.json</code> \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 \u0438 \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e \u043f\u043e \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u043c\u0443 URL.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_4","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430","text":"<p>\u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\u0445 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430\u043c\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <pre><code>import json\nimport os\nfrom asyncio import Lock\nfrom typing import Dict, Optional\n\nimport aiofiles\n\nfrom tonutils.tonconnect import IStorage\n\n\nclass FileStorage(IStorage):\n\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n        self.lock = Lock()\n\n        if not os.path.exists(self.file_path):\n            with open(self.file_path, \"w\") as f:\n                json.dump({}, f)  # type: ignore\n\n    async def _read_data(self) -&gt; Dict[str, str]:\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"r\") as f:\n                content = await f.read()\n                if content:\n                    return json.loads(content)\n                return {}\n\n    async def _write_data(self, data: Dict[str, str]) -&gt; None:\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"w\") as f:\n                await f.write(json.dumps(data, indent=4))\n\n    async def set_item(self, key: str, value: str) -&gt; None:\n        data = await self._read_data()\n        data[key] = value\n        await self._write_data(data)\n\n    async def get_item(self, key: str, default_value: Optional[str] = None) -&gt; Optional[str]:\n        data = await self._read_data()\n        return data.get(key, default_value)\n\n    async def remove_item(self, key: str) -&gt; None:\n        data = await self._read_data()\n        if key in data:\n            del data[key]\n            await self._write_data(data)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#ton-connect","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f TON Connect","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>TonConnect</code>, \u0443\u043a\u0430\u0437\u0430\u0432 URL \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430 \u0438 \u043e\u0431\u044a\u0435\u043a\u0442 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430:</p> <pre><code>from storage import FileStorage\nfrom tonutils.tonconnect import TonConnect\n\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\nTC_STORAGE = FileStorage(\"connection.json\")\n\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>wallets_fallback_file_path</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430\u0445 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Tonkeeper, Wallet) \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e API. \u0421\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0441\u044b\u043b\u043a\u0435.</p>"},{"location":"ru/cookbook/tonconnect-integration/#connector","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Connector","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>Connector</code> \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c:</p> <pre><code>connector = await tc.init_connector(user_id)\n</code></pre> <ul> <li><code>user_id</code> \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c (<code>int</code>) \u0438\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (<code>str</code>).</li> <li>\u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0435\u043d \u0438\u043d\u043a\u0440\u0435\u043c\u0435\u043d\u0442\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440.</li> <li>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c <code>user_id</code> \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</li> </ul> <pre><code>user_id = connector.user_id\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_5","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":""},{"location":"ru/cookbook/tonconnect-integration/#_6","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438 \u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432:</p> <pre><code>wallets = await tc.get_wallets()\n</code></pre> <p>\u0417\u0430\u0442\u0435\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u043c\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 <code>wallet.name</code>.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_7","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0443","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u044b\u0431\u0435\u0440\u0435\u0442 \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430, \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 (\u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430, \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c 1):</p> <pre><code>selected_wallet = wallets[1]\nconnect_url = await connector.connect_wallet(selected_wallet)\n</code></pre> <p>\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c <code>connect_url</code> \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.</p>"},{"location":"ru/cookbook/tonconnect-integration/#redirect-url","title":"\u0421 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Redirect URL","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>redirect_url</code>:</p> <pre><code>redirect_url = \"https://example.com/\"\nconnect_url = await connector.connect_wallet(selected_wallet, redirect_url=redirect_url)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#ton-proof","title":"\u0421 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c TON Proof","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043b\u0430\u0434\u0435\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>ton_proof</code>. \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443 (payload) \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 \u0435\u0451 \u0447\u0435\u0440\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>ton_proof</code>. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0435 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 payload \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0437\u0434\u0435\u0441\u044c.</p> <p>\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e <code>generate_proof_payload</code> \u0438\u0437 <code>tonutils</code>:</p> <pre><code>from tonutils.tonconnect.utils import generate_proof_payload\n\nredirect_url = \"https://example.com/\"\nproof_payload = generate_proof_payload()\nconnect_url = await connector.connect_wallet(\n    selected_wallet,\n    redirect_url=redirect_url,\n    ton_proof=proof_payload\n)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_8","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f","text":"<p>\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 <code>connect_wallet_context</code>.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430:</p> <pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.connect_wallet_context() as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the connection.\")\n        else:\n            print(f\"Connection error: {response.message}\")\n    else:\n        print(f\"Connected wallet: {response.account.address.to_str(is_bounceable=False)}\")\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 <code>ton_proof</code>:</p> <pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.connect_wallet_context() as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the connection.\")\n        else:\n            print(f\"Connection error: {response.message}\")\n    else:\n        if connector.wallet.verify_proof_payload(proof_payload):\n            print(f\"Connected wallet: {response.account.address.to_str(is_bounceable=False)}\")\n        else:\n            await connector.disconnect_wallet()\n            print(\"Proof verification failed.\")\n</code></pre> <p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430:</p> <ul> <li>\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442 \u043a\u043e\u0448\u0435\u043b\u0451\u043a;</li> <li>\u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0451\u0442 \u0442\u0430\u0439\u043c-\u0430\u0443\u0442;</li> <li>\u0438\u043b\u0438 \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0451\u0442 \u043e\u0448\u0438\u0431\u043a\u0430.</li> </ul> <p>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0445\u0430 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442 WalletInfo, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0451\u043d \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>TonConnectError</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043a\u0430\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_9","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":""},{"location":"ru/cookbook/tonconnect-integration/#_10","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c Toncoin \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>send_transaction</code>:</p> <pre><code>from tonutils.tonconnect.models import Transaction, Message\n\nrpc_request_id = await connector.send_transaction(\n    transaction=Transaction(\n        valid_until=int(time.time() + 5 * 60),\n        messages=[\n            Message(\n                address=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n                amount=str(int(1 * 1e9)),\n            )\n        ]\n    )\n)\n</code></pre> <ul> <li><code>valid_until</code> \u2013 \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445</li> <li><code>address</code> \u2013 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c \u0432 user-friendly \u0444\u043e\u0440\u043c\u0430\u0442\u0435</li> <li><code>amount</code> \u2013 \u0441\u0443\u043c\u043c\u0430 \u0432 \u043d\u0430\u043d\u043e\u0442\u043e\u043d\u0430\u0445</li> </ul> <p>\u041c\u0435\u0442\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>rpc_request_id</code> \u2014 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_11","title":"\u0423\u043f\u0440\u043e\u0449\u0451\u043d\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>tonutils</code> \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</p> <ul> <li>\u041f\u043e\u043b\u0435 <code>valid_until</code> \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0432\u043d\u0430 5 \u043c\u0438\u043d\u0443\u0442.</li> <li>\u041f\u043e\u043b\u0435 <code>address</code> \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043e \u043d\u0430 <code>destination</code> (\u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043b\u0438 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Address</code>).</li> <li>\u0421\u0443\u043c\u043c\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 TON, \u0430 \u043d\u0435 \u0432 \u043d\u0430\u043d\u043e\u0442\u043e\u043d\u0430\u0445.</li> <li> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>body</code> \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c:</p> </li> <li> <p>\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c <code>Cell</code> \u2014 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445;</p> </li> <li>\u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0438\u043b\u0438 \u043c\u0435\u043c\u043e;</li> </ul>"},{"location":"ru/cookbook/tonconnect-integration/#_12","title":"\u041e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434","text":"<pre><code>rpc_request_id = await connector.send_transfer(\n    destination=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n    amount=1,\n    body=\"Hello from tonutils!\",\n)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_13","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439:</p> <pre><code>max_messages = connector.device.get_max_supported_messages(connector.wallet)\n</code></pre> <p>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0435\u0440\u0441\u0438\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043b\u043e\u0433\u0438\u043a\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p> <pre><code>from tonutils.tonconnect.models.transfer import TransferMessage\n\nrpc_request_id = await connector.send_batch_transfer(\n    messages=[\n        TransferMessage(\n            destination=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n            amount=1,\n            body=\"Hello from tonutils!\",\n        ),\n        TransferMessage(\n            destination=\"UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\",\n            amount=2,\n            body=\"Hello from tonutils!\",\n        ),\n    ]\n)\n</code></pre> <p>\u042d\u0442\u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0430\u043a\u0436\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 <code>rpc_request_id</code>.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_14","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>sign_data</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043e\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042d\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u044f\u0432\u043d\u043e\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u0438\u0435 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u0430 \u0432\u043d\u0435 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u0430 \u0432 \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442.</p> <p>TON Connect \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u0440\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0434\u0430\u043d\u043d\u044b\u0445:</p>"},{"location":"ru/cookbook/tonconnect-integration/#_15","title":"\u0422\u0435\u043a\u0441\u0442","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u043c.</p> <ul> <li>\u041f\u043e\u043d\u044f\u0442\u043d\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e.</li> <li>\u0418\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439 \u0432\u043d\u0435 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430.</li> </ul> <pre><code>from tonutils.tonconnect.models import SignDataPayloadText\n\ntext = \"I confirm deletion of my account and all associated data.\"\npayload = SignDataPayloadText(text=text)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_16","title":"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0445\u044d\u0448\u0435\u0439, \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u043b\u0438 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e.</p> <ul> <li>\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u043a\u0432\u0438\u0442\u0430\u043d\u0446\u0438\u0439, \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u0438\u043b\u0438 \u043d\u0435\u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul> <pre><code>from tonutils.tonconnect.models import SignDataPayloadBinary\n\ndata = \"I confirm deletion of my account and all associated data.\".encode(\"utf-8\")\npayload = SignDataPayloadBinary(bytes=data)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_17","title":"\u042f\u0447\u0435\u0439\u043a\u0430","text":"<p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u0430 \u043d\u0430 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0435.</p> <ul> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 TL-B \u0441\u0445\u0435\u043c\u044b.</li> <li>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0432 \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435.</li> </ul> <pre><code>from pytoniq_core import begin_cell\nfrom tonutils.tonconnect.models import SignDataPayloadCell\n\ncomment = \"I confirm deletion of my account and all associated data.\"\ncell = begin_cell().store_uint(0, 32).store_snake_string(comment).end_cell()\nschema = \"text_comment#00000000 text:Snakedata = InMsgBody;\"\n\npayload = SignDataPayloadCell(cell=cell, schema=schema)\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u0438\u043f \u0432 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 TL-B \u0441\u0445\u0435\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_18","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443:</p> <pre><code>connector.device.verify_sign_data_feature(connector.wallet, payload)\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 <code>WalletNotSupportFeatureError</code>. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <pre><code>from tonutils.tonconnect.utils.exceptions import WalletNotSupportFeatureError\n\ntry:\n    connector.device.verify_sign_data_feature(connector.wallet, payload)\nexcept WalletNotSupportFeatureError:\n    print(\"Wallet does not support sign data feature!\")\n    # Handle fallback logic or abort\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0439\u0442\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430:</p> <pre><code>rpc_request_id = await connector.sign_data(payload)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_19","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0414\u043b\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e \u0438\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 <code>pending_request_context</code>.</p> <p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430:</p> <ul> <li>\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u0441\u0432\u043e\u0451\u043c \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435;</li> <li>\u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0451\u0442 \u0442\u0430\u0439\u043c-\u0430\u0443\u0442;</li> <li>\u0438\u043b\u0438 \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0451\u0442 \u043e\u0448\u0438\u0431\u043a\u0430.</li> </ul> <p>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0445\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u043e\u0442\u0432\u0435\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0442\u0438\u043f\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430:</p> <ul> <li><code>SendTransactionResponse</code></li> <li><code>SignDataResponse</code></li> </ul> <p>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f <code>TonConnectError</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043a\u0430\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_20","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.pending_request_context(rpc_request_id) as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the signing request.\")\n        else:\n            print(f\"Sign data error: {response.message}\")\n    else:\n        key = connector.wallet.account.public_key\n        if response.verify_sign_data(key):\n            print(\"Verified sign data!\")\n        else:\n            print(\"Failed to verify sign data!\")\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_21","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438","text":"<pre><code>from tonutils.tonconnect.utils.exceptions import TonConnectError, UserRejectsError\n\nasync with connector.pending_request_context(rpc_request_id) as response:\n    if isinstance(response, TonConnectError):\n        if isinstance(response, UserRejectsError):\n            print(\"The user rejected the transaction.\")\n        else:\n            print(f\"Transaction error: {response.message}\")\n    else:\n        print(f\"Transaction sent successfully! Hash: {response.normalized_hash}\")\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_22","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:</p> <pre><code>is_pending = connector.is_request_pending(rpc_request_id)\n</code></pre> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 <code>True</code>, \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0435\u0449\u0451 \u043d\u0435 \u0431\u044b\u043b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0451\u043d \u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f; \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f <code>False</code>.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_23","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435:</p> <pre><code>connector.cancel_pending_request(rpc_request_id)\n</code></pre> <p>\u042d\u0442\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0437\u0436\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442 \u0435\u0433\u043e \u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_24","title":"\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>disconnect_wallet</code>:</p> <pre><code>await connector.disconnect_wallet()\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_25","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439","text":"<p>\u041f\u043e\u043c\u0438\u043c\u043e \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0445 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u0432, tonutils \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0434\u0438\u043d\u044b\u0439 \u0441\u043e\u0431\u044b\u0442\u0438\u0439\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_26","title":"\u0422\u0438\u043f\u044b \u0441\u043e\u0431\u044b\u0442\u0438\u0439","text":"<p>TON Connect \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439:</p>"},{"location":"ru/cookbook/tonconnect-integration/#_27","title":"\u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f","text":"<p>\u042d\u0442\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f:</p> <ul> <li> <p><code>Event.CONNECT</code> \u2014 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: <code>user_id: int</code>, <code>wallet: WalletInfo</code></p> </li> <li> <p><code>Event.DISCONNECT</code> \u2014 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043e\u0442\u043a\u043b\u044e\u0447\u0451\u043d. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: <code>user_id: int</code>, <code>wallet: WalletInfo</code></p> </li> <li> <p><code>Event.TRANSACTION</code> \u2014 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044e. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: <code>user_id: int</code>, <code>transaction: SendTransactionResponse</code>, <code>rpc_request_id: int</code></p> </li> <li> <p><code>Event.SIGN_DATA</code> \u2014 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0434\u043e\u0431\u0440\u0438\u043b \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: <code>user_id: int</code>, <code>sign_data: SignDataResponse</code>, <code>rpc_request_id: int</code></p> </li> </ul>"},{"location":"ru/cookbook/tonconnect-integration/#_28","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a","text":"<p>\u042d\u0442\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0431\u043e\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u2014 \u0438\u0437-\u0437\u0430 \u043e\u0442\u043a\u0430\u0437\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u0430 \u0438\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430/\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</p> <ul> <li><code>EventError.CONNECT</code> \u2014 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.</li> <li><code>EventError.DISCONNECT</code> \u2014 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.</li> <li><code>EventError.TRANSACTION</code> \u2014 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</li> <li><code>EventError.SIGN_DATA</code> \u2014 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul> <p>\u0412\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442:</p> <ul> <li><code>user_id: int</code></li> <li><code>error: TonConnectError</code></li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0412\u0441\u0435 \u0442\u0438\u043f\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f <code>register_event</code> \u0438\u043b\u0438 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. \u0422\u0430\u043a\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0447\u0451\u0442\u043a\u043e \u043e\u0442\u0434\u0435\u043b\u044f\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0443\u0441\u043f\u0435\u0445\u0430 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_29","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438:</p>"},{"location":"ru/cookbook/tonconnect-integration/#_30","title":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430","text":"<pre><code>def on_transaction(user_id: int, transaction: SendTransactionResponse):\n    print(f\"Transaction received for user {user_id}\")\n\ntc.register_event(Event.TRANSACTION, on_transaction)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_31","title":"\u0421 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u0432","text":"<pre><code>@tc.on_event(Event.TRANSACTION)\nasync def on_transaction(user_id: int, transaction: SendTransactionResponse):\n    print(f\"Transaction confirmed for user {user_id}\")\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_32","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","text":"<p>\u041f\u043e\u043c\u0438\u043c\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0435\u0441\u0441\u0438\u044e \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438) \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_33","title":"\u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u044e:","text":"<p>\u0412\u044b\u0437\u043e\u0432\u0438\u0442\u0435 <code>add_event_kwargs</code> \u0434\u043e \u0432\u0445\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0438\u043b\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430:</p> <pre><code>connector.add_event_kwargs(\n    event=Event.CONNECT,\n    comment=\"Hello from tonutils!\",\n    db_session=session,\n)\n</code></pre> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a:</p> <pre><code>@tc.on_event(Event.CONNECT)\nasync def on_connect(user_id: int, wallet: WalletInfo, comment: str, db_session: Session):\n    ...\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_34","title":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439:","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 <code>connector</code>:</p> <pre><code>tc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\ntc[\"db_session\"] = session\ntc[\"comment\"] = \"Shared message\"\n</code></pre> <p>\u042d\u0442\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432\u043e \u0432\u0441\u0435\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439:</p> <pre><code>@tc.on_event(Event.SIGN_DATA)\nasync def on_sign_data(user_id: int, sign_data: SignDataResponse, db_session: Session, comment: str):\n    ...\n</code></pre>"},{"location":"ru/cookbook/tonconnect-integration/#_35","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":"<p>\u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 TON Connect \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u043a\u0430\u043a \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430, \u0442\u0430\u043a \u0438 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_36","title":"\u041e\u0448\u0438\u0431\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f","text":"<p>\u042d\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0443:</p> \u041a\u043e\u0434 \u041e\u0448\u0438\u0431\u043a\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 0 <code>UnknownError</code> \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. 1 <code>BadRequestError</code> \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d \u0438\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. 2 <code>ManifestNotFoundError</code> \u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 <code>manifest_url</code> \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0438\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. 3 <code>ManifestContentError</code> \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438\u043b\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. 100 <code>UnknownAppError</code> \u041e\u0448\u0438\u0431\u043a\u0430 \u043b\u043e\u0433\u0438\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. 300 <code>UserRejectsError</code> \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e. 400 <code>MethodNotSupportedError</code> \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434. 500 <code>RequestTimeoutError</code> \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u0440\u043e\u043a."},{"location":"ru/cookbook/tonconnect-integration/#_37","title":"\u041e\u0448\u0438\u0431\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432","text":"<p>\u042d\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</p> \u041a\u043e\u0434 \u041e\u0448\u0438\u0431\u043a\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 0 <code>UnknownError</code> \u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. 1 <code>BadRequestError</code> \u0417\u0430\u043f\u0440\u043e\u0441 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0435\u043d \u0438\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. 100 <code>UnknownAppError</code> \u041e\u0448\u0438\u0431\u043a\u0430 \u043b\u043e\u0433\u0438\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. 300 <code>UserRejectsError</code> \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u043e\u043d\u0438\u043b \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u043b\u0438 \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. 400 <code>MethodNotSupportedError</code> \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c\u0443\u044e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434. 500 <code>RequestTimeoutError</code> \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u0440\u043e\u043a."},{"location":"ru/cookbook/tonconnect-integration/#_38","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>TON Connect \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430\u043c\u0438 \u0432 \u0441\u0435\u0442\u0438 TON. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u043e\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043b\u0435\u0433\u043a\u043e \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0432 Python-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p>"},{"location":"ru/cookbook/tonconnect-integration/#_39","title":"\u0421\u043c. \u0422\u0430\u043a\u0436\u0435","text":"<ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f TON Connect</li> <li>Telegram-\u0431\u043e\u0442 \u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0435\u0439 TON Connect</li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/","title":"Telegram-\u0431\u043e\u0442 \u0441 TON Connect","text":""},{"location":"ru/cookbook/tonconnect-telegram/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c TON Connect \u0432 Telegram-\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code> \u2014 Python SDK \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 TON.</p> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u043e\u0442\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:</p> <ul> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 QR-\u043a\u043e\u0434 \u0438\u043b\u0438 \u0441\u0441\u044b\u043b\u043a\u0443</li> <li>\u041f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439</li> </ul> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043f\u0440\u0430\u043a\u0442\u0438\u043a: \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439, \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u0441\u043f\u0430\u043c\u0430, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043d\u0430 inline-\u043a\u043d\u043e\u043f\u043a\u0430\u0445.</p> <p>Tip</p> <p>\u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0420\u0435\u0446\u0435\u043f\u0442\u044b: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f TON Connect</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_2","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#telegram-","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Telegram-\u0431\u043e\u0442\u0430","text":"<ol> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 @BotFather \u0432 Telegram.</li> <li>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>/newbot</code> \u0438 \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c.</li> <li>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0431\u043e\u0442\u0430.</li> </ol>"},{"location":"ru/cookbook/tonconnect-telegram/#tonconnect","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0430 TonConnect","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 JSON-\u0444\u0430\u0439\u043b, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0439 \u0432\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u042d\u0442\u043e\u0442 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435 \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438.</p> <pre><code>{\n  \"url\": \"&lt;app-url&gt;\",                        // required\n  \"name\": \"&lt;app-name&gt;\",                      // required\n  \"iconUrl\": \"&lt;app-icon-url&gt;\",               // required\n  \"termsOfUseUrl\": \"&lt;terms-of-use-url&gt;\",     // optional\n  \"privacyPolicyUrl\": \"&lt;privacy-policy-url&gt;\" // optional\n}\n</code></pre> <p>Note</p> <p>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0444\u0430\u0439\u043b \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e-\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u043e \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442\u0443.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_3","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>requirements.txt</code> \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c:</p> <pre><code>aiogram~=3.20.0\ncachetools==5.5.2\nenvirons==14.2.0\nredis==6.2.0\ntonutils==0.4.4\n</code></pre> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0432\u0441\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_4","title":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b <code>.env</code> \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435:</p> <pre><code>BOT_TOKEN=\u0432\u0430\u0448_\u0442\u043e\u043a\u0435\u043d_\u0431\u043e\u0442\u0430\nREDIS_DSN=redis://localhost:6379/0\nTC_MANIFEST=https://\u0432\u0430\u0448-\u0434\u043e\u043c\u0435\u043d/manifest.json\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:</p> <ul> <li><code>BOT_TOKEN</code> \u2014 \u0442\u043e\u043a\u0435\u043d Telegram-\u0431\u043e\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 @BotFather.</li> <li><code>REDIS_DSN</code> \u2014 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis, \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0439 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439.</li> <li><code>TC_MANIFEST</code> \u2014 HTTPS-\u0441\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u043c\u0430\u043d\u0438\u0444\u0435\u0441\u0442 TON Connect.</li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/#_5","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<pre><code>\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 utils/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u251c\u2500\u2500 keyboards.py\n    \u2502   \u251c\u2500\u2500 models.py\n    \u2502   \u251c\u2500\u2500 storage.py\n    \u2502   \u2514\u2500\u2500 windows.py\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 __main__.py\n    \u251c\u2500\u2500 events.py\n    \u251c\u2500\u2500 handlers.py\n    \u251c\u2500\u2500 middlewares.py\n    \u2514\u2500\u2500 session_manager.py\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_6","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0420\u0430\u0437\u0434\u0435\u043b \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0438. \u0414\u0430\u043b\u0435\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0438\u0445 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_7","title":"\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0424\u0430\u0439\u043b: <code>src/utils/models.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430:</p> <ul> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 <code>.env</code> \u0444\u0430\u0439\u043b\u0430.</li> <li>\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Context</code>, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438.</li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/#context","title":"\u0421\u043e\u0441\u0442\u0430\u0432 <code>Context</code>","text":"<ul> <li><code>bot: Bot</code> \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 Telegram-\u0431\u043e\u0442\u0430 (<code>aiogram</code>).</li> <li><code>state: FSMContext</code> \u2014 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li><code>tc: TonConnect</code> \u2014 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 TON Connect.</li> <li><code>connector: Connector</code> \u2014 \u0441\u0435\u0441\u0441\u0438\u044f, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e ID.</li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/#_8","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":"<ul> <li>\u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>Config.load()</code> \u2014 \u043e\u043d \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438\u0437 <code>.env</code>.</li> <li>\u0412 middleware \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 <code>Context</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0443\u0436\u043d\u044b\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c.</li> </ul> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom aiogram import Bot\nfrom aiogram.fsm.context import FSMContext\nfrom environs import Env\nfrom tonutils.tonconnect import TonConnect, Connector\n\n\n@dataclass\nclass Context:\n    \"\"\"\n    Aggregated context object passed throughout the bot's logic.\n\n    :param bot: The bot instance used to send and receive messages.\n    :param state: Finite State Machine context for user session management.\n    :param tc: Instance of TonConnect for managing wallet connections.\n    :param connector: Connector used to communicate with a specific wallet.\n    \"\"\"\n    bot: Bot\n    state: FSMContext\n    tc: TonConnect\n    connector: Connector\n\n\n@dataclass\nclass Config:\n    \"\"\"\n    Configuration data loaded from the environment.\n\n    :param BOT_TOKEN: Telegram bot token.\n    :param REDIS_DSN: Redis connection string for FSM or other caching.\n    :param TC_MANIFEST: URL to the TonConnect manifest file.\n    \"\"\"\n    BOT_TOKEN: str\n    REDIS_DSN: str\n    TC_MANIFEST: str\n\n    @classmethod\n    def load(cls) -&gt; Config:\n        \"\"\"\n        Loads configuration from environment variables using .env file.\n\n        :return: An instance of Config populated with environment values.\n        \"\"\"\n        env = Env()\n        env.read_env()\n\n        return cls(\n            BOT_TOKEN=env.str(\"BOT_TOKEN\"),\n            REDIS_DSN=env.str(\"REDIS_DSN\"),\n            TC_MANIFEST=env.str(\"TC_MANIFEST\"),\n        )\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_9","title":"\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439","text":"<p>\u0424\u0430\u0439\u043b: <code>src/utils/storage.py</code></p> <p>\u0412 \u0432\u0435\u0431-\u0432\u0435\u0440\u0441\u0438\u0438 TON Connect \u0441\u0435\u0441\u0441\u0438\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 <code>localStorage</code>. \u041e\u0434\u043d\u0430\u043a\u043e \u0432 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u0435 \u043d\u0430 Python \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f.</p> <p>\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Redis: \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a Telegram ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_10","title":"\u0417\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0434\u0443\u043b\u044f","text":"<ul> <li>\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 TON Connect \u043f\u043e Telegram ID.</li> <li>\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0441\u0441\u0438\u0438 \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>\u0423\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u0438 \u043f\u0440\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0435.</li> </ul> <p>\u0422\u0430\u043a\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043d\u0430\u0434\u0451\u0436\u043d\u043e\u0435 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0441\u0441\u0438\u044f\u043c\u0438.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from typing import Optional\n\nfrom redis.asyncio import Redis\nfrom tonutils.tonconnect import IStorage\n\n\nclass RedisStorage(IStorage):\n    \"\"\"\n    Redis-based implementation of the IStorage interface.\n    Used for storing TonConnect session data.\n\n    :param redis_client: Redis connection instance.\n    \"\"\"\n\n    def __init__(self, redis_client: Redis):\n        self.redis = redis_client\n\n    async def set_item(self, key: str, value: str) -&gt; None:\n        \"\"\"\n        Store a key-value pair in Redis.\n\n        :param key: The key to store.\n        :param value: The value to associate with the key.\n        \"\"\"\n        async with self.redis.client() as client:\n            await client.set(name=key, value=value)\n\n    async def get_item(self, key: str, default_value: Optional[str] = None) -&gt; Optional[str]:\n        \"\"\"\n        Retrieve a value from Redis by key.\n\n        :param key: The key to retrieve.\n        :param default_value: Value to return if key is not found.\n        :return: Retrieved value or default_value.\n        \"\"\"\n        async with self.redis.client() as client:\n            value = await client.get(name=key)\n            return value if value else default_value\n\n    async def remove_item(self, key: str) -&gt; None:\n        \"\"\"\n        Remove a key-value pair from Redis.\n\n        :param key: The key to remove.\n        \"\"\"\n        async with self.redis.client() as client:\n            await client.delete(key)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_11","title":"\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<p>\u0424\u0430\u0439\u043b: <code>src/utils/__init__.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043d\u043e\u0432\u043e\u0433\u043e. \u042d\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0447\u0438\u0441\u0442\u044b\u0439, \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_12","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ul> <li>\u0412 FSM-\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f <code>message_id</code> \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430.</li> <li>\u041f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043d\u043e\u0432\u043e\u0433\u043e \u0431\u043e\u0442 \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</li> <li>\u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0435\u0433\u043e <code>message_id</code> \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043e\u0447\u0438\u0441\u0442\u043a\u0438.</li> </ul> <p>\u042d\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432 \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c UI (inline-\u043a\u043d\u043e\u043f\u043a\u0438, \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c\u044b\u0435 \u043e\u043a\u043d\u0430).</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from contextlib import suppress\n\nfrom .models import Context\n\n\nasync def delete_last_message(context: Context, user_id: int, message_id: int) -&gt; None:\n    \"\"\"\n    Delete the previously stored message and store the new one for future cleanup.\n\n    :param context: Current context with bot and FSM state.\n    :param user_id: Telegram user ID.\n    :param message_id: New message ID to store.\n    \"\"\"\n    state_data = await context.state.get_data()\n    last_message_id = state_data.get(\"last_message_id\")\n\n    if last_message_id is not None:\n        with suppress(Exception):\n            await context.bot.delete_message(chat_id=user_id, message_id=last_message_id)\n\n    await context.state.update_data(last_message_id=message_id)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_13","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b","text":"<p>\u0424\u0430\u0439\u043b: <code>src/utils/keyboards.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 inline-\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0431\u043e\u0442\u043e\u043c. \u041e\u043d \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0443\u0434\u043e\u0431\u043d\u0443\u044e \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044e \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_14","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440","text":"<ul> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0441 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</li> <li>\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u2014 \u043a\u043d\u043e\u043f\u043a\u0438 \u0434\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438\u043b\u0438 \u043e\u0442\u043c\u0435\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430.</li> <li>\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e \u2014 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430, \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.</li> <li>\u0412\u044b\u0431\u043e\u0440 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u2014 \u0442\u0435\u043a\u0441\u0442, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u0438\u043b\u0438 \u044f\u0447\u0435\u0439\u043a\u0430.</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u0432 \u043c\u0435\u043d\u044e \u2014 \u043a\u043d\u043e\u043f\u043a\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d.</li> </ul> <p>\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e\u0434 \u0440\u0430\u0437\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from typing import List\n\nfrom aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup\nfrom aiogram.utils.keyboard import InlineKeyboardBuilder\nfrom tonutils.tonconnect.models import WalletApp\n\n\ndef connect_wallet(wallets: List[WalletApp], selected_wallet: WalletApp, connect_url: str) -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard for selecting a wallet and connecting it.\n\n    :param wallets: List of available wallet apps.\n    :param selected_wallet: Currently selected wallet app.\n    :param connect_url: Connection URL for the selected wallet.\n    :return: Inline keyboard with wallet selection and connect button.\n    \"\"\"\n    wallets_button = [\n        InlineKeyboardButton(\n            text=f\"\u2022 {wallet.name} \u2022\" if wallet.app_name == selected_wallet.app_name else wallet.name,\n            callback_data=f\"app_wallet:{wallet.app_name}\",\n        ) for wallet in wallets\n    ]\n    connect_wallet_button = InlineKeyboardButton(\n        text=f\"Connect {selected_wallet.name}\",\n        url=connect_url,\n    )\n    builder = InlineKeyboardBuilder()\n    builder.row(connect_wallet_button)\n    builder.row(*wallets_button, width=2)\n\n    return builder.as_markup()\n\n\ndef confirm_request(url: str, wallet_name: str) -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard to confirm or cancel the current request.\n\n    :param url: URL to open the wallet for confirmation.\n    :param wallet_name: Name of the wallet.\n    :return: Inline keyboard with confirm and cancel buttons.\n    \"\"\"\n    return InlineKeyboardMarkup(\n        inline_keyboard=[\n            [InlineKeyboardButton(text=f\"Open {wallet_name}\", url=url)],\n            [InlineKeyboardButton(text=\"Cancel\", callback_data=\"cancel_transaction\")],\n        ]\n    )\n\n\ndef choose_action() -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build the main menu keyboard for wallet actions.\n\n    :return: Inline keyboard with wallet action options.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.row(InlineKeyboardButton(text=\"Send Transaction\", callback_data=\"send_transaction\"))\n    builder.row(InlineKeyboardButton(text=\"Send Batch Transaction\", callback_data=\"send_batch_transaction\"))\n    builder.row(InlineKeyboardButton(text=\"Send Sign Data Request\", callback_data=\"send_sign_data_request\"))\n    builder.row(InlineKeyboardButton(text=\"Disconnect Wallet\", callback_data=\"disconnect_wallet\"))\n\n    return builder.as_markup()\n\n\ndef choose_sign_data_type() -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard to choose a sign data format.\n\n    :return: Inline keyboard with sign data format options.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"Text\", callback_data=\"send_sign_data_request:text\"))\n    builder.add(InlineKeyboardButton(text=\"Binary\", callback_data=\"send_sign_data_request:binary\"))\n    builder.add(InlineKeyboardButton(text=\"Cell\", callback_data=\"send_sign_data_request:cell\"))\n    builder.row(InlineKeyboardButton(text=\"Main Menu\", callback_data=\"main_menu\"))\n\n    return builder.as_markup()\n\n\ndef go_to_main_menu() -&gt; InlineKeyboardMarkup:\n    \"\"\"\n    Build a keyboard with a single button to return to the main menu.\n\n    :return: Inline keyboard with a main menu button.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.row(InlineKeyboardButton(text=\"Main Menu\", callback_data=\"main_menu\"))\n\n    return builder.as_markup()\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_15","title":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043d\u044b\u0435 \u043e\u043a\u043d\u0430","text":"<p>\u0424\u0430\u0439\u043b: <code>src/utils/windows.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438 inline-\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0432 Telegram-\u0447\u0430\u0442\u0435. \u041e\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043d\u044b\u0435 \"\u044d\u043a\u0440\u0430\u043d\u044b\" \u2014 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0451\u043d\u043d\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_16","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","text":"<ul> <li>\u042d\u043a\u0440\u0430\u043d \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u2014 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 <code>ton_proof</code>, \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u0441\u044b\u043b\u043a\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 QR-\u043a\u043e\u0434.</li> <li>\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e \u2014 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430, \u043f\u043e\u0434\u043f\u0438\u0441\u044c, \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.</li> <li>\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u2014 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435.</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u2014 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0445\u0435\u0448\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443.</li> <li>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u2014 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u0438\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u043c\u0435\u043d\u044e.</li> </ul> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>import base64\nimport json\n\nfrom aiogram.types import InlineKeyboardButton\nfrom aiogram.utils.keyboard import InlineKeyboardBuilder\nfrom aiogram.utils.markdown import hide_link, hblockquote, hbold\nfrom tonutils.tonconnect.models import Event, SendTransactionResponse, SignDataResponse\nfrom tonutils.tonconnect.utils import generate_proof_payload\n\nfrom ..utils import Context, delete_last_message\nfrom ..utils import keyboards\n\n\nasync def connect_wallet(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Show wallet selection and QR code for connection.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    state_data = await context.state.get_data()\n    wallets = await context.tc.get_wallets()\n    selected_wallet_name = state_data.get(\"selected_wallet\", wallets[0].app_name)\n\n    selected_wallet = next((w for w in wallets if w.app_name == selected_wallet_name), wallets[0])\n    redirect_url = \"https://t.me/tonconnect_demo_bot\"\n    ton_proof = generate_proof_payload()\n\n    await context.state.update_data(ton_proof=ton_proof)\n    context.connector.add_event_kwargs(Event.CONNECT, state=context.state)\n\n    connect_url = await context.connector.connect_wallet(\n        wallet_app=selected_wallet,\n        redirect_url=redirect_url,\n        ton_proof=ton_proof,\n    )\n\n    qrcode_url = (\n        f\"https://qrcode.ness.su/create?\"\n        f\"box_size=20&amp;border=7&amp;image_padding=20\"\n        f\"&amp;data={base64.b64encode(connect_url.encode()).decode()}\"\n        f\"&amp;image_url={base64.b64encode(selected_wallet.image.encode()).decode()}\"\n    )\n\n    text = f\"{hide_link(qrcode_url)}&lt;b&gt;Connect your wallet!&lt;/b&gt;\"\n    reply_markup = keyboards.connect_wallet(wallets, selected_wallet, connect_url)\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def wallet_connected(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Show connected wallet address and main menu.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    wallet_address = context.connector.wallet.account.address.to_str(is_bounceable=False)\n    reply_markup = keyboards.choose_action()\n    text = f\"&lt;b&gt;Connected wallet:&lt;/b&gt;\\n{hblockquote(wallet_address)}\\n\\nChoose an action:\"\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def send_request(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Prompt user to confirm the request in wallet.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    reply_markup = keyboards.confirm_request(\n        url=context.connector.wallet_app.direct_url,\n        wallet_name=context.connector.wallet_app.name,\n    )\n    text = \"&lt;b&gt;Please confirm the request in your wallet.&lt;/b&gt;\"\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def transaction_sent(context: Context, user_id: int, transaction: SendTransactionResponse) -&gt; None:\n    \"\"\"\n    Show transaction confirmation and details.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    :param transaction: Transaction result.\n    \"\"\"\n    text = (\n        \"&lt;b&gt;Transaction sent!&lt;/b&gt;\\n\\n\"\n        f\"Normalized hash:\\n{hblockquote(transaction.normalized_hash)}\\n\"\n        f\"BoC:\\n{hblockquote(transaction.boc)}\\n\"\n    )\n    reply_markup = keyboards.go_to_main_menu()\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def choose_sign_data_type(context: Context, user_id: int) -&gt; None:\n    \"\"\"\n    Show menu to select data type for signing.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    \"\"\"\n    text = \"&lt;b&gt;Choose the type of data you want to sign:&lt;/b&gt;\"\n    reply_markup = keyboards.choose_sign_data_type()\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def sign_data_sent(context: Context, user_id: int, sign_data: SignDataResponse) -&gt; None:\n    \"\"\"\n    Show signed data result and verification.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    :param sign_data: Sign data result.\n    \"\"\"\n    is_signed = sign_data.verify_sign_data(context.connector.account.public_key)\n\n    if is_signed:\n        text = (\n            \"&lt;b&gt;Data successfully signed!&lt;/b&gt;\\n\\n\"\n            f\"Payload:\\n{hblockquote(json.dumps(sign_data.result.payload.to_dict(), indent=4))}\"\n        )\n    else:\n        text = (\n            \"&lt;b&gt;Failed to verify the signed data.&lt;/b&gt;\\n\"\n            \"The signature may be invalid or tampered.\"\n        )\n\n    reply_markup = keyboards.go_to_main_menu()\n\n    message = await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n\n\nasync def error(context: Context, user_id: int, message_text: str, button_text: str, callback_data: str) -&gt; None:\n    \"\"\"\n    Show error message with a retry button.\n\n    :param context: Execution context.\n    :param user_id: Telegram user ID.\n    :param message_text: Text to show in the error message.\n    :param button_text: Text for the retry button.\n    :param callback_data: Callback data for retry action.\n    \"\"\"\n    builder = InlineKeyboardBuilder()\n    builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))\n    reply_markup = builder.as_markup()\n\n    message = await context.bot.send_message(chat_id=user_id, text=hbold(message_text), reply_markup=reply_markup)\n    await delete_last_message(context, user_id, message.message_id)\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_17","title":"\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0441\u0435\u0441\u0441\u0438\u0439","text":"<p>\u0424\u0430\u0439\u043b: <code>src/session_manager.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0444\u043e\u043d\u043e\u0432\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 SSE-\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f TON Connect, \u0441\u043d\u0438\u0436\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0443.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_18","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b","text":"<ul> <li>\u041c\u0435\u0442\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 Redis \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 (<code>ZSET</code>).</li> <li>\u0421 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0434\u043e\u043b\u044c\u0448\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (<code>session_lifetime</code>).</li> <li>\u0414\u043b\u044f \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 <code>pause_sse()</code> \u043d\u0430 \u0438\u0445 \u043a\u043e\u043d\u043d\u0435\u043a\u0442\u043e\u0440\u0435, \u0447\u0442\u043e \u043e\u0441\u0432\u043e\u0431\u043e\u0436\u0434\u0430\u0435\u0442 \u0440\u0435\u0441\u0443\u0440\u0441\u044b.</li> <li>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 Redis.</li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/#_19","title":"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438","text":"<ul> <li><code>session_lifetime</code> \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 1 \u0447\u0430\u0441.</li> <li><code>check_interval</code> \u2014 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 10 \u043c\u0438\u043d\u0443\u0442.</li> <li><code>redis_key</code> \u2014 \u043a\u043b\u044e\u0447 Redis, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438.</li> </ul> <p>\u042d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043f\u043e\u043b\u0435\u0437\u0435\u043d \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u0441\u0440\u0435\u0434\u0435, \u0433\u0434\u0435 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u044b\u043c\u0438.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>import asyncio\nimport time\nfrom contextlib import suppress\n\nfrom redis.asyncio import Redis\nfrom tonutils.tonconnect import TonConnect\n\n\nclass TonConnectSessionManager:\n    \"\"\"\n    Closes inactive TonConnect sessions using Redis-based activity tracking.\n    \"\"\"\n\n    def __init__(\n            self,\n            redis: Redis,\n            tc: TonConnect,\n            session_lifetime: int = 3600,\n            check_interval: int = 600,\n            redis_key: str = \"tonconnect:last_seen\",\n    ) -&gt; None:\n        \"\"\"\n        :param redis: Redis client instance.\n        :param tc: TonConnect instance.\n        :param session_lifetime: Inactivity threshold in seconds.\n        :param check_interval: Interval between cleanup runs in seconds.\n        :param redis_key: Redis sorted set key for storing user activity.\n        \"\"\"\n        self.redis = redis\n        self.tc = tc\n        self.session_lifetime = session_lifetime\n        self.check_interval = check_interval\n        self.redis_key = redis_key\n        self._running = False\n\n    async def update(self, user_id: int) -&gt; None:\n        \"\"\"\n        Register user activity by storing a timestamp in Redis.\n\n        :param user_id: Telegram user ID.\n        \"\"\"\n        await self.redis.zadd(self.redis_key, {str(user_id): time.time()})\n\n    async def _cleanup(self, cutoff: float) -&gt; None:\n        \"\"\"\n        Close sessions for users inactive since the given timestamp.\n\n        :param cutoff: UNIX timestamp used as inactivity threshold.\n        \"\"\"\n        user_ids = await self.redis.zrangebyscore(\n            self.redis_key, min=0, max=cutoff, start=0, num=100\n        )\n        if not user_ids:\n            return\n\n        for raw_id in user_ids:\n            user_id = int(raw_id)\n            connector = await self.tc.get_connector(user_id)\n            if connector and connector.connected and not connector.bridge.is_session_closed:\n                with suppress(Exception):\n                    await connector.bridge.pause_sse()\n\n            await self.redis.zrem(self.redis_key, user_id)\n\n    async def start(self) -&gt; None:\n        \"\"\"\n        Launch the background task for periodic session cleanup.\n        \"\"\"\n        self._running = True\n        while self._running:\n            cutoff = time.time() - self.session_lifetime\n            await self._cleanup(cutoff)\n\n            await asyncio.sleep(self.check_interval)\n\n    def run(self) -&gt; None:\n        loop = asyncio.get_running_loop()\n        loop.create_task(self.start())\n\n    def stop(self) -&gt; None:\n        \"\"\"\n        Stop the background cleanup loop.\n        \"\"\"\n        self._running = False\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_20","title":"\u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u043b\u043e\u0438","text":"<p>\u0424\u0430\u0439\u043b: <code>src/middlewares.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0432\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u044f (<code>middleware</code>) \u0434\u043b\u044f Telegram-\u0431\u043e\u0442\u0430:</p>"},{"location":"ru/cookbook/tonconnect-telegram/#contextmiddleware","title":"ContextMiddleware","text":"<ul> <li>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 <code>Context</code> \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438.</li> <li>\u0422\u0430\u043a\u0436\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043a\u0443 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u2014 \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f.</li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/#throttlingmiddleware","title":"ThrottlingMiddleware","text":"<ul> <li>\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u0441\u043f\u0430\u043c\u0430.</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 TTL-\u043a\u0435\u0448, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> </ul> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from contextlib import suppress\nfrom typing import Callable, Dict, Any, Awaitable, Optional\n\nfrom aiogram import BaseMiddleware, Bot, Dispatcher\nfrom aiogram.fsm.context import FSMContext\nfrom aiogram.types import TelegramObject, User\nfrom cachetools import TTLCache\nfrom tonutils.tonconnect import TonConnect\n\nfrom .session_manager import TonConnectSessionManager\nfrom .utils.models import Context\n\n\nclass ContextMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware to inject a custom Context object into handler data.\n    \"\"\"\n\n    def __init__(self, tc_session_manager: TonConnectSessionManager) -&gt; None:\n        self.tc_session_manager = tc_session_manager\n\n    async def __call__(\n            self,\n            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],\n            event: TelegramObject,\n            data: Dict[str, Any],\n    ) -&gt; Any:\n        \"\"\"\n        Inject context if event is from a valid user.\n\n        :param handler: Event handler to call next.\n        :param event: Incoming Telegram update.\n        :param data: Handler context data.\n        :return: Handler result.\n        \"\"\"\n        user: User = data.get(\"event_from_user\")\n\n        if user and not user.is_bot:\n            await self.tc_session_manager.update(user.id)\n\n            bot: Bot = data.get(\"bot\")\n            tc: TonConnect = data.get(\"tc\")\n            state: FSMContext = data.get(\"state\")\n            connector = await tc.init_connector(user.id)\n\n            context = Context(\n                bot=bot,\n                state=state,\n                tc=tc,\n                connector=connector,\n            )\n\n            tc[\"context\"] = context\n            data[\"context\"] = context\n\n        return await handler(event, data)\n\n\nclass ThrottlingMiddleware(BaseMiddleware):\n    \"\"\"\n    Middleware to prevent spam by throttling user input.\n    \"\"\"\n\n    def __init__(self, ttl: float = 0.7) -&gt; None:\n        \"\"\"\n        :param ttl: Time-to-live in seconds for each user.\n        \"\"\"\n        self.cache = TTLCache(maxsize=10_000, ttl=ttl)\n\n    async def __call__(\n            self,\n            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],\n            event: TelegramObject,\n            data: Dict[str, Any],\n    ) -&gt; Optional[Any]:\n        \"\"\"\n        Block repeated events from the same user within TTL.\n\n        :param handler: Event handler to call next.\n        :param event: Incoming Telegram update.\n        :param data: Handler context data.\n        :return: Handler result or None if throttled.\n        \"\"\"\n        user: Optional[User] = data.get(\"event_from_user\")\n\n        if user and user.id in self.cache:\n            with suppress(Exception):\n                await getattr(event, \"message\", None).delete()\n            return None\n\n        if user:\n            self.cache[user.id] = None\n\n        return await handler(event, data)\n\n\ndef register_middlewares(dp: Dispatcher) -&gt; None:\n    \"\"\"\n    Register all middlewares in the dispatcher.\n\n    :param dp: Aiogram dispatcher instance.\n    \"\"\"\n    dp.update.middleware.register(ContextMiddleware(dp[\"tc_session_manager\"]))\n    dp.update.middleware.register(ThrottlingMiddleware())\n\n\n__all__ = [\"register_middlewares\"]\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_21","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439","text":"<p>\u0424\u0430\u0439\u043b: <code>src/events.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 TON Connect, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u043d\u0438\u043c\u0438 \u043e\u0448\u0438\u0431\u043e\u043a.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_22","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f","text":"<ul> <li> <p>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 (<code>CONNECT</code>)</p> <ul> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c <code>ton_proof</code>.</li> <li>\u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e.</li> <li>\u041f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0435\u0441\u0441\u0438\u044e \u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.</li> </ul> </li> <li> <p>\u041e\u0448\u0438\u0431\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f</p> <ul> <li>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0443\u0447\u0430\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u043b\u0438 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430.</li> <li>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u0430\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0430.</li> </ul> </li> <li> <p>\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 (<code>DISCONNECT</code>)</p> <ul> <li>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u0430\u043a \u044f\u0432\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0442\u0430\u043a \u0438 \u0432\u044b\u043d\u0443\u0436\u0434\u0435\u043d\u043d\u043e\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c <code>proof</code>).</li> <li>\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.</li> </ul> </li> <li> <p>\u041e\u0448\u0438\u0431\u043a\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f</p> <ul> <li>\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u044e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 \u0438 \u043d\u0435 \u043f\u0440\u0435\u0440\u044b\u0432\u0430\u044e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439.</li> </ul> </li> <li> <p>\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 (<code>TRANSACTION</code>)</p> <ul> <li>\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0445\u0435\u0448 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u043f\u0440\u0438 \u0443\u0441\u043f\u0435\u0445\u0435.</li> <li>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u2014 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0431\u043e\u0440: \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0438\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u043c\u0435\u043d\u044e.</li> </ul> </li> <li> <p>\u041f\u043e\u0434\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445 (<code>SIGN_DATA</code>)</p> <ul> <li>\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0438 \u0435\u0451 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443.</li> <li>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> </ul> </li> </ul> <p>\u0412\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043e\u0434 <code>register_event</code> \u0443 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 <code>TonConnect</code>.</p> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import (\n    Event,\n    EventError,\n    SendTransactionResponse,\n    SignDataResponse,\n    WalletInfo,\n)\nfrom tonutils.tonconnect.utils.exceptions import *\n\nfrom .utils import Context, windows\n\n\nasync def connect_event(user_id: int, wallet: WalletInfo, context: Context) -&gt; None:\n    \"\"\"\n    Called when the wallet is connected.\n\n    :param user_id: Telegram user ID.\n    :param wallet: Connected wallet information.\n    :param context: Execution context.\n    \"\"\"\n    state_data = await context.state.get_data()\n    stored_proof = state_data.get(\"ton_proof\")\n\n    if wallet.verify_proof_payload(stored_proof):\n        await windows.wallet_connected(context, user_id)\n    else:\n        context.connector.add_event_kwargs(Event.DISCONNECT, failed_proof=True)\n        await context.connector.disconnect_wallet()\n\n\nasync def connect_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle wallet connection errors.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"connect_wallet\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the wallet connection.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Connection request timed out.\"\n    else:\n        message_text = f\"Connection error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\nasync def disconnect_event(user_id: int, context: Context, failed_proof: Optional[bool] = None) -&gt; None:\n    \"\"\"\n    Called when the wallet is disconnected.\n\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    :param failed_proof: Whether disconnection was triggered by invalid proof.\n    \"\"\"\n    if failed_proof:\n        message_text = \"Wallet proof verification failed.\\n\\nPlease try again.\"\n        await windows.error(context, user_id, message_text, \"Try again\", \"connect_wallet\")\n    else:\n        await windows.connect_wallet(context, user_id)\n\n\nasync def disconnect_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle wallet disconnection errors.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"connect_wallet\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the wallet disconnection.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Disconnect request timed out.\"\n    else:\n        message_text = f\"Disconnect error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\nasync def transaction_event(user_id: int, transaction: SendTransactionResponse, context: Context) -&gt; None:\n    \"\"\"\n    Called when a transaction is sent successfully.\n\n    :param user_id: Telegram user ID.\n    :param transaction: Transaction result.\n    :param context: Execution context.\n    \"\"\"\n    await windows.transaction_sent(context, user_id, transaction)\n\n\nasync def transaction_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle errors during transaction.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"main_menu\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the transaction.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Transaction request timed out.\"\n    else:\n        message_text = f\"Transaction error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\nasync def sign_data_event(user_id: int, sign_data: SignDataResponse, context: Context) -&gt; None:\n    \"\"\"\n    Called when sign data request completes successfully.\n\n    :param user_id: Telegram user ID.\n    :param sign_data: Sign data result.\n    :param context: Execution context.\n    \"\"\"\n    await windows.sign_data_sent(context, user_id, sign_data)\n\n\nasync def sign_data_error(error: TonConnectError, user_id: int, context: Context) -&gt; None:\n    \"\"\"\n    Handle errors during sign data request.\n\n    :param error: Exception from TonConnect.\n    :param user_id: Telegram user ID.\n    :param context: Execution context.\n    \"\"\"\n    button_text, callback_data = \"Try again\", \"main_menu\"\n\n    if isinstance(error, UserRejectsError):\n        message_text = \"You rejected the data signing request.\"\n    elif isinstance(error, RequestTimeoutError):\n        message_text = \"Data signing request timed out.\"\n    else:\n        message_text = f\"Sign data error. Error: {error.message}\"\n\n    await windows.error(context, user_id, message_text, button_text, callback_data)\n\n\ndef register_events(tc: TonConnect) -&gt; None:\n    \"\"\"\n    Register all TonConnect event and error handlers.\n\n    :param tc: TonConnect instance.\n    \"\"\"\n    tc.register_event(Event.CONNECT, connect_event)\n    tc.register_event(Event.DISCONNECT, disconnect_event)\n    tc.register_event(Event.TRANSACTION, transaction_event)\n    tc.register_event(Event.SIGN_DATA, sign_data_event)\n\n    tc.register_event(EventError.CONNECT, connect_error)\n    tc.register_event(EventError.DISCONNECT, disconnect_error)\n    tc.register_event(EventError.TRANSACTION, transaction_error)\n    tc.register_event(EventError.SIGN_DATA, sign_data_error)\n\n\n__all__ = [\"register_events\"]\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#telegram","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 Telegram","text":"<p>\u0424\u0430\u0439\u043b: <code>src/handlers.py</code></p> <p>\u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 Telegram-\u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0435 \u0437\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0431\u043e\u0442\u043e\u043c \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 inline-\u043a\u043d\u043e\u043f\u043a\u0438.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_23","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<ul> <li> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u044b <code>/start</code></p> <ul> <li>\u0415\u0441\u043b\u0438 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u0435\u0449\u0451 \u043d\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u2014 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u043a\u043d\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.</li> <li>\u0415\u0441\u043b\u0438 \u0443\u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u2014 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438.</li> </ul> </li> <li> <p>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 inline callback\u2019\u043e\u0432</p> <ul> <li>\u0412\u044b\u0431\u043e\u0440 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</li> <li>\u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0435\u043d\u044e: \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435.</li> <li>\u041e\u0442\u043c\u0435\u043d\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432: \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439.</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 batch-\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</li> <li>\u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul> </li> </ul> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>from aiogram import Dispatcher\nfrom aiogram.filters import CommandStart\nfrom aiogram.types import CallbackQuery, Message\nfrom pytoniq_core import begin_cell\nfrom tonutils.tonconnect.models import (\n    SignDataPayloadText,\n    SignDataPayloadBinary,\n    SignDataPayloadCell,\n)\nfrom tonutils.tonconnect.utils.exceptions import *\nfrom tonutils.wallet.messages import TransferMessage\n\nfrom .utils import windows, Context\n\n\nasync def start_command(message: Message, context: Context) -&gt; None:\n    \"\"\"\n    Handle /start command. Launch wallet connection or main menu.\n\n    :param message: Incoming /start message.\n    :param context: Execution context.\n    \"\"\"\n    state_data = await context.state.get_data()\n    rpc_request_id = state_data.get(\"rpc_request_id\")\n\n    if context.connector.is_request_pending(rpc_request_id):\n        context.connector.cancel_pending_request(rpc_request_id)\n\n    if not context.connector.connected:\n        await windows.connect_wallet(context, message.from_user.id)\n    else:\n        await windows.wallet_connected(context, message.from_user.id)\n\n\nasync def callback_query_handler(callback_query: CallbackQuery, context: Context) -&gt; None:\n    \"\"\"\n    Handle all inline callback actions.\n\n    :param callback_query: Incoming callback query.\n    :param context: Execution context.\n    \"\"\"\n    state_data = await context.state.get_data()\n    rpc_request_id = state_data.get(\"rpc_request_id\")\n    data = callback_query.data\n\n    if data.startswith(\"app_wallet:\"):\n        selected_wallet = data.split(\":\")[1]\n        await context.state.update_data(selected_wallet=selected_wallet)\n        await windows.connect_wallet(context, callback_query.from_user.id)\n\n    elif data == \"main_menu\":\n        await windows.wallet_connected(context, callback_query.from_user.id)\n\n    elif data == \"connect_wallet\":\n        await windows.connect_wallet(context, callback_query.from_user.id)\n\n    elif data == \"disconnect_wallet\":\n        await context.connector.disconnect_wallet()\n\n    elif data == \"cancel_transaction\":\n        if context.connector.pending_request_context(rpc_request_id):\n            context.connector.cancel_pending_request(rpc_request_id)\n        await windows.wallet_connected(context, callback_query.from_user.id)\n\n    elif data == \"send_transaction\":\n        rpc_request_id = await context.connector.send_transfer(\n            destination=context.connector.account.address,\n            amount=0.000000001,\n            body=\"Hello from tonutils!\",\n        )\n        await windows.send_request(context, callback_query.from_user.id)\n        await context.state.update_data(rpc_request_id=rpc_request_id)\n\n    elif data == \"send_batch_transaction\":\n        max_messages = context.connector.device.get_max_supported_messages(context.connector.wallet)\n        messages = [\n            TransferMessage(\n                destination=context.connector.account.address,\n                amount=0.000000001,\n                body=\"Hello from tonutils!\",\n            ) for _ in range(max_messages)\n        ]\n        rpc_request_id = await context.connector.send_batch_transfer(messages)\n        await windows.send_request(context, callback_query.from_user.id)\n        await context.state.update_data(rpc_request_id=rpc_request_id)\n\n    elif data == \"send_sign_data_request\":\n        await windows.choose_sign_data_type(context, callback_query.from_user.id)\n\n    elif data.startswith(\"send_sign_data_request:\"):\n        payload_type = data.split(\":\")[1]\n        payload_data = \"Hello from tonutils!\"\n\n        if payload_type == \"text\":\n            payload = SignDataPayloadText(text=payload_data)\n        elif payload_type == \"binary\":\n            payload = SignDataPayloadBinary(bytes=payload_data.encode())\n        else:\n            schema = \"text_comment#00000000 text:Snakedata = InMsgBody;\"\n            cell = begin_cell().store_uint(0, 32).store_snake_string(payload_data).end_cell()\n            payload = SignDataPayloadCell(cell=cell, schema=schema)\n\n        try:\n            context.connector.device.verify_sign_data_feature(\n                context.connector.wallet, payload,\n            )\n            rpc_request_id = await context.connector.sign_data(payload)\n            await context.state.update_data(rpc_request_id=rpc_request_id)\n            await windows.send_request(context, callback_query.from_user.id)\n        except WalletNotSupportFeatureError:\n            await callback_query.answer(\"Your wallet does not support the sign data feature!\", show_alert=True)\n\n    await callback_query.answer()\n\n\ndef register_handlers(dp: Dispatcher) -&gt; None:\n    \"\"\"\n    Register bot handlers.\n\n    :param dp: Aiogram dispatcher.\n    \"\"\"\n    dp.message.register(start_command, CommandStart())\n    dp.callback_query.register(callback_query_handler)\n\n\n__all__ = [\"register_handlers\"]\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_24","title":"\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430","text":"<p>\u0424\u0430\u0439\u043b: <code>src/__main__.py</code></p> <p>\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0431\u043e\u0440\u043e\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b.</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_25","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<ul> <li>\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0438\u0437 <code>.env</code> \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>Config.load()</code>.</li> <li>\u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a Redis:<ul> <li>\u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f FSM-\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439,</li> <li>\u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u0435\u0441\u0441\u0438\u0439 TonConnect.</li> </ul> </li> <li>\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b <code>Bot</code>, <code>TonConnect</code>, <code>Dispatcher</code>.</li> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442:<ul> <li>\u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b Telegram-\u043a\u043e\u043c\u0430\u043d\u0434 \u0438 inline-\u043a\u043d\u043e\u043f\u043e\u043a,</li> <li>\u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 \u043d\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f TonConnect,</li> <li>\u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u043b\u043e\u0438.</li> </ul> </li> <li>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 <code>TonConnectSessionManager</code> \u2014 \u0444\u043e\u043d\u043e\u0432\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043d\u0435\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439.</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 polling \u2014 \u0446\u0438\u043a\u043b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 Telegram-\u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0439.</li> </ul> \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 <pre><code>import logging\n\nfrom aiogram import Dispatcher, Bot\nfrom aiogram.client.default import DefaultBotProperties\nfrom aiogram.fsm.storage.redis import RedisStorage as BotStorage\nfrom redis.asyncio import Redis\nfrom tonutils.tonconnect import TonConnect\n\nfrom .events import register_events\nfrom .handlers import register_handlers\nfrom .middlewares import register_middlewares\nfrom .session_manager import TonConnectSessionManager\nfrom .utils.models import Config\nfrom .utils.storage import RedisStorage as TCStorage\n\n\nasync def main() -&gt; None:\n    \"\"\"\n    Entry point for the bot application.\n    Initializes config, Redis, TonConnect, dispatcher, and starts polling.\n    \"\"\"\n    logging.basicConfig(level=logging.INFO)\n    config = Config.load()\n\n    # Redis connections for Aiogram FSM and TonConnect storage\n    redis = Redis.from_url(url=config.REDIS_DSN)\n    bot_storage = BotStorage(redis)\n    tc_storage = TCStorage(redis)\n\n    # Bot setup\n    props = DefaultBotProperties(parse_mode=\"HTML\")\n    bot = Bot(token=config.BOT_TOKEN, default=props)\n\n    # TonConnect setup\n    tc = TonConnect(storage=tc_storage, manifest_url=config.TC_MANIFEST)\n    tc_session_manager = TonConnectSessionManager(redis=redis, tc=tc)\n\n    # Dispatcher\n    dp = Dispatcher(storage=bot_storage, tc=tc, tc_session_manager=tc_session_manager)\n\n    # Register handlers, events, and middleware\n    register_events(tc)\n    register_handlers(dp)\n    register_middlewares(dp)\n    tc_session_manager.run()\n\n    # Start polling\n    await dp.start_polling(bot)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/tonconnect-telegram/#_26","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0431\u043e\u0442\u0430","text":"<ul> <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0444\u0430\u0439\u043b <code>.env</code> \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f.</li> <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0441\u0435\u0440\u0432\u0435\u0440 Redis \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0432 <code>REDIS_DSN</code>.</li> <li> <p>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0431\u043e\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439:</p> <pre><code>python -m src\n</code></pre> </li> </ul>"},{"location":"ru/cookbook/tonconnect-telegram/#_27","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0430\u0434\u0451\u0436\u043d\u0443\u044e \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u0443\u044e \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 TON Connect \u0432 Telegram. \u041e\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 \u0438 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u044e \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0437\u0430 \u0441\u0447\u0451\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f SSE-\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f\u043c\u0438. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u0430\u044f \u0438 \u043b\u0435\u0433\u043a\u043e \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0434 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u043b\u043d\u044b\u0439 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435: tonconnect-demo-bot</p>"},{"location":"ru/cookbook/tonconnect-telegram/#_28","title":"\u0421\u043c. \u0422\u0430\u043a\u0436\u0435","text":"<ul> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 TON Connect</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f tonutils TON Connect</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f aiogram</li> </ul>"},{"location":"ru/cookbook/vanity/","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u041a\u0440\u0430\u0441\u0438\u0432\u043e\u0433\u043e \u0410\u0434\u0440\u0435\u0441\u0430","text":""},{"location":"ru/cookbook/vanity/#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u042d\u0442\u043e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0435 (vanity) \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0435 TON \u2014 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b \u0438\u043b\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u043c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u043b\u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0430\u044e\u0442 \u0430\u0434\u0440\u0435\u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0443\u0437\u043d\u0430\u0432\u0430\u0435\u043c\u044b\u043c. \u0422\u0430\u043a\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0431\u0440\u0435\u043d\u0434\u0438\u043d\u0433\u0430, \u043b\u0443\u0447\u0448\u0435\u0439 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u044d\u0441\u0442\u0435\u0442\u0438\u043a\u0438.</p>"},{"location":"ru/cookbook/vanity/#_2","title":"\u041a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f Jetton Master-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430), \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438.</p>"},{"location":"ru/cookbook/vanity/#_3","title":"\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439","text":"<pre><code>git clone https://github.com/ton-community/vanity-contract\n</code></pre>"},{"location":"ru/cookbook/vanity/#_4","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"ru/cookbook/vanity/#_5","title":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440","text":"<pre><code>python src/generator/run.py --end {suffix} -w -0 --case-sensitive {owner_address}\n</code></pre> <ul> <li>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>{suffix}</code> \u043d\u0430 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430.</li> <li>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>{owner_address}</code> \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435.</li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>python src/generator/run.py --end NESS -w -0 --case-sensitive UQCZq3_Vd21-4y4m7Wc-ej9NFOhh_qvdfAkAYAOHoQ__Ness\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043e, \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0440\u043e\u0434\u0435:</p> <pre><code>Found: EQC7PA9iWnUVWv001Drj3vTu-pmAkTc30OarHy5iDJ1uNESS salt: 7c9398f0999a96fe5480b5d573817255d53377a000be18d0fb47d090a5606dfe\n</code></pre>"},{"location":"ru/cookbook/vanity/#_6","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<p>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>salt</code> \u0438 \u0432\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0435\u0433\u043e \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443 <code>SALT</code> \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f:</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOnchainContent\nfrom tonutils.vanity import Vanity\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The salt for the vanity address\nSALT = \"\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStandard(\n        content=JettonOnchainContent(\n            name=\"Ness Jetton\",\n            symbol=\"NESS\",\n            description=\"Probably nothing\",\n            decimals=9,\n            image=\"https://ton.org/download/ton_symbol.png\",\n        ),\n        admin_address=wallet.address,\n    )\n    vanity = Vanity(\n        owner_address=wallet.address,\n        salt=SALT,\n    )\n    body = vanity.build_deploy_body(jetton_master)\n\n    tx_hash = await wallet.transfer(\n        destination=vanity.address,\n        amount=0.05,\n        body=body,\n        state_init=vanity.state_init,\n    )\n\n    print(f\"Successfully deployed contract at address: {vanity.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/cookbook/vanity/#_7","title":"\u041a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<p>Note</p> <p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0444\u0440\u0430\u0437\u0430 \u0438 ID \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f <code>WalletV3R2</code>.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043d\u0430 GPU, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438.</p>"},{"location":"ru/cookbook/vanity/#_8","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u0438\u0434\u0435\u043e\u043a\u0430\u0440\u0442\u0430 NVIDIA \u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u043c \u0432\u0435\u0440\u0441\u0438\u0438 555.* \u0438\u043b\u0438 \u0432\u044b\u0448\u0435.</p>"},{"location":"ru/cookbook/vanity/#_9","title":"\u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u0438\u043a","text":"<p>\u0421\u043a\u0430\u0447\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b <code>gpu-generator-linux</code> \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0440\u0435\u043b\u0438\u0437\u0430.</p>"},{"location":"ru/cookbook/vanity/#_10","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435:</p> <pre><code>./gpu-generator-linux\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0441 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438:</p> <pre><code>./gpu-generator-linux -q \"start[*][T][O][N] | end[1][2][3]\"\n</code></pre> <p>\u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d\u0435, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0438 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> <p>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0444\u0440\u0430\u0437\u0443 \u0438 ID \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u043c \u0442\u0438\u043f\u0430 <code>WalletV3R2</code>.</p> <p>\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439</p> <ul> <li> <p>\u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b: <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>_</code>, <code>-</code></p> </li> <li> <p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u0430\u0447\u0430\u043b\u0443 (\u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 <code>UQ</code>, \u0442\u0440\u0435\u0442\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b):</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u2192 <code>start[A][P][P][L][E]</code> \u0438\u043b\u0438 <code>start[*][T][O][N]</code></p> </li> <li> <p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044e:</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u2192 <code>end[T][O][N]</code> \u0438\u043b\u0438 <code>end[Tt][Oo][Nn]</code></p> </li> <li> <p>\u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f:</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u2192 <code>start[*][T][O][N] &amp; end[T][O][N]</code></p> </li> <li> <p>\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 (\u0418\u041b\u0418):</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u2192 <code>start[*][T][O][N] &amp; end[T][O][N] | start[D][D][D] | end[0][0][0]</code></p> </li> </ul> <p>\u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c</p> Hardware 5 chars 6 chars 7 chars 8 chars Intel i5-8350U 4 min 4 h 40 m 12.5 days &gt; 2 years AMD Ryzen 5 3600 26 sec 30 min 31.5 h 84 days NVIDIA GTX 1650 SUPER 2 sec 2 min 2 h 5.5 days NVIDIA RTX 4090 &lt;1 sec 13 sec 13.5 min 14.5 h"},{"location":"ru/cookbook/vanity/#_11","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0440\u0430\u0437\u044b \u0438 ID \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434:</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV3R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Wallet ID\nWALLET_ID = 0\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV3R2.from_mnemonic(client, MNEMONIC, WALLET_ID)\n\n    print(f\"Address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/cookbook/vanity/#_12","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041a\u0440\u0430\u0441\u0438\u0432\u044b\u0435 (vanity) \u0430\u0434\u0440\u0435\u0441\u0430 \u2014 \u044d\u0442\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0430\u0448 \u043a\u043e\u0448\u0435\u043b\u0451\u043a \u0438\u043b\u0438 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0432 \u0441\u0435\u0442\u0438 TON. \u0425\u043e\u0442\u044f \u043e\u043d\u0438 \u043d\u0435 \u0434\u0430\u044e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432, \u0442\u0430\u043a\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0434\u043b\u044f \u0431\u0440\u0435\u043d\u0434\u0438\u043d\u0433\u0430, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u0430 \u0438\u043b\u0438 \u043b\u0438\u0447\u043d\u043e\u0439 \u044d\u0441\u0442\u0435\u0442\u0438\u043a\u0438.</p>"},{"location":"ru/cookbook/vanity/#_13","title":"\u0421\u043c. \u0422\u0430\u043a\u0436\u0435","text":"<ul> <li>Vanity Contract Generator</li> <li>Vanity Wallet Generator</li> </ul>"},{"location":"ru/guide/getting-testnet-assets/","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0422\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0422\u043e\u043a\u0435\u043d\u043e\u0432","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438.</p>"},{"location":"ru/guide/getting-testnet-assets/#ton","title":"TON","text":"TON \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c TON, \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u0432 Telegram-\u0431\u043e\u0442\u0430 \u0438 \u0441\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c. \u041e\u0442\u043a\u0440\u044b\u0442\u044c Telegram-\u0431\u043e\u0442\u0430"},{"location":"ru/guide/getting-testnet-assets/#not-jetton-9-decimals","title":"NOT Jetton (9 decimals)","text":"NOT Jetton \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c NOT jetton, \u043e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 QR-\u043a\u043e\u0434 \u0432 \u0441\u0432\u043e\u0451\u043c TON-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c Testnet NOT"},{"location":"ru/guide/getting-testnet-assets/#usd-jetton-6-decimals","title":"USD\u20ae Jetton (6 decimals)","text":"USD\u20ae Jetton \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c USD\u20ae jetton, \u043e\u0442\u0441\u043a\u0430\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 QR-\u043a\u043e\u0434 \u0432 \u0441\u0432\u043e\u0451\u043c TON-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0435. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c Testnet USD\u20ae"},{"location":"ru/guide/installation-and-initialization/","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442, \u043a\u0430\u043a \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>tonutils</code> \u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0430\u0448\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439.</p>"},{"location":"ru/guide/installation-and-initialization/#_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043f\u0430\u043a\u0435\u0442 <code>tonutils</code>:</p> <pre><code>pip install tonutils\n</code></pre> <p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u041d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 ADNL, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438:</p> <pre><code>pip install 'tonutils[pytoniq]'\n</code></pre>"},{"location":"ru/guide/installation-and-initialization/#_2","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b","text":""},{"location":"ru/guide/installation-and-initialization/#_3","title":"\u041e\u0431\u0449\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","text":"<p>\u0412\u0441\u0435 API \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils.client</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:</p> <ul> <li> <p><code>rps</code> \u2014 \u043b\u0438\u043c\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0443.   \u0420\u0430\u0437\u043d\u044b\u0435 API \u0438\u043c\u0435\u044e\u0442 \u0441\u0432\u043e\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435. \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c \u043b\u0438\u043c\u0438\u0442\u044b \u0438 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043e\u043a <code>rate limit</code>.</p> </li> <li> <p><code>max_retries</code> \u2014 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043b\u0438\u043c\u0438\u0442\u0430 (HTTP 429).   \u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438\u0437-\u0437\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043e\u0436\u0434\u0451\u0442 \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u0442 \u0441\u043d\u043e\u0432\u0430.</p> </li> </ul>"},{"location":"ru/guide/installation-and-initialization/#toncenter","title":"toncenter","text":"<p>toncenter.com \u2014 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0438 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 HTTP API \u0434\u043b\u044f The Open Network.  </p> <p>Note</p> <p>API-\u043a\u043b\u044e\u0447 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d, \u043d\u043e \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e \u0447\u0435\u0440\u0435\u0437 @tonapibot.</p> <pre><code>from tonutils.client import ToncenterV2Client\nfrom tonutils.client import ToncenterV3Client\n\nAPI_KEY = \"your api key\"  # Optional\nIS_TESTNET = True\n\n# Using Toncenter V3 client\nclient_v3 = ToncenterV3Client(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n\n# Using Toncenter V2 client (if needed)\n# client_v2 = ToncenterV2Client(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n</code></pre>"},{"location":"ru/guide/installation-and-initialization/#tonapi","title":"tonapi","text":"<p>tonapi.io \u2014 REST API \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0431\u043b\u043e\u043a\u0447\u0435\u0439\u043d\u0430 TON.  </p> <p>Note</p> <p>\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f API-\u043a\u043b\u044e\u0447 \u0441 \u0441\u0430\u0439\u0442\u0430 tonconsole.com.</p> <pre><code>from tonutils.client import TonapiClient\n\nAPI_KEY = \"your api key\"\nIS_TESTNET = True\nclient = TonapiClient(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n</code></pre>"},{"location":"ru/guide/installation-and-initialization/#quicknode","title":"quicknode","text":"<p>quicknode.com \u2014 HTTP API \u0441 \u043d\u0438\u0437\u043a\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u043a TON \u0447\u0435\u0440\u0435\u0437 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443.  </p> <p>Note</p> <p>\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f URL API \u0441 \u0441\u0430\u0439\u0442\u0430 quicknode.com.</p> <p>Quicknode \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0441\u0435\u0442\u044c!</p> <pre><code>from tonutils.client import QuicknodeClient\n\nHTTP_PROVIDER_URL = \"https://blissful-withered-surf.ton-mainnet.quiknode.pro/d6e8...1964\"\nclient = QuicknodeClient(HTTP_PROVIDER_URL, rps=1)\n</code></pre>"},{"location":"ru/guide/installation-and-initialization/#tatum","title":"tatum","text":"<p>tatum.io \u2014 RPC \u0438 API \u0434\u043b\u044f Web3.  </p> <p>Note</p> <p>\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f API-\u043a\u043b\u044e\u0447 \u0441 \u0441\u0430\u0439\u0442\u0430 tatum.io.</p> <pre><code>from tonutils.client import TatumClient\n\nAPI_KEY = \"your api key\"\nIS_TESTNET = True\nclient = TatumClient(api_key=API_KEY, is_testnet=IS_TESTNET, rps=1)\n</code></pre>"},{"location":"ru/guide/installation-and-initialization/#adnl","title":"\u041d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 ADNL","text":""},{"location":"ru/guide/installation-and-initialization/#pytoniq","title":"pytoniq","text":"<p>pytoniq \u2014 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043b\u0430\u0439\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438.  </p> <p>Note</p> <p>\u0414\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430 liteserver.</p> <pre><code>from tonutils.client import LiteserverClient\n\nIS_TESTNET = True\nclient = LiteserverClient(is_testnet=IS_TESTNET)\n\n# Using custom configuration\n# config = {}  # Your LiteServer config here \n# client = LiteserverClient(config=config)\n</code></pre>"},{"location":"ru/guide/usage-scenarios/","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0412 \u044d\u0442\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 <code>tonutils</code>. \u0412\u044b \u0443\u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438, \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u044b \u0432 \u0441\u0435\u0442\u0438 TON.</p>"},{"location":"ru/guide/usage-scenarios/#_1","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u043c","text":""},{"location":"ru/guide/usage-scenarios/#_2","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<pre><code>from tonutils.wallet import WalletV4R2\nfrom tonutils.client import ToncenterV3Client\n\nclient = ToncenterV3Client(is_testnet=True, rps=1)\nwallet, public_key, private_key, mnemonic = WalletV4R2.create(client)\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <ul> <li><code>wallet</code>: \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 <code>WalletV4R2</code>, \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e</li> <li><code>public_key</code>: \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 (<code>bytes</code>)</li> <li><code>private_key</code>: \u0431\u0430\u0439\u0442\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 (<code>bytes</code>)</li> <li><code>mnemonic</code>: \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 24 \u0441\u043b\u043e\u0432 (<code>List[str]</code>)</li> </ul>"},{"location":"ru/guide/usage-scenarios/#_3","title":"\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<pre><code>wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440:</p> <ul> <li><code>MNEMONIC</code> \u2014 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0434\u0432\u0443\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432:<ul> <li>\u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 12/24 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438;</li> <li>\u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 12/24 \u0441\u043b\u043e\u0432.</li> </ul> </li> </ul>"},{"location":"ru/guide/usage-scenarios/#_4","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439","text":""},{"location":"ru/guide/usage-scenarios/#_5","title":"\u041e\u0434\u0438\u043d\u043e\u0447\u043d\u0430\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f","text":"<pre><code>tx_hash = await wallet.transfer(\n    destination=\"nessshon.t.me\",\n    amount=1,\n    body=\"Hello from tonutils!\",\n)\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:</p> <ul> <li><code>destination</code>: \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044c \u2014 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c:<ul> <li>\u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0441 \u0430\u0434\u0440\u0435\u0441\u043e\u043c;</li> <li>\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c <code>Address</code>;</li> <li>\u0434\u043e\u043c\u0435\u043d\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c <code>.ton</code> \u0438\u043b\u0438 <code>.t.me</code>;</li> </ul> </li> <li><code>amount</code>: \u0441\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0432 TON (\u043d\u0435 \u0432 nanotons);</li> <li><code>body</code>: \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 <code>Cell</code>.</li> </ul> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <ul> <li>\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0445\u044d\u0448 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (<code>str</code>)</li> </ul>"},{"location":"ru/guide/usage-scenarios/#_6","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430","text":"<p>\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0434\u043d\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438:</p> <pre><code>from tonutils.wallet.messages import TransferMessage\n\ntx_hash = await wallet.batch_transfer_messages([\n    TransferMessage(destination=\"UQ...\", amount=0.01, body=\"Hello from tonutils!\"),\n    TransferMessage(destination=\"UQ...\", amount=0.02, body=\"Hello from tonutils!\"),\n])\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <ul> <li>\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0445\u044d\u0448 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (<code>str</code>)</li> </ul>"},{"location":"ru/guide/usage-scenarios/#_7","title":"\u0420\u0435\u0436\u0438\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438","text":"<p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>send_mode</code> \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u2014 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0431\u0430\u043b\u0430\u043d\u0441 (<code>128</code>)</p> <pre><code>await wallet.transfer(\n    destination=\"UQ...\",\n    amount=0,\n    send_mode=128,\n)\n</code></pre> <p>Note</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0440\u0435\u0436\u0438\u043c\u0430\u0445 \u0441\u043c. \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 TON.</p>"},{"location":"ru/guide/usage-scenarios/#_8","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435","text":""},{"location":"ru/guide/usage-scenarios/#_9","title":"\u0411\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<pre><code>balance = await client.get_account_balance(\"UQ...\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <p>\u0426\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e (<code>int</code>), \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0435 \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0432 nanotons.</p>"},{"location":"ru/guide/usage-scenarios/#_10","title":"\u0414\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<pre><code>contract_data = await client.get_raw_account(\"UQ...\")\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <p>\u041e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044f:</p> <ul> <li><code>balance</code>: \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0432 nanotons (<code>int</code>);</li> <li><code>status</code>: \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430: <code>active</code>, <code>nonexist</code>, <code>frozen</code>, <code>uninit</code>;</li> <li><code>code</code>: \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (<code>Optional[Cell]</code>);</li> <li><code>data</code>: \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (<code>Optional[Cell]</code>);</li> <li><code>last_transaction_lt</code>: \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 (<code>Optional[int]</code>);</li> <li><code>last_transaction_hash</code>: \u0445\u044d\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 (<code>Optional[str]</code>);</li> <li><code>state_init</code>: \u043e\u0431\u044a\u0435\u043a\u0442 <code>StateInit</code>, \u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d\u044b <code>code</code> \u0438 <code>data</code>.</li> </ul>"},{"location":"ru/guide/usage-scenarios/#_11","title":"\u0412\u044b\u0437\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<p>\u041c\u0435\u0442\u043e\u0434 <code>run_get_method</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u044b\u0437\u043e\u0432 <code>get-method</code> \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> <pre><code>result = await client.run_get_method(\n    address=\"UQ...\",\n    method_name=\"get_my_data\",\n    stack=[0]\n)\n</code></pre> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:</p> <ul> <li><code>address</code>: \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430;</li> <li><code>method_name</code>: \u0438\u043c\u044f \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 (<code>str</code>);</li> <li><code>stack</code>: \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 (\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0435 \u0442\u0438\u043f\u044b: <code>int</code>, <code>Cell</code>, <code>Slice</code>).</li> </ul> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:</p> <p>\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0451\u043d\u043d\u044b\u0445 \u0438\u0437 \u0441\u0442\u0435\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u0430.</p>"},{"location":"ru/guide/examples/dns-operations/","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 TON DNS","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e DNS-\u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 TON \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code>. \u041e\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 DNS-\u0437\u0430\u043f\u0438\u0441\u0435\u0439, \u0440\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044e \u0438 \u0432\u044b\u043f\u0443\u0441\u043a \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u043a\u0430\u043a NFT, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 \u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430\u043c\u0438 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432.</p> <p>Note</p> <p>\u0414\u043b\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430\u043c\u0438 TON \u0441\u043c. \u0420\u0435\u0446\u0435\u043f\u0442\u044b: \u0412\u044b\u043f\u0443\u0441\u043a \u041f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432 TON.</p>"},{"location":"ru/guide/examples/dns-operations/#_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","text":""},{"location":"ru/guide/examples/dns-operations/#site","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Site \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the site record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The ADNL address that will be set in the DNS record\nADNL_ADDRESS = \"{hex}\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_site_record_body(ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Site record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#wallet","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Wallet \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the wallet record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The address of the wallet that will be set in the DNS record\nWALLET_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_wallet_record_body(Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Wallet record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#storage","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Storage \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the storage record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The hex-encoded BAG ID for the storage record\nBAG_ID = \"{hex}\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_storage_record_body(BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Storage record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#next-resolver","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Next Resolver \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.contract import DNS\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the NFT domain where the next resolver record will be set\nNFT_DOMAIN_ADDRESS = \"EQ...\"\n\n# The address of the contract to be set as the next resolver\nCONTRACT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = DNS.build_set_next_resolver_record_body(Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_DOMAIN_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Next resolver record set successfully!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#_2","title":"\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":""},{"location":"ru/guide/examples/dns-operations/#_3","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_collection import SubdomainCollection\nfrom tonutils.dns.subdomain_collection.content import SubdomainCollectionContent\nfrom tonutils.dns.subdomain_collection.data import FullDomain\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# NFT domain name and address from TON DNS Domains\n# Obtainable from https://dns.ton.org/ or https://dns.ton.org/?testnet=true\nDOMAIN_NAME = \"ghost\"  # ghost \u2192 ghost.ton\nDOMAIN_ADDRESS = \"EQ...\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n# The base URL of the API for generating metadata for NFTs.\n# API source code: https://github.com/nessshon/subdomains-toolbox\nAPI_BASE_URL = \"https://dns.ness.su/api/ton/\"\n\n# Metadata for the NFT collection\nCOLLECTION_METADATA = {\n    \"name\": f\"{DOMAIN_NAME.title()} DNS Domains\",\n    \"image\": f\"{API_BASE_URL}{DOMAIN_NAME}.png\",\n    \"description\": f\"*.{DOMAIN_NAME}.ton domains\",\n    \"prefix_uri\": API_BASE_URL,\n}\n\"\"\"\n{\n    \"name\": \"Ghost DNS Domains\",\n    \"image\": \"https://dns.ness.su/api/ton/ghost.png\",\n    \"description\": \"*.ghost.ton domains\",\n    \"prefix_uri\": \"https://dns.ness.su/api/ton/\"\n}\n\"\"\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = SubdomainCollection(\n        owner_address=wallet.address,\n        content=SubdomainCollectionContent(**COLLECTION_METADATA),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=wallet.address,\n        ),\n        full_domain=FullDomain(DOMAIN_NAME, \"ton\"),\n    )\n\n    tx_hash = await wallet.batch_transfer_messages(\n        [\n            # Deploy collection\n            TransferMessage(\n                destination=collection.address,\n                amount=0.05,\n                body=collection.build_deploy_body(),\n                state_init=collection.state_init,\n            ),\n            # Binding a Subdomain Collection to the main domain\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(collection.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#nft","title":"\u0412\u044b\u043f\u0443\u0441\u043a NFT \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u0430","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Subdomain Collection contract\nSUBDOMAIN_COLLECTION_ADDRESS = \"EQ...\"\n\n# The name of the subdomain to be minted\nSUBDOMAIN_NAME = \"alice\"  # alice \u2192 alice.ghost.ton\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_COLLECTION_ADDRESS,\n        amount=0.1,\n        body=SUBDOMAIN_NAME,\n    )\n\n    print(f\"Successfully minted subdomain {SUBDOMAIN_NAME}!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#_4","title":"\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e\u0434\u0434\u043e\u043c\u0435\u043d\u043e\u0432","text":""},{"location":"ru/guide/examples/dns-operations/#_5","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns import DNS\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Subdomain Manager\nADMIN_ADDRESS = \"UQ...\"\n\n# NFT domain address from TON DNS Domains\n# Obtainable from https://dns.ton.org/ or https://dns.ton.org/?testnet=true\nDOMAIN_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    subdomain_manager = SubdomainManager(Address(ADMIN_ADDRESS))\n\n    tx_hash = await wallet.batch_transfer_messages(\n        [\n            # Deploy collection\n            TransferMessage(\n                destination=subdomain_manager.address,\n                amount=0.05,\n                state_init=subdomain_manager.state_init,\n            ),\n            # Binding a Subdomain Manager to the main domain\n            TransferMessage(\n                destination=DOMAIN_ADDRESS,\n                amount=0.05,\n                body=DNS.build_set_next_resolver_record_body(subdomain_manager.address),\n            ),\n        ]\n    )\n\n    print(f\"Successfully deployed Subdomain Manager at address: {subdomain_manager.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#site_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Site \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The ADNL address to be set for the subdomain\nADNL_ADDRESS = \"{hex}\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_site_record_body(SUBDOMAIN, ADNL_ADDRESS)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Subdomain successfully registered and site record set!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#wallet_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Wallet \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The address of the wallet to be set for the subdomain\nWALLET_ADDRESS = \"UQ...\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_wallet_record_body(SUBDOMAIN, Address(WALLET_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Subdomain successfully registered and wallet set!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#storage_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Storage \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The ID of the storage bag to be set for the subdomain\nBAG_ID = \"{hex}\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_storage_record_body(SUBDOMAIN, BAG_ID)\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(\"Subdomain successfully registered and storage record set!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/dns-operations/#next-resolver_1","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 Next Resolver \u0437\u0430\u043f\u0438\u0441\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.dns.subdomain_manager import SubdomainManager\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the subdomain manager contract\nSUBDOMAIN_MANAGER_ADDRESS = \"EQ...\"\n\n# The address of the next resolver contract\nCONTRACT_ADDRESS = \"EQ...\"\n\n# The subdomain to be registered\nSUBDOMAIN = \"example\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SubdomainManager.build_set_next_resolver_record_body(SUBDOMAIN, Address(CONTRACT_ADDRESS))\n\n    tx_hash = await wallet.transfer(\n        destination=SUBDOMAIN_MANAGER_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully registered subdomain and set the next resolver!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 Jetton","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 Jetton \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code>. \u041e\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u0430\u043a \u0441 Stablecoin Jetton (by Notcoin), \u0442\u0430\u043a \u0438 \u0441\u043e Standard Jetton, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, \u0432\u044b\u043f\u0443\u0441\u043a, \u0441\u0436\u0438\u0433\u0430\u043d\u0438\u0435, \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u043c\u0435\u043d \u0447\u0435\u0440\u0435\u0437 \u0434\u0435\u0446\u0435\u043d\u0442\u0440\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0431\u0438\u0440\u0436\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a STON.fi \u0438 DeDust.io.</p>"},{"location":"ru/guide/examples/jetton-operations/#jetton-master","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 Jetton Master","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.jetton.content import JettonStablecoinContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Jetton Master\nADMIN_ADDRESS = \"UQ...\"\n\n# URI for the off-chain content of the Jetton\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nURI = \"https://example.com/jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStablecoin(\n        content=JettonStablecoinContent(URI),\n        admin_address=ADMIN_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_master.address,\n        amount=0.05,\n        state_init=jetton_master.state_init,\n    )\n\n    print(f\"Successfully deployed Jetton Master at address: {jetton_master.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#_1","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<pre><code>from pytoniq_core import Cell\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Cell containing the updated contract code\nNEW_CODE_CELL = Cell.one_from_boc(\"code hex\")\n\n# Cell containing the updated contract data\nNEW_DATA_CELL = Cell.one_from_boc(\"data hex\")\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_upgrade_message_body(\n        new_code=NEW_CODE_CELL,\n        new_data=NEW_DATA_CELL,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully upgraded the contract!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton","title":"\u0412\u044b\u043f\u0443\u0441\u043a Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The amount of Jettons to mint (in base units, considering decimals)\nJETTON_AMOUNT = 1000000\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_mint_body(\n        destination=wallet.address,\n        jetton_amount=int(JETTON_AMOUNT * (10 ** 9)),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.1,\n        body=body,\n    )\n\n    print(f\"Successfully minted {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton_1","title":"\u0421\u0436\u0438\u0433\u0430\u043d\u0438\u0435 Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin, JettonWalletStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The amount of Jettons to burn (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_wallet_address = await JettonMasterStablecoin.get_wallet_address(\n        client=client,\n        owner_address=wallet.address.to_str(),\n        jetton_master_address=JETTON_MASTER_ADDRESS,\n    )\n    body = JettonWalletStablecoin.build_burn_body(\n        jetton_amount=int(JETTON_AMOUNT * (10 ** 9)),\n        response_address=wallet.address,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully burned {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#_2","title":"\u0421\u043c\u0435\u043d\u0430 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract where the admin will be changed\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The new administrator address to be set for the Jetton Master contract\nNEW_ADMIN_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_change_admin_body(\n        new_admin_address=Address(NEW_ADMIN_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully changed the admin of the Jetton Master!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#_3","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract where the admin will be changed\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_drop_admin_body()\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Jetton Master admin has been successfully dropped!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#_4","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\nfrom tonutils.jetton.content import JettonStablecoinContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# New URI for the Jetton offchain content\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nNEW_URI = \"https://example.com/new-jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStablecoin.build_change_content_body(\n        new_content=JettonStablecoinContent(NEW_URI),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully updated Jetton content!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton-master_1","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 Jetton Master (\u043e\u043d\u0447\u0435\u0439\u043d)","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOnchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Jetton Master\nADMIN_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStandard(\n        content=JettonOnchainContent(\n            name=\"Ness Jetton\",\n            symbol=\"NESS\",\n            description=\"Probably nothing\",\n            decimals=9,\n            image=\"https://example.com/image.png\",\n        ),\n        admin_address=ADMIN_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_master.address,\n        amount=0.05,\n        state_init=jetton_master.state_init,\n    )\n\n    print(f\"Successfully deployed Jetton Master at address: {jetton_master.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton-master_2","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 Jetton Master (\u043e\u0444\u0444\u0447\u0435\u0439\u043d)","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the administrator for managing the Jetton Master\nADMIN_ADDRESS = \"UQ...\"\n\n# URI for the off-chain content of the Jetton\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nURI = \"https://example.com/jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_master = JettonMasterStandard(\n        content=JettonOffchainContent(URI),\n        admin_address=ADMIN_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_master.address,\n        amount=0.05,\n        state_init=jetton_master.state_init,\n    )\n\n    print(f\"Successfully deployed Jetton Master at address: {jetton_master.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton_2","title":"\u0412\u044b\u043f\u0443\u0441\u043a Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The amount of Jettons to mint (in base units, considering decimals)\nJETTON_AMOUNT = 1000000\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStandard.build_mint_body(\n        destination=wallet.address,\n        jetton_amount=int(JETTON_AMOUNT * (10 ** JETTON_DECIMALS)),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully minted {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton_3","title":"\u0421\u0436\u0438\u0433\u0430\u043d\u0438\u0435 Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard, JettonWalletStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# The amount of Jettons to burn (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_wallet_address = await JettonMasterStandard.get_wallet_address(\n        client=client,\n        owner_address=wallet.address.to_str(),\n        jetton_master_address=JETTON_MASTER_ADDRESS,\n    )\n    body = JettonWalletStandard.build_burn_body(\n        jetton_amount=int(JETTON_AMOUNT * (10 ** JETTON_DECIMALS)),\n        response_address=wallet.address,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully burned {JETTON_AMOUNT} Jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#_5","title":"\u0421\u043c\u0435\u043d\u0430 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract where the admin will be changed\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The new administrator address to be set for the Jetton Master contract\nNEW_ADMIN_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStandard.build_change_admin_body(\n        new_admin_address=Address(NEW_ADMIN_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully changed the admin of the Jetton Master!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#_6","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\nfrom tonutils.jetton.content import JettonOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# New URI for the Jetton offchain content\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#jetton-metadata-example-offchain\nNEW_URI = \"https://example.com/new-jetton.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = JettonMasterStandard.build_change_content_body(\n        new_content=JettonOffchainContent(NEW_URI),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=JETTON_MASTER_ADDRESS,\n        amount=0.05,\n        body=body,\n    )\n\n    print(f\"Successfully updated Jetton content!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton_4","title":"\u041e\u0431\u043c\u0435\u043d Jetton","text":""},{"location":"ru/guide/examples/jetton-operations/#stonfi","title":"\u0427\u0435\u0440\u0435\u0437 STON.fi","text":""},{"location":"ru/guide/examples/jetton-operations/#ton-jetton","title":"\u041e\u0431\u043c\u0435\u043d TON \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.stonfi import StonfiRouterV2, StonfiRouterV1\nfrom tonutils.jetton.dex.stonfi.utils import get_stonfi_router_details\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master for swapping (TON &gt; USD\u20ae)\nTO_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap (in base units, considering decimals)\nTON_AMOUNT = 1\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    version, router_address, pton_address = await get_stonfi_router_details(\n        offer_address=\"ton\",\n        ask_address=TO_JETTON_MASTER_ADDRESS,\n        amount=TON_AMOUNT,\n        decimals=9,\n        is_testnet=client.is_testnet,\n    )\n\n    if version == 1:\n        router_v1 = StonfiRouterV1(client, router_address, pton_address)\n\n        to, value, body = await router_v1.get_swap_ton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(TON_AMOUNT),\n            min_ask_amount=to_nano(MIN_AMOUNT, JETTON_DECIMALS),\n        )\n    else:\n        router_v2 = StonfiRouterV2(client, router_address, pton_address)\n\n        to, value, body = await router_v2.get_swap_ton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            receiver_address=wallet.address,\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(TON_AMOUNT),\n            min_ask_amount=to_nano(MIN_AMOUNT, JETTON_DECIMALS),\n            refund_address=wallet.address,\n        )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton-ton","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 TON","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.stonfi import StonfiRouterV2, StonfiRouterV1\nfrom tonutils.jetton.dex.stonfi.utils import get_stonfi_router_details\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Minimum amount of TON to receive\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    version, router_address, pton_address = await get_stonfi_router_details(\n        offer_address=FROM_JETTON_MASTER_ADDRESS,\n        ask_address=\"ton\",\n        amount=JETTON_AMOUNT,\n        decimals=JETTON_DECIMALS,\n        is_testnet=client.is_testnet,\n    )\n\n    if version == 1:\n        router_v1 = StonfiRouterV1(client, router_address, pton_address)\n\n        to, value, body = await router_v1.get_swap_jetton_to_ton_tx_params(\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            user_wallet_address=wallet.address,\n            offer_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT),\n        )\n    else:\n        router_v2 = StonfiRouterV2(client, router_address, pton_address)\n\n        to, value, body = await router_v2.get_swap_jetton_to_ton_tx_params(\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            receiver_address=wallet.address,\n            user_wallet_address=wallet.address,\n            offer_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT),\n            refund_address=wallet.address,\n        )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton-jetton","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.stonfi import StonfiRouterV2, StonfiRouterV1\nfrom tonutils.jetton.dex.stonfi.utils import get_stonfi_router_details\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\nTO_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 6\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    version, router_address, pton_address = await get_stonfi_router_details(\n        offer_address=FROM_JETTON_MASTER_ADDRESS,\n        ask_address=TO_JETTON_MASTER_ADDRESS,\n        amount=JETTON_AMOUNT,\n        decimals=FROM_JETTON_DECIMALS,\n        is_testnet=client.is_testnet,\n    )\n\n    if version == 1:\n        router_v1 = StonfiRouterV1(client, router_address, pton_address)\n        to, value, body = await router_v1.get_swap_jetton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(JETTON_AMOUNT, FROM_JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT, TO_JETTON_DECIMALS),\n        )\n    else:\n        router_v2 = StonfiRouterV2(client, router_address, pton_address)\n        to, value, body = await router_v2.get_swap_jetton_to_jetton_tx_params(\n            user_wallet_address=wallet.address,\n            receiver_address=wallet.address,\n            refund_address=wallet.address,\n            offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n            ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n            offer_amount=to_nano(JETTON_AMOUNT, FROM_JETTON_DECIMALS),\n            min_ask_amount=to_nano(MIN_AMOUNT, TO_JETTON_DECIMALS),\n        )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#dedustio","title":"\u0427\u0435\u0440\u0435\u0437 DeDust.io","text":""},{"location":"ru/guide/examples/jetton-operations/#ton-jetton_1","title":"\u041e\u0431\u043c\u0435\u043d TON \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.dedust import Factory\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap\nTON_AMOUNT = 1\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    to, value, body = await Factory(client).get_swap_ton_to_jetton_tx_params(\n        recipient_address=wallet.address,\n        offer_jetton_address=Address(JETTON_MASTER_ADDRESS),\n        offer_amount=to_nano(TON_AMOUNT),\n        min_ask_amount=to_nano(MIN_AMOUNT, JETTON_DECIMALS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton-ton_1","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 TON","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.dedust import Factory\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Minimum amount of TON to receive\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    to, value, body = await Factory(client).get_swap_jetton_to_ton_tx_params(\n        recipient_address=wallet.address,\n        offer_jetton_address=Address(JETTON_MASTER_ADDRESS),\n        offer_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n        min_ask_amount=to_nano(MIN_AMOUNT),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/jetton-operations/#jetton-jetton_1","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.jetton.dex.dedust import Factory\nfrom tonutils.utils import to_nano, to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\nTO_JETTON_MASTER_ADDRESS = \"EQ...\"  # noqa\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 6\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Minimum amount of Jettons to receive (in base units, considering decimals)\nMIN_AMOUNT = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    to, value, body = await Factory(client).get_swap_jetton_to_jetton_tx_params(\n        recipient_address=wallet.address,\n        offer_jetton_address=Address(FROM_JETTON_MASTER_ADDRESS),\n        ask_jetton_address=Address(TO_JETTON_MASTER_ADDRESS),\n        offer_amount=to_nano(JETTON_AMOUNT, FROM_JETTON_DECIMALS),\n        min_ask_amount=to_nano(MIN_AMOUNT, TO_JETTON_DECIMALS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=to,\n        amount=to_amount(value),\n        body=body,\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 NFT","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 NFT-\u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code>. \u041e\u043f\u0438\u0441\u0430\u043d\u044b \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0442\u0438\u043f\u043e\u0432 Standard, Soulbound, Editable \u0438 Editable Onchain, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, \u0432\u044b\u043f\u0443\u0441\u043a, \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f.</p>"},{"location":"ru/guide/examples/nft-operations/#standard","title":"Standard \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f","text":""},{"location":"ru/guide/examples/nft-operations/#_1","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionStandard\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT collection\nOWNER_ADDRESS = \"UQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionStandard(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    \"\"\" If you want the option to withdraw extra balance in the future and store collection and NFT data on-chain,\n        you can use `CollectionStandardModified`. It removes the need for `prefix_uri` because NFTs minted in this\n        format include a direct link to the metadata for each item, rather than using a shared prefix for all items.\n\n    Example:\n\n    collection = CollectionStandardModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/collection.json`.\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft","title":"\u0412\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.nft.contract.standard.collection import CollectionStandard\nfrom tonutils.nft.contract.standard.nft import NFTStandard\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"{NFT_INDEX}.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTStandard(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionStandard.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionStandard` and `NFTStandard` with their modified versions,\n        and use `NFTModifiedOffchainContent` to specify the full `URI` for the NFT metadata.\n\n    Example:\n\n    nft = NFTStandardModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionStandardModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/0.json`.\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u0432\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionStandard\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Starting index for minting items\nFROM_INDEX = 0\n\n# Number of items to mint\nITEMS_COUNT = 100\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionStandard.build_batch_mint_body(\n        data=[\n            (\n                NFTOffchainContent(suffix_uri=f\"{index}.json\"),\n                Address(OWNER_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionStandard` with `CollectionStandardModified`, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for each NFT metadata.\n\n    Example:\n\n    body = CollectionStandardModified.build_batch_mint_body(\n        data=[\n            (\n                NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/{index}.json`.\n                Address(OWNER_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=ITEMS_COUNT * 0.05,\n        body=body,\n    )\n\n    print(f\"Successfully minted {ITEMS_COUNT} items in the collection at address: {COLLECTION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#soulbound","title":"Soulbound \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f","text":""},{"location":"ru/guide/examples/nft-operations/#_2","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionSoulbound\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionSoulbound(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    \"\"\" If you want the option to withdraw extra balance in the future and store collection and NFT data on-chain,\n        you can use `CollectionSoulboundModified`. It removes the need for `prefix_uri` because NFTs minted in this\n        format include a direct link to the metadata for each item, rather than using a shared prefix for all items.\n\n    Example:\n\n    collection = CollectionSoulboundModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/collection.json`.\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_2","title":"\u0412\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionSoulbound, NFTSoulbound\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"{NFT_INDEX}.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTSoulbound(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionSoulbound.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionSoulbound` and `NFTSoulbound` with their modified versions, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for the NFT metadata.\n\n    Example:\n\n    nft = NFTSoulboundModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionSoulboundModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/0.json`.\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_3","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u0432\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionSoulbound\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner and editor of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nEDITOR_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Starting index for minting items\nFROM_INDEX = 0\n\n# Number of items to mint\nITEMS_COUNT = 100\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionSoulbound.build_batch_mint_body(\n        data=[\n            (\n                NFTOffchainContent(suffix_uri=f\"{index}.json\"),\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n                None,  # revoked at\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionSoulbound` with `CollectionSoulboundModified`, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for each NFT metadata.\n\n    Example:\n\n    body = CollectionSoulboundModified.build_batch_mint_body(\n        data=[\n            (\n                NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/{index}.json`.\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n                None,  # revoked at\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=ITEMS_COUNT * 0.05,\n        body=body,\n    )\n\n    print(f\"Minted {ITEMS_COUNT} items in collection {COLLECTION_ADDRESS}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_4","title":"\u041e\u0442\u0437\u044b\u0432 NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTSoulbound\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be revoked\nNFT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    # Initialize TonapiClient and Wallet\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTSoulbound.build_revoke_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully revoked NFT at address: {NFT_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_5","title":"\u0423\u043d\u0438\u0447\u0442\u043e\u0436\u0438\u0442\u044c NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTSoulbound\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be destroyed\nNFT_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTSoulbound.build_destroy_body()\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully destroyed NFT at address: {NFT_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#editable","title":"Editable \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f","text":""},{"location":"ru/guide/examples/nft-operations/#_3","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT collection\nOWNER_ADDRESS = \"UQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionEditable(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    \"\"\" If you want the option to withdraw extra balance in the future and store collection and NFT data on-chain,\n        you can use `CollectionEditableModified`. It removes the need for `prefix_uri` because NFTs minted in this\n        format include a direct link to the metadata for each item, rather than using a shared prefix for all items.\n\n    Example:\n\n    collection = CollectionEditableModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/collection.json`.\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_6","title":"\u0412\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable, NFTEditable\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"{NFT_INDEX}.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTEditable(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionEditable.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionEditable` and `NFTEditable` with their modified versions,\n        and use `NFTModifiedOffchainContent` to specify the full `URI` for the NFT metadata.\n\n    Example:\n\n    nft = NFTEditableModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionEditableModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/0.json`.\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_7","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u0432\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner and editor of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nEDITOR_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Starting index for minting items\nFROM_INDEX = 0\n\n# Number of items to mint\nITEMS_COUNT = 100\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditable.build_batch_mint_body(\n        data=[\n            (\n                NFTOffchainContent(suffix_uri=f\"{index}.json\"),\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n\n    \"\"\" If you deployed the collection using the Modified variant, replace the above code with:\n        Replace `CollectionEditable` with `CollectionEditableModified`, \n        and use `NFTModifiedOffchainContent` to specify the full `URI` for each NFT metadata.\n\n    Example:\n\n    body = CollectionEditableModified.build_batch_mint_body(\n        data=[\n            (\n                NFTModifiedOffchainContent(uri=URI),  # URI example: `https://example.com/nft/{index}.json`.\n                Address(OWNER_ADDRESS),\n                Address(EDITOR_ADDRESS),\n            )\n            for index in range(FROM_INDEX, FROM_INDEX + ITEMS_COUNT)\n        ],\n        from_index=FROM_INDEX,\n    )\n    \"\"\"\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=ITEMS_COUNT * 0.05,\n        body=body,\n    )\n\n    print(f\"Minted {ITEMS_COUNT} items in collection {COLLECTION_ADDRESS}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_8","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTEditable\nfrom tonutils.nft.content import NFTOffchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be edited\nNFT_ADDRESS = \"EQ...\"\n\n# Suffix URI of the NFT metadata\nSUFFIX_URI = f\"new-content.json\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTEditable.build_edit_content_body(\n        content=NFTOffchainContent(suffix_uri=SUFFIX_URI),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully edited the content of NFT at address: {NFT_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_9","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043f\u0440\u0430\u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import NFTEditable\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT whose editorship will be changed\nNFT_ADDRESS = \"EQ...\"\n\n# Address of the new editor to whom the editorship will be transferred\nNEW_EDITOR_ADDRESS = \"UQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = NFTEditable.build_change_editorship_body(\n        editor_address=Address(NEW_EDITOR_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully changed the editorship of NFT {NFT_ADDRESS} to {NEW_EDITOR_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#_4","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.nft.content import CollectionOffchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the royalty receiver and the NFT collection contract\nROYALTY_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# URI of the collection's metadata\n# https://github.com/ton-blockchain/TEPs/blob/master/text/0064-token-data-standard.md#nft-collection-metadata-example-offchain\nURI = \"https://example.com/nft/collection.json\"\nPREFIX_URI = \"https://example.com/nft/\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 60  # 6% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditable.build_edit_content_body(\n        content=CollectionOffchainContent(uri=URI, prefix_uri=PREFIX_URI),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(ROYALTY_ADDRESS),\n        ),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully edited the collection at address: {COLLECTION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#_5","title":"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043f\u0440\u0430\u0432 \u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditable\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the new owner to whom the collection ownership will be transferred\nNEW_OWNER_ADDRESS = \"UQ...\"\n\n# Address of the NFT collection whose ownership will be changed\nCOLLECTION_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditable.build_change_owner_body(\n        owner_address=Address(NEW_OWNER_ADDRESS),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully changed the owner of collection {COLLECTION_ADDRESS} to {NEW_OWNER_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#editable-onchain","title":"Editable-onchain \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f","text":""},{"location":"ru/guide/examples/nft-operations/#_6","title":"\u0420\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditableModified\nfrom tonutils.nft.content import CollectionModifiedOnchainContent\nfrom tonutils.nft.royalty_params import RoyaltyParams\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT collection\nOWNER_ADDRESS = \"UQ...\"\n\n# Royalty parameters: base and factor for calculating the royalty\nROYALTY_BASE = 1000\nROYALTY_FACTOR = 55  # 5.5% royalty\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    collection = CollectionEditableModified(\n        owner_address=Address(OWNER_ADDRESS),\n        next_item_index=0,\n        content=CollectionModifiedOnchainContent(\n            name=\"Welcome to TON\",\n            description=\"Each digital artwork represents a memorable token\",\n            image_data=b'image data',\n        ),\n        royalty_params=RoyaltyParams(\n            base=ROYALTY_BASE,\n            factor=ROYALTY_FACTOR,\n            address=Address(OWNER_ADDRESS),\n        ),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=collection.address,\n        amount=0.05,\n        state_init=collection.state_init,\n    )\n\n    print(f\"Successfully deployed NFT Collection at address: {collection.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_10","title":"\u0412\u044b\u043f\u0443\u0441\u043a NFT","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditableModified, NFTEditableModified\nfrom tonutils.nft.content import NFTModifiedOnchainContent\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the owner of the NFT and the NFT collection contract\nOWNER_ADDRESS = \"UQ...\"\nCOLLECTION_ADDRESS = \"EQ...\"\n\n# Index of the NFT to be minted\nNFT_INDEX = 0\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft = NFTEditableModified(\n        index=NFT_INDEX,\n        collection_address=Address(COLLECTION_ADDRESS),\n    )\n    body = CollectionEditableModified.build_mint_body(\n        index=NFT_INDEX,\n        owner_address=Address(OWNER_ADDRESS),\n        content=NFTModifiedOnchainContent(\n            name=\"TON Collectible #0\",\n            description=\"Memorable token for completing an onboarding quest about the TON ecosystem\",\n            image_data=b'image data',\n        ),\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully minted NFT with index {NFT_INDEX}: {nft.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#_7","title":"\u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import CollectionEditableModified\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT collection contract\nCOLLECTION_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = CollectionEditableModified.build_return_balance()\n\n    tx_hash = await wallet.transfer(\n        destination=COLLECTION_ADDRESS,\n        amount=0.02,\n        body=body,\n    )\n\n    print(f\"Successfully returned the balance of collection {COLLECTION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft-getgemsio","title":"\u041f\u0440\u043e\u0434\u0430\u0436\u0430 NFT \u043d\u0430 Getgems.io","text":""},{"location":"ru/guide/examples/nft-operations/#nft_11","title":"\u0412\u044b\u0441\u0442\u0430\u0432\u0438\u0442\u044c NFT \u043d\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0443","text":"<pre><code>from pytoniq_core import Address\n\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection, NFT\nfrom tonutils.nft.marketplace.getgems.addresses import *\nfrom tonutils.nft.marketplace.getgems.contract.salev3r3 import SaleV3R3\nfrom tonutils.utils import to_nano\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be listed for sale\nNFT_ADDRESS = \"EQ..\"\n\n# Sale price for the NFT in TON\nPRICE = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft_data = await NFT.get_nft_data(client, NFT_ADDRESS)\n    royalty_params = await Collection.get_royalty_params(client, nft_data.collection_address)\n\n    price = to_nano(PRICE)\n    royalty_fee = int(price * (royalty_params.base / royalty_params.factor))\n    marketplace_fee = int(price * 0.05)\n\n    sale = SaleV3R3(\n        nft_address=NFT_ADDRESS,\n        owner_address=wallet.address,\n        marketplace_address=TESTNET_GETGEMS_ADDRESS if IS_TESTNET else GETGEMS_ADDRESS,\n        marketplace_fee_address=TESTNET_GETGEMS_FEE_ADDRESS if IS_TESTNET else GETGEMS_FEE_ADDRESS,\n        royalty_address=royalty_params.address,\n        marketplace_fee=marketplace_fee,\n        royalty_fee=royalty_fee,\n        price=price,\n    )\n    body = sale.build_transfer_nft_body(\n        destination=Address(TESTNET_GETGEMS_DEPLOYER_ADDRESS if IS_TESTNET else GETGEMS_DEPLOYER_ADDRESS),\n        owner_address=wallet.address,\n        state_init=sale.state_init,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=NFT_ADDRESS,\n        amount=0.25,\n        body=body,\n    )\n\n    # Print the result of the operation\n    print(f\"NFT {NFT_ADDRESS} successfully put on sale at price {PRICE} TON.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_12","title":"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0446\u0435\u043d\u0443 NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection, NFT\nfrom tonutils.nft.marketplace.getgems.contract.salev3r3 import SaleV3R3\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT and sale contract\nNFT_ADDRESS = \"EQ...\"\nSALE_ADDRESS = \"EQ...\"\n\n# New sale price for the NFT in TON\nPRICE = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    nft_data = await NFT.get_nft_data(client, NFT_ADDRESS)\n    royalty_params = await Collection.get_royalty_params(client, nft_data.collection_address)\n\n    price = int(PRICE * 1e9)\n    royalty_fee = int(price * (royalty_params.base / royalty_params.factor))\n    marketplace_fee = int(price * 0.05)\n\n    body = SaleV3R3.build_change_price_body(\n        marketplace_fee=marketplace_fee,\n        royalty_fee=royalty_fee,\n        price=price,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=SALE_ADDRESS,\n        amount=0.005,\n        body=body,\n    )\n\n    print(f\"Successfully updated the price for NFT sale.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/nft-operations/#nft_13","title":"\u0421\u043d\u044f\u0442\u044c NFT \u0441 \u043f\u0440\u043e\u0434\u0430\u0436\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft.marketplace.getgems.contract.salev3r3 import SaleV3R3\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the sale contract\nSALE_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = SaleV3R3.build_cancel_sale_body()\n\n    tx_hash = await wallet.transfer(\n        destination=SALE_ADDRESS,\n        amount=0.2,\n        body=body,\n    )\n\n    print(\"Sale has been successfully canceled.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/ton-connect-operations/","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 TON Connect","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 TON Connect \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code>. \u041e\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043e\u0442\u0432\u0435\u0442\u043e\u0432.</p> <p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0420\u0435\u0446\u0435\u043f\u0442\u044b: \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f TON Connect.</p>"},{"location":"ru/guide/examples/ton-connect-operations/#_1","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430","text":"<pre><code>import json\nimport os\nfrom asyncio import Lock\nfrom typing import Dict, Optional\n\nimport aiofiles\n\nfrom tonutils.tonconnect import IStorage\n\n\nclass FileStorage(IStorage):\n    \"\"\"\n    File-based asynchronous implementation of TonConnect IStorage interface.\n\n    Stores key-value pairs in a local JSON file using asyncio-compatible file I/O.\n\n    :param file_path: Path to the JSON file used for persistent storage.\n    \"\"\"\n\n    def __init__(self, file_path: str):\n        self.file_path = file_path\n        self.lock = Lock()\n\n        if not os.path.exists(self.file_path):\n            with open(self.file_path, \"w\") as f:\n                json.dump({}, f)\n\n    async def _read_data(self) -&gt; Dict[str, str]:\n        \"\"\"\n        Read the current contents of the JSON storage file.\n\n        :return: Dictionary containing all stored key-value pairs.\n        \"\"\"\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"r\") as f:\n                content = await f.read()\n                return json.loads(content) if content else {}\n\n    async def _write_data(self, data: Dict[str, str]) -&gt; None:\n        \"\"\"\n        Write a new dictionary to the JSON storage file.\n\n        :param data: Key-value pairs to persist.\n        \"\"\"\n        async with self.lock:\n            async with aiofiles.open(self.file_path, \"w\") as f:\n                await f.write(json.dumps(data, indent=4))\n\n    async def set_item(self, key: str, value: str) -&gt; None:\n        \"\"\"\n        Set a key-value pair in storage.\n\n        :param key: Key to set.\n        :param value: Value to associate with the key.\n        \"\"\"\n        data = await self._read_data()\n        data[key] = value\n        await self._write_data(data)\n\n    async def get_item(self, key: str, default_value: Optional[str] = None) -&gt; Optional[str]:\n        \"\"\"\n        Retrieve the value associated with a key.\n\n        :param key: Key to retrieve.\n        :param default_value: Value to return if the key is not found.\n        :return: Stored value or default if not found.\n        \"\"\"\n        data = await self._read_data()\n        return data.get(key, default_value)\n\n    async def remove_item(self, key: str) -&gt; None:\n        \"\"\"\n        Remove a key-value pair from storage.\n\n        :param key: Key to remove.\n        \"\"\"\n        data = await self._read_data()\n        if key in data:\n            del data[key]\n            await self._write_data(data)\n</code></pre>"},{"location":"ru/guide/examples/ton-connect-operations/#_2","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<pre><code>from storage import FileStorage\n\nfrom tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import *\nfrom tonutils.tonconnect.utils import generate_proof_payload\nfrom tonutils.tonconnect.utils.exceptions import *\n\n# Public URL to the application manifest.\n# The manifest defines app metadata (name, icon, URL, permissions).\n# Reference: https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#app-manifest\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\n\n# Storage backend for persisting wallet connection data.\n# File-based implementation using aiofiles.\nTC_STORAGE = FileStorage(\"connection.json\")\n\n# Initialize TonConnect with storage, manifest, and fallback wallet list.\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n\n\n@tc.on_event(Event.CONNECT)\nasync def on_wallet_connect(user_id: int, wallet: WalletInfo) -&gt; None:\n    \"\"\"\n    Handle successful wallet connection.\n\n    :param user_id: Identifier of the connected user.\n    :param wallet: Connected wallet information.\n\n    WalletInfo contains:\n        - wallet.account: Address, chain ID, state init, and optional public key.\n        - wallet.ton_proof: Domain, payload, signature, and timestamp.\n        - wallet.device: Device information such as platform and app version.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.CONNECT, comment=\"example\")\n    \"\"\"\n    wallet_address = wallet.account.address.to_str(is_bounceable=False)\n    print(f\"[Event CONNECT] Wallet {wallet_address} connected to user {user_id}.\")\n\n\n@tc.on_event(EventError.CONNECT)\nasync def on_wallet_connect_error(user_id: int, error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during wallet connection.\n\n    :param user_id: Identifier of the user attempting connection.\n    :param error: Raised error during the connection attempt.\n\n    Recognized error types:\n        - UserRejectsError: The user rejected the connection.\n        - RequestTimeoutError: Wallet did not respond within timeout.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, UserRejectsError):\n        print(f\"[EventError CONNECT] User {user_id} rejected the wallet connection.\")\n    elif isinstance(error, RequestTimeoutError):\n        print(f\"[EventError CONNECT] Connection request timed out for user {user_id}.\")\n    else:\n        print(f\"[EventError CONNECT] Connection error for user {user_id}: {error.message}\")\n\n\n@tc.on_event(Event.DISCONNECT)\nasync def on_wallet_disconnect(user_id: int, wallet: WalletInfo) -&gt; None:\n    \"\"\"\n    Handle successful wallet disconnection.\n\n    :param user_id: Identifier of the user whose wallet was disconnected.\n    :param wallet: Disconnected wallet information.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.DISCONNECT, comment=\"example\")\n    \"\"\"\n    wallet_address = wallet.account.address.to_str(is_bounceable=False)\n    print(f\"[Event DISCONNECT] Wallet {wallet_address} disconnected from user {user_id}.\")\n\n\n@tc.on_event(EventError.DISCONNECT)\nasync def on_wallet_disconnect_error(user_id: int, error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during wallet disconnection.\n\n    :param user_id: Identifier of the user whose wallet failed to disconnect.\n    :param error: Raised error during the disconnect attempt.\n\n    Recognized error types:\n        - RequestTimeoutError: Wallet did not respond to the disconnect request.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, RequestTimeoutError):\n        print(f\"[EventError DISCONNECT] Disconnect request timed out for user {user_id}.\")\n    else:\n        print(f\"[EventError DISCONNECT] Disconnect error for user {user_id}: {error.message}\")\n\n\nasync def main() -&gt; None:\n    user_id = 12345  # Example user identifier\n\n    # Initialize the connector for the user\n    connector = await tc.init_connector(user_id)\n\n    # Generate a TON Connect proof payload for authentication\n    ton_proof = generate_proof_payload()\n\n    # Check wallet connection\n    if not connector.connected:\n        print(\"Wallet not connected! Please connect the wallet to continue.\")\n\n        # Get all available wallets\n        wallets = await tc.get_wallets()\n\n        # As an example, we will select the wallet with index 1 (Tonkeeper)\n        selected_wallet = wallets[1]\n        connect_url = await connector.connect_wallet(selected_wallet, ton_proof=ton_proof)\n\n        print(f\"Please connect your wallet by visiting the following URL:\\n{connect_url}\")\n        print(\"Waiting for wallet connection...\")\n\n        # Add additional parameters to be passed to event handlers\n        connector.add_event_kwargs(event=Event.TRANSACTION, comment=\"Hello from tonutils!\")\n\n        # In addition to the handler, you can use a context manager to get the connection result\n        async with connector.connect_wallet_context() as response:\n            if isinstance(response, TonConnectError):\n                print(f\"Connection error: {response.message}\")\n            else:\n                if connector.wallet.verify_proof_payload(ton_proof):\n                    wallet_address = response.account.address.to_str(is_bounceable=False)\n                    print(f\"Connected wallet: {wallet_address}\")\n                else:\n                    await connector.disconnect_wallet()\n                    print(\"Proof verification failed.\")\n    else:\n        wallet_address = connector.account.address.to_str(is_bounceable=False)\n        print(f\"Wallet already connected: {wallet_address}\")\n\n        user_input = input(\"Do you want to disconnect the wallet? (y/n): \").strip().lower()\n        if user_input == \"y\":\n            await connector.disconnect_wallet()\n            print(\"Wallet successfully disconnected.\")\n        else:\n            print(\"Wallet remains connected.\")\n\n    await tc.close_all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    try:\n        asyncio.run(main())\n    except (KeyboardInterrupt, SystemExit):\n        asyncio.run(tc.close_all())\n</code></pre>"},{"location":"ru/guide/examples/ton-connect-operations/#_3","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438","text":"<pre><code>from storage import FileStorage\n\nfrom tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import *\nfrom tonutils.tonconnect.utils.exceptions import *\nfrom tonutils.wallet.messages import TransferMessage\n\n# Public URL to the application manifest.\n# The manifest defines app metadata (name, icon, URL, permissions).\n# Reference: https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#app-manifest\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\n\n# Storage backend for persisting wallet connection data.\n# File-based implementation using aiofiles.\nTC_STORAGE = FileStorage(\"connection.json\")\n\n# Initialize TonConnect with storage, manifest, and fallback wallet list.\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n\n\n@tc.on_event(Event.TRANSACTION)\nasync def on_transaction(transaction: SendTransactionResponse) -&gt; None:\n    \"\"\"\n    Handle successful transaction event.\n\n    :param transaction: Transaction response containing BoC, hash, and message cell.\n\n    Transaction details:\n        - transaction.boc (str): Raw BoC of the outgoing message.\n        - transaction.normalized_hash (str): Hash of the message for tracking.\n        - transaction.cell (Cell): Parsed message cell.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.TRANSACTION, comment=\"example\")\n    \"\"\"\n    print(f\"[Event TRANSACTION] Transaction sent successfully. Message hash: {transaction.normalized_hash}\")\n\n\n@tc.on_event(EventError.TRANSACTION)\nasync def on_transaction_error(error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during transaction sending.\n\n    :param error: Error raised when the transaction could not be processed.\n\n    Recognized error types:\n        - UserRejectsError: The user rejected the transaction.\n        - RequestTimeoutError: The wallet did not respond in time.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, UserRejectsError):\n        print(\"[EventError TRANSACTION] User rejected the transaction.\")\n    elif isinstance(error, RequestTimeoutError):\n        print(\"[EventError TRANSACTION] Transaction request timed out.\")\n    else:\n        print(f\"[EventError TRANSACTION] Failed to send transaction: {error.message}\")\n\n\nasync def main() -&gt; None:\n    user_id = 12345  # Example user identifier\n\n    # Initialize the connector for the user\n    connector = await tc.init_connector(user_id)\n\n    # Start the event processing loop\n    while True:\n        # Check wallet connection\n        if not connector.connected:\n            print(\"Wallet not connected! Please connect the wallet to continue.\")\n\n            # Get all available wallets\n            wallets = await tc.get_wallets()\n\n            # As an example, we will select the wallet with index 1 (Tonkeeper)\n            selected_wallet = wallets[1]\n            connect_url = await connector.connect_wallet(selected_wallet)\n\n            print(f\"Please connect your wallet by visiting the following URL:\\n{connect_url}\")\n            print(\"Waiting for wallet connection...\")\n\n            async with connector.connect_wallet_context() as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Connection error: {response.message}\")\n                    continue\n                wallet_address = response.account.address.to_str(is_bounceable=False)\n                print(f\"Connected wallet: {wallet_address}\")\n\n        # If the wallet is connected, prompt the user to choose an action\n        call = input(\n            \"\\nChoose an action:\\n\"\n            \"1. Send a transaction\\n\"\n            \"2. Send a batch of transactions\\n\"\n            \"3. Disconnect wallet\\n\"\n            \"q. Quit\\n\"\n            \"\\nEnter your choice: \"\n        ).strip()\n\n        if call in [\"1\", \"2\"]:\n            if call == \"1\":\n                print(\"Preparing to send one transaction...\")\n                rpc_request_id = await connector.send_transfer(\n                    destination=connector.account.address,\n                    amount=0.000000001,\n                    body=\"Hello from tonutils!\",\n                )\n                print(\"Request to send one transaction has been sent.\")\n            else:\n                print(\"Preparing to send a batch of transactions...\")\n                # Get the maximum number of messages supported in a transaction\n                max_messages = connector.device.get_max_supported_messages(connector.wallet)\n                print(f\"Maximum number of messages: {max_messages}. Sending {max_messages} transactions...\")\n\n                rpc_request_id = await connector.send_batch_transfer(\n                    messages=[\n                        TransferMessage(\n                            destination=connector.account.address,\n                            amount=0.000000001,\n                            body=\"Hello from tonutils!\",\n                        ) for _ in range(max_messages)  # Create the maximum number of messages\n                    ]\n                )\n                print(\"Request to send a batch of transactions has been sent.\")\n\n            # Add additional parameters to be passed to event handlers\n            connector.add_event_kwargs(event=Event.TRANSACTION, comment=\"Hello from tonutils!\")\n\n            # Get the transaction status (whether it has been confirmed by the user in the wallet)\n            # Note: This is different from blockchain confirmation\n            is_pending = connector.is_request_pending(rpc_request_id)\n            print(f\"Transaction is pending confirmation: {is_pending}\")\n\n            # In addition to the handler, you can use a context manager to get the transaction result by rpc_request_id\n            async with connector.pending_request_context(rpc_request_id) as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Error sending transaction: {response.message}\")\n                else:\n                    print(f\"Transaction successful! Hash: {response.normalized_hash}\")\n\n        elif call == \"3\":\n            await connector.disconnect_wallet()\n            print(\"Wallet successfully disconnected.\")\n            continue\n\n        elif call.lower() == \"q\":\n            print(\"Exiting the program...\")\n            break\n\n        else:\n            print(\"Invalid choice! Please select a valid option.\")\n\n    await tc.close_all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    try:\n        asyncio.run(main())\n    except (KeyboardInterrupt, SystemExit):\n        asyncio.run(tc.close_all())\n</code></pre>"},{"location":"ru/guide/examples/ton-connect-operations/#_4","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>from pytoniq_core import begin_cell\nfrom storage import FileStorage\n\nfrom tonutils.tonconnect import TonConnect\nfrom tonutils.tonconnect.models import *\nfrom tonutils.tonconnect.utils.exceptions import *\n\n# Public URL to the application manifest.\n# The manifest defines app metadata (name, icon, URL, permissions).\n# Reference: https://github.com/ton-blockchain/ton-connect/blob/main/requests-responses.md#app-manifest\nTC_MANIFEST_URL = \"https://raw.githubusercontent.com/nessshon/tonutils/main/examples/tonconnect/tonconnect-manifest.json\"\n\n# Storage backend for persisting wallet connection data.\n# File-based implementation using aiofiles.\nTC_STORAGE = FileStorage(\"connection.json\")\n\n# Initialize TonConnect with storage, manifest, and fallback wallet list.\ntc = TonConnect(\n    storage=TC_STORAGE,\n    manifest_url=TC_MANIFEST_URL,\n    wallets_fallback_file_path=\"./wallets.json\"\n)\n\n\n@tc.on_event(Event.SIGN_DATA)\nasync def on_sign_data(sign_data: SignDataResponse) -&gt; None:\n    \"\"\"\n    Handle successful sign data event.\n\n    :param sign_data: Response containing signed data result.\n\n    SignDataResponse details:\n        - sign_data.result (str): Base64-encoded signed payload.\n        - sign_data.original (dict): Original payload that was signed.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    Example:\n        connector.add_event_kwargs(event=Event.SIGN_DATA, comment=\"example\")\n    \"\"\"\n    print(f\"[Event SIGN_DATA] Data to sign: {sign_data.result}\")\n\n\n@tc.on_event(EventError.SIGN_DATA)\nasync def on_sign_data_error(error: TonConnectError) -&gt; None:\n    \"\"\"\n    Handle errors during sign data request.\n\n    :param error: Error raised when sign data could not be processed.\n\n    Recognized error types:\n        - UserRejectsError: The user rejected the sign data request.\n        - RequestTimeoutError: The wallet did not respond in time.\n\n    Additional parameters can be passed via `connector.add_event_kwargs()`.\n    \"\"\"\n    if isinstance(error, UserRejectsError):\n        print(\"[EventError SIGN_DATA] User rejected the sign data request.\")\n    elif isinstance(error, RequestTimeoutError):\n        print(\"[EventError SIGN_DATA] Sign data request timed out.\")\n    else:\n        print(f\"[EventError SIGN_DATA] Failed to send sign data: {error.message}\")\n\n\nasync def main() -&gt; None:\n    user_id = 12345  # Example user identifier\n\n    # Initialize the connector for the user\n    connector = await tc.init_connector(user_id)\n\n    # Start the event processing loop\n    while True:\n        # Check wallet connection\n        if not connector.connected:\n            print(\"Wallet not connected. Please connect a wallet to continue.\")\n\n            # Get all available wallets\n            wallets = await tc.get_wallets()\n\n            # As an example, we will select the wallet with index 1 (Tonkeeper)\n            selected_wallet = wallets[1]\n            connect_url = await connector.connect_wallet(selected_wallet)\n\n            print(f\"Please connect your wallet by visiting the following URL:\\n{connect_url}\")\n            print(\"Waiting for wallet connection...\")\n\n            async with connector.connect_wallet_context() as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Connection error: {response.message}\")\n                    continue\n                wallet_address = response.account.address.to_str(is_bounceable=False)\n                print(f\"Connected wallet: {wallet_address}\")\n\n        call = input(\n            \"\\nChoose an action:\\n\"\n            \"1. Sign Text Data\\n\"\n            \"2. Sign Binary Data\\n\"\n            \"3. Sign Cell Data\\n\"\n            \"d. Disconnect Wallet\\n\"\n            \"q. Quit\\n\"\n            \"\\nEnter your choice: \"\n        ).strip().lower()\n\n        if call == \"q\":\n            print(\"Exiting the program...\")\n            break\n\n        elif call == \"d\":\n            await connector.disconnect_wallet()\n            print(\"Wallet successfully disconnected.\")\n            continue\n\n        elif call in {\"1\", \"2\", \"3\"}:\n            data = \"Hello from tonutils!\"\n\n            if call == \"1\":\n                payload = SignDataPayloadText(text=data)\n            elif call == \"2\":\n                payload = SignDataPayloadBinary(bytes=data.encode(\"utf-8\"))\n            else:\n                payload = SignDataPayloadCell(\n                    cell=begin_cell().store_uint(0, 32).store_snake_string(data).end_cell(),\n                    schema=\"text_comment#00000000 text:Snakedata = InMsgBody;\"\n                )\n\n            try:\n                connector.device.verify_sign_data_feature(connector.wallet, payload)\n            except WalletNotSupportFeatureError:\n                print(\"Wallet does not support sign data feature.\")\n                continue\n\n            rpc_request_id = await connector.sign_data(payload)\n\n            # Add additional parameters to be passed to event handlers\n            connector.add_event_kwargs(event=Event.SIGN_DATA, comment=\"Hello from tonutils!\")\n\n            # Get the transaction status (whether it has been confirmed by the user in the wallet)\n            # Note: This is different from blockchain confirmation\n            is_pending = connector.is_request_pending(rpc_request_id)\n            print(f\"Sign data is pending confirmation: {is_pending}\")\n\n            # In addition to the handler, you can use a context manager to get the sign data result by rpc_request_id\n            async with connector.pending_request_context(rpc_request_id) as response:\n                if isinstance(response, TonConnectError):\n                    print(f\"Error sending sign data: {response.message}\")\n                else:\n                    key = connector.wallet.account.public_key\n                    if response.verify_sign_data(key):\n                        print(\"Verified sign data.\")\n                    else:\n                        print(\"Failed to verify sign data.\")\n        else:\n            print(\"Invalid choice. Please select a valid option.\")\n\n    await tc.close_all()\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    try:\n        asyncio.run(main())\n    except (KeyboardInterrupt, SystemExit):\n        asyncio.run(tc.close_all())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/","title":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u041a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u043c","text":"<p>\u042d\u0442\u043e\u0442 \u0440\u0430\u0437\u0434\u0435\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>tonutils</code>. \u041e\u043d \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0434\u0435\u043f\u043b\u043e\u0439 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432</li> <li>\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0438\u0437 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u043a\u0438 \u0438\u043b\u0438 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 (TON, NFT, Jetton)</li> <li>\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b</li> <li>\u041e\u0431\u043c\u0435\u043d Jetton (\u0447\u0435\u0440\u0435\u0437 STON.fi \u0438 DeDust.io)</li> </ul>"},{"location":"ru/guide/examples/wallet-operations/#_1","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438","text":"<p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0440\u0441\u0438\u0439 \u0438 \u0442\u0438\u043f\u043e\u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432:</p> <ul> <li>\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438:   <code>WalletV2R1</code>, <code>WalletV2R2</code>, <code>WalletV3R1</code>, <code>WalletV3R2</code>, <code>WalletV4R1</code>, <code>WalletV4R2</code>, <code>WalletV5R1</code></li> <li>Highload-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438 (\u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0431\u0438\u0440\u0436):   <code>HighloadWalletV2</code>, <code>HighloadWalletV3</code></li> <li>Preprocessed \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0438 (\u0434\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u043d\u044b\u0445 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439):   <code>PreprocessedWalletV2</code>, <code>PreprocessedWalletV2R1</code></li> </ul>"},{"location":"ru/guide/examples/wallet-operations/#_2","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438","text":"<ul> <li>\u0414\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u0438 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 v3r2 \u0434\u043e v5r1, \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e v5r1 \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438.</li> <li>\u0414\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0441 \u0431\u0438\u0440\u0436\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 HighloadWalletV3.</li> <li>\u0414\u043b\u044f \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0433\u0430\u0437\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0438\u043f\u044b PreprocessedWallet.</li> </ul>"},{"location":"ru/guide/examples/wallet-operations/#_3","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<p>\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>.create()</code> \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u043d \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0441 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c, \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c \u043a\u043b\u044e\u0447\u043e\u043c \u0438 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0440\u0430\u0437\u043e\u0439.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import (\n    # Uncomment the following lines to use different wallet versions:\n    # WalletV2R1,\n    # WalletV2R2,\n    # WalletV3R1,\n    # WalletV3R2,\n    # WalletV4R1,\n    WalletV4R2,\n    # WalletV5R1,\n    # HighloadWalletV2,\n    # HighloadWalletV3,\n    # PreprocessedWalletV2,\n    # PreprocessedWalletV2R1,\n)\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.create(client)\n\n    # Uncomment and use the following lines to create different wallet versions:\n    # wallet, public_key, private_key, mnemonic = WalletV3R2.create(client)\n    # wallet, public_key, private_key, mnemonic = WalletV4R1.create(client)\n    # wallet, public_key, private_key, mnemonic = WalletV4R2.create(client)\n    # wallet, public_key, private_key, mnemonic = WalletV5R1.create(client)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV2.create(client)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV3.create(client)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2.create(client)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2R1.create(client)\n\n    print(\"Wallet has been successfully created!\")\n    print(f\"Address: {wallet.address.to_str()}\")\n    print(f\"Mnemonic: {mnemonic}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#_4","title":"\u0418\u043c\u043f\u043e\u0440\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<p>\u041a\u043e\u0448\u0435\u043b\u0451\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0440\u0430\u0437\u044b \u0438\u043b\u0438 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430.</p>"},{"location":"ru/guide/examples/wallet-operations/#_5","title":"\u0418\u0437 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u043a\u0438","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    print(f\"Wallet address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#_6","title":"\u0418\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Private key (32 or 64 bytes)\nPRIVATE_KEY: bytes = b\"your_private_key_bytes\"\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet = WalletV4R2.from_private_key(client, PRIVATE_KEY)\n\n    print(f\"Wallet address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#_7","title":"\u0414\u0435\u043f\u043b\u043e\u0439 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430","text":"<p>\u0414\u043b\u044f \u0434\u0435\u043f\u043b\u043e\u044f \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e \u0438\u0437 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u043a\u0438 \u0438 \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>.deploy()</code>. \u042d\u0442\u043e \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0435\u0442 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 \u0432 \u0441\u0435\u0442\u0438.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import (\n    # Uncomment the following lines to use different wallet versions:\n    # WalletV2R1,\n    # WalletV2R2,\n    # WalletV3R1,\n    # WalletV3R2,\n    # WalletV4R1,\n    WalletV4R2,\n    # WalletV5R1,\n    # HighloadWalletV2,\n    # HighloadWalletV3,\n    # PreprocessedWalletV2,\n    # PreprocessedWalletV2R1,\n)\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    # Uncomment and use the following lines to create different wallet versions from mnemonic:\n    # wallet, public_key, private_key, mnemonic = WalletV2R1.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV2R2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV3R2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV4R1.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = WalletV5R1.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = HighloadWalletV3.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2.from_mnemonic(client, MNEMONIC)\n    # wallet, public_key, private_key, mnemonic = PreprocessedWalletV2R1.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.deploy()\n\n    print(f\"Wallet deployed successfully!\")\n    print(f\"Wallet address: {wallet.address.to_str()}\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#_8","title":"\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u044b","text":""},{"location":"ru/guide/examples/wallet-operations/#ton","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 TON","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Optional comment to include in the forward payload\nCOMMENT = \"Hello from tonutils!\"\n\n# Amount to transfer in TON\nAMOUNT = 0.01\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer(\n        destination=DESTINATION_ADDRESS,\n        amount=AMOUNT,\n        body=COMMENT,\n    )\n\n    print(f\"Successfully transferred {AMOUNT} TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#nft","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferNFTMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the NFT to be transferred and the new owner address\nNFT_ADDRESS = \"EQ...\"\nNEW_OWNER_ADDRESS = \"UQ...\"\n\n# Optional comment to include in the forward payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=TransferNFTMessage(\n            destination=NEW_OWNER_ADDRESS,\n            nft_address=NFT_ADDRESS,\n            forward_payload=COMMENT,\n        ),\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to transfer (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Comment to include in the transfer payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=TransferJettonMessage(\n            destination=DESTINATION_ADDRESS,\n            jetton_master_address=JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n            forward_payload=COMMENT,\n        ),\n    )\n\n    print(f\"Successfully transferred {JETTON_AMOUNT} jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#_9","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b","text":""},{"location":"ru/guide/examples/wallet-operations/#ton_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 TON","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n            TransferMessage(\n                destination=\"UQ...\",\n                amount=0.01,\n                body=\"Hello from tonutils!\",\n            ),\n        ]\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#nft_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 NFT","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferNFTMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferNFTMessage(\n                destination=\"UQ...\",\n                nft_address=\"EQ..\",\n                forward_payload=\"Hello from tonutils!\",\n            )\n        ]\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 Jetton","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import TransferJettonMessage\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n            TransferJettonMessage(\n                destination=\"UQ...\",\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n                forward_payload=\"Hello from tonutils!\",\n            ),\n        ]\n    )\n\n    print(\"Successfully transferred!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton_2","title":"\u041e\u0431\u043c\u0435\u043d Jetton","text":""},{"location":"ru/guide/examples/wallet-operations/#stonfi","title":"\u0427\u0435\u0440\u0435\u0437 STON.fi","text":""},{"location":"ru/guide/examples/wallet-operations/#ton-jetton","title":"\u041e\u0431\u043c\u0435\u043d TON \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapTONToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master for swapping (TON &gt; USD\u20ae)\nTO_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap (in TON)\nSWAP_TON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=StonfiSwapTONToJettonMessage(\n            jetton_master_address=TO_JETTON_MASTER_ADDRESS,\n            ton_amount=SWAP_TON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-ton","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 TON","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToTONMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master for swapping (TON &gt; USD\u20ae)\nTO_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=StonfiSwapJettonToTONMessage(\n            jetton_master_address=TO_JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-jetton","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs\"  # noqa\nTO_JETTON_MASTER_ADDRESS = \"EQAvlWFDxGF2lXm67y4yzC17wYKD9A0guwPkMs1gOsM__NOT\"  # noqa\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 6\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=StonfiSwapJettonToJettonMessage(\n            from_jetton_master_address=FROM_JETTON_MASTER_ADDRESS,\n            to_jetton_master_address=TO_JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            from_jetton_decimals=FROM_JETTON_DECIMALS,\n            to_jetton_decimals=TO_JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#ton-jetton_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d TON \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapTONToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ],\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-ton_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d Jetton \u2192 TON","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToTONMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            StonfiSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ],\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-jetton_1","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d Jetton \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 STON.fi. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import StonfiSwapJettonToJettonMessage\n\n# Set to True for the test network, False for the main network\nIS_TESTNET = False\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            StonfiSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n        ],\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#dedustio","title":"\u0427\u0435\u0440\u0435\u0437 DeDust.io","text":""},{"location":"ru/guide/examples/wallet-operations/#ton-jetton_2","title":"\u041e\u0431\u043c\u0435\u043d TON \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapTONToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of TON to swap (in TON)\nSWAP_TON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=DedustSwapTONToJettonMessage(\n            jetton_master_address=JETTON_MASTER_ADDRESS,\n            ton_amount=SWAP_TON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-ton_2","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 TON","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToTONMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=DedustSwapJettonToTONMessage(\n            jetton_master_address=JETTON_MASTER_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            jetton_decimals=JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to TON!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-jetton_2","title":"\u041e\u0431\u043c\u0435\u043d Jetton \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Addresses of the Jetton Masters for swapping\nFROM_JETTON_MASTER_ADDRESS = \"EQ...\"\nTO_JETTON_MASTER_B_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nFROM_JETTON_DECIMALS = 9\nTO_JETTON_DECIMALS = 9\n\n# Amount of Jettons to swap (in base units, considering decimals)\nJETTON_AMOUNT = 1\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.transfer_message(\n        message=DedustSwapJettonToJettonMessage(\n            from_jetton_master_address=FROM_JETTON_MASTER_ADDRESS,\n            to_jetton_master_address=TO_JETTON_MASTER_B_ADDRESS,\n            jetton_amount=JETTON_AMOUNT,\n            from_jetton_decimals=FROM_JETTON_DECIMALS,\n            to_jetton_decimals=TO_JETTON_DECIMALS,\n        ),\n    )\n\n    print(\"Successfully swapped Jetton to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#ton-jetton_3","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d TON \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapTONToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapTONToJettonMessage(\n                jetton_master_address=\"EQ...\",\n                ton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ]\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-ton_3","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d Jetton \u2192 TON","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToTONMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n            DedustSwapJettonToTONMessage(\n                jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                jetton_decimals=9,\n            ),\n        ]\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/guide/examples/wallet-operations/#jetton-jetton_3","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u043c\u0435\u043d Jetton \u2192 Jetton","text":"<p>Note</p> <p>\u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 DeDust.io. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441 \u043e\u0441\u0442\u043e\u0440\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438. \u0410\u0432\u0442\u043e\u0440 \u043d\u0435 \u043d\u0435\u0441\u0451\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0437\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432. \u041d\u0430\u0448\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request.</p> <pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\nfrom tonutils.wallet.messages import DedustSwapJettonToJettonMessage\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    tx_hash = await wallet.batch_transfer_messages(\n        messages=[\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n            DedustSwapJettonToJettonMessage(\n                from_jetton_master_address=\"EQ...\",\n                to_jetton_master_address=\"EQ...\",\n                jetton_amount=0.01,\n                from_jetton_decimals=9,\n                to_jetton_decimals=9,\n            ),\n        ]\n    )\n\n    print(\"Successfully swapped TON to Jetton!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/create-multiple-wallets/","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u041a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0444\u0440\u0430\u0437\u044b \u043f\u0443\u0442\u0451\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>subwallet_id</code>. \u041a\u0430\u0436\u0434\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>subwallet_id</code> \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 seed-\u0444\u0440\u0430\u0437\u044b.</p>"},{"location":"ru/how-to/create-multiple-wallets/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Subwallet ID\nWALLET_ID = 0\n\n\ndef main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC, WALLET_ID)\n\n    print(f\"Address: {wallet.address.to_str()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/create-multiple-wallets/#_2","title":"\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ul> <li><code>subwallet_id</code> \u2192 32-\u0431\u0438\u0442\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u043c\u043d\u0435\u043c\u043e\u043d\u0438\u043a\u0438.</li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430\u043c.</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0431\u0430\u043b\u0430\u043d\u0441\u0430\u043c\u0438.</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u044b\u0445 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u043c\u0438.</li> </ul> </li> </ul>"},{"location":"ru/how-to/create-multiple-wallets/#_3","title":"\u0412\u0430\u0436\u043d\u044b\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f","text":"<ul> <li> <p><code>subwallet_id</code> (\u0438\u043b\u0438 <code>wallet_id</code>) \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0442\u0438\u043f\u0430\u0445 \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432:</p> <ul> <li><code>WalletV2*</code></li> <li><code>PreprocessedWallet*</code></li> </ul> </li> <li> <p>\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f <code>wallet_id</code> \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:</p> <ul> <li>\u0412\u0441\u0435 \u0442\u0438\u043f\u044b \u043a\u043e\u0448\u0435\u043b\u044c\u043a\u043e\u0432, \u043a\u0440\u043e\u043c\u0435 <code>WalletV5R1</code> \u2192 <code>698983191</code></li> <li> <p>\u0414\u043b\u044f <code>WalletV5R1</code>:</p> global_id workchain wallet_version subwallet_number wallet_id -239 0 0 0 2147483409 -239 -1 0 0 8388369 -3 0 0 0 2147483645 -3 -1 0 0 8388605 </li> </ul> </li> </ul>"},{"location":"ru/how-to/get-contract-code-and-data/","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u041a\u043e\u0434\u0430 \u0438 \u0414\u0430\u043d\u043d\u044b\u0445 \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u0434 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 TON, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a tonviewer.com, tonscan.org \u0438 \u0434\u0440., \u043b\u0438\u0431\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 <code>get_raw_account</code>.</p>"},{"location":"ru/how-to/get-contract-code-and-data/#ton","title":"\u0427\u0435\u0440\u0435\u0437 \u043e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u0438 TON","text":"<ol> <li>\u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 \u0441\u0430\u0439\u0442 Tonviewer.</li> <li>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430.</li> <li>\u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0432\u043a\u043b\u0430\u0434\u043a\u0443 Code.</li> <li>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Bytecode \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</li> <li>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Raw data \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</li> </ol>"},{"location":"ru/how-to/get-contract-code-and-data/#get_raw_account","title":"\u0427\u0435\u0440\u0435\u0437 \u043c\u0435\u0442\u043e\u0434 <code>get_raw_account</code>","text":"<pre><code>from tonutils.client import ToncenterV3Client\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    contract_address = \"EQ...\"\n    account = await client.get_raw_account(contract_address)\n\n    # Print contract code (hex-encoded BOC)\n    print(account.code.to_boc().hex())\n\n    # Print contract data (hex-encoded BOC)\n    print(account.data.to_boc().hex())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> <p>\u041e\u0431\u0437\u043e\u0440 \u043f\u043e\u043b\u0435\u0439 RawAccount</p>"},{"location":"ru/how-to/get-contract-information/","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u041a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0431\u0430\u043b\u0430\u043d\u0441, \u0441\u0442\u0430\u0442\u0443\u0441, \u043a\u043e\u0434, \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p>"},{"location":"ru/how-to/get-contract-information/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from tonutils.client import ToncenterV3Client\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    contract_address = \"EQ...\"\n\n    contract = await client.get_raw_account(contract_address)\n\n    print(f\"Balance: {contract.balance}\")\n    print(f\"Status: {contract.status}\")\n    print(f\"Code: {contract.code}\")\n    print(f\"Data: {contract.data}\")\n    print(f\"Last Transaction LT: {contract.last_transaction_lt}\")\n    print(f\"Last Transaction Hash: {contract.last_transaction_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/get-contract-information/#rawaccount","title":"\u041e\u0431\u0437\u043e\u0440 \u043f\u043e\u043b\u0435\u0439 <code>RawAccount</code>","text":"<ul> <li> <p>balance \u2192 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e (\u0432 nanoTON)   \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> </li> <li> <p>status \u2192 \u0441\u0442\u0440\u043e\u043a\u0430   \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:</p> <ul> <li><code>active</code> \u2192 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u0430\u043a\u0442\u0438\u0432\u0435\u043d</li> <li><code>nonexist</code> \u2192 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442</li> <li><code>frozen</code> \u2192 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0437\u0430\u043c\u043e\u0440\u043e\u0436\u0435\u043d</li> <li><code>uninit</code> \u2192 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u043d\u043e \u043d\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d</li> </ul> </li> <li> <p>code \u2192 <code>Cell</code> (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)   \u0418\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0439 \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c).</p> </li> <li> <p>data \u2192 <code>Cell</code> (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)   \u041f\u0435\u0440\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c).</p> </li> <li> <p>last_transaction_lt \u2192 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)   \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0440\u0435\u043c\u044f (LT) \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p> </li> <li> <p>last_transaction_hash \u2192 \u0441\u0442\u0440\u043e\u043a\u0430 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)   \u0425\u0435\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p> </li> <li> <p>state_init \u2192 <code>StateInit</code> (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e)   \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430, \u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0438 \u043a\u043e\u0434, \u0438 \u0434\u0430\u043d\u043d\u044b\u0435.</p> </li> </ul>"},{"location":"ru/how-to/get-jetton-wallet-address/","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0410\u0434\u0440\u0435\u0441\u0430 \u041a\u043e\u0448\u0435\u043b\u044c\u043a\u0430 Jetton","text":"<p>\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0434\u0440\u0435\u0441 Jetton-\u043a\u043e\u0448\u0435\u043b\u044c\u043a\u0430.</p>"},{"location":"ru/how-to/get-jetton-wallet-address/#jetton","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 Jetton","text":""},{"location":"ru/how-to/get-jetton-wallet-address/#get-","title":"\u0427\u0435\u0440\u0435\u0437 get-\u043c\u0435\u0442\u043e\u0434","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStandard\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    owner_address = \"UQ...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = await JettonMasterStandard.get_wallet_address(\n        client,\n        owner_address,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/get-jetton-wallet-address/#_1","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442","text":"<p>Note</p> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 Jetton Wallet, \u0441\u043b\u0435\u0434\u0443\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> <pre><code>from tonutils.jetton import JettonMasterStandard\n\n\ndef main() -&gt; None:\n    owner_address = \"UQ...\"\n    jetton_wallet_code = \"...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = JettonMasterStandard.calculate_user_jetton_wallet_address(\n        owner_address,\n        jetton_wallet_code,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/get-jetton-wallet-address/#stablecoin-jetton","title":"Stablecoin Jetton","text":"<p>\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, USD\u20ae, NOT</p>"},{"location":"ru/how-to/get-jetton-wallet-address/#get-_1","title":"\u0427\u0435\u0440\u0435\u0437 get-\u043c\u0435\u0442\u043e\u0434","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.jetton import JettonMasterStablecoin\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    owner_address = \"UQ...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = await JettonMasterStablecoin.get_wallet_address(\n        client,\n        owner_address,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/get-jetton-wallet-address/#_2","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442","text":"<p>Note</p> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 Jetton Wallet, \u0441\u043b\u0435\u0434\u0443\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> <pre><code>from tonutils.jetton import JettonMasterStablecoin\n\n\ndef main() -&gt; None:\n    owner_address = \"UQ...\"\n    jetton_wallet_code = \"...\"\n    jetton_master_address = \"EQ...\"\n\n    wallet_address = JettonMasterStablecoin.calculate_user_jetton_wallet_address(\n        owner_address,\n        jetton_wallet_code,\n        jetton_master_address,\n    )\n    print(wallet_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/get-nft-item-address/","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0410\u0434\u0440\u0435\u0441\u0430 NFT-\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u0430","text":"<p>\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0434\u0440\u0435\u0441 NFT-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430.</p>"},{"location":"ru/how-to/get-nft-item-address/#_1","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438","text":""},{"location":"ru/how-to/get-nft-item-address/#get-","title":"\u0427\u0435\u0440\u0435\u0437 get-\u043c\u0435\u0442\u043e\u0434","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    nft_index = 1\n    collection_address = \"EQ...\"\n\n    nft_address = await Collection.get_nft_address_by_index(\n        client,\n        nft_index,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/get-nft-item-address/#_2","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442","text":"<p>Note</p> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 NFT Item, \u0441\u043b\u0435\u0434\u0443\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> <pre><code>from tonutils.nft import Collection\n\n\ndef main() -&gt; None:\n    nft_index = 1\n    nft_item_code = \"...\"\n    collection_address = \"EQ...\"\n\n    nft_address = Collection.calculate_nft_item_address(\n        nft_index,\n        nft_item_code,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/get-nft-item-address/#ton-dns-domains","title":"\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f TON DNS Domains","text":"<p>Note</p> <p>\u0418\u043d\u0434\u0435\u043a\u0441 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a <code>slice_hash(name)</code>. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0445\u0435\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0439 FunC.</p>"},{"location":"ru/how-to/get-nft-item-address/#get-_1","title":"\u0427\u0435\u0440\u0435\u0437 get-\u043c\u0435\u0442\u043e\u0434","text":"<pre><code>from pytoniq_core import begin_cell\nfrom tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection\nfrom tonutils.utils import slice_hash\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    domain_name = \"temp\"\n    domain_index = slice_hash(begin_cell().store_string(domain_name))\n    collection_address = \"EQ...\"\n\n    nft_address = await Collection.get_nft_address_by_index(\n        client,\n        domain_index,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/get-nft-item-address/#_3","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442","text":"<p>Note</p> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 NFT Item, \u0441\u043b\u0435\u0434\u0443\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> <pre><code>from pytoniq_core import begin_cell\nfrom tonutils.nft import Collection\nfrom tonutils.utils import slice_hash\n\n\ndef main() -&gt; None:\n    domain_name = \"temp\"\n    domain_index = slice_hash(begin_cell().store_string(domain_name))\n    nft_item_code = \"...\"\n    collection_address = \"EQ...\"\n\n    nft_address = Collection.calculate_nft_item_address(\n        domain_index,\n        nft_item_code,\n        collection_address,\n        index_len=256,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/get-nft-item-address/#telegram-gifts-anonymous-telegram-numbers","title":"Telegram Gifts / Anonymous Telegram Numbers","text":"<p>Note</p> <p>\u0418\u043d\u0434\u0435\u043a\u0441 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a <code>string_hash(telemint_token_name)</code>. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0445\u0435\u0448-\u0444\u0443\u043d\u043a\u0446\u0438\u0439 FunC.</p>"},{"location":"ru/how-to/get-nft-item-address/#get-_2","title":"\u0427\u0435\u0440\u0435\u0437 get-\u043c\u0435\u0442\u043e\u0434","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.nft import Collection\nfrom tonutils.utils import string_hash\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client()\n    telemint_token_name = \"8888888\"\n    token_index = string_hash(telemint_token_name)\n    collection_address = \"EQ...\"\n\n    nft_address = await Collection.get_nft_address_by_index(\n        client,\n        token_index,\n        collection_address,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/get-nft-item-address/#_4","title":"\u041b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442","text":"<p>Note</p> <p>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u044c\u0442\u0435 \u043a\u043e\u0434 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 NFT Item, \u0441\u043b\u0435\u0434\u0443\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430.</p> <pre><code>from tonutils.nft import Collection\nfrom tonutils.utils import string_hash\n\n\ndef main() -&gt; None:\n    telemint_token_name = \"8888888\"\n    token_index = string_hash(telemint_token_name)\n    nft_item_code = \"...\"\n    collection_address = \"EQ...\"\n\n    nft_address = Collection.calculate_nft_item_address(\n        token_index,\n        nft_item_code,\n        collection_address,\n        index_len=256,\n        is_telemint_token=True,\n    )\n    print(nft_address.to_str())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/send-claim-mintless-jetton/","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430/\u0417\u0430\u043f\u0440\u043e\u0441 Mintless Jetton","text":"<p>\u042d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c (claim) \u0438\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c Jetton Mintless \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>TonapiClient</code>.</p> <p>Note</p> <p>\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c API-\u043a\u043b\u044e\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 tonconsole.com.</p>"},{"location":"ru/how-to/send-claim-mintless-jetton/#mintless-jetton","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c Mintless Jetton","text":"<pre><code>from typing import Any, Dict, Union\n\nimport aiohttp\nfrom aiohttp import ClientResponseError\nfrom pytoniq_core import Address, Cell, Slice, StateInit, begin_cell\n\nfrom tonutils.client import TonapiClient\nfrom tonutils.jetton import JettonWalletStandard\nfrom tonutils.utils import to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# API key for accessing the Tonapi (obtainable from https://tonconsole.com)\nAPI_KEY = \"\"\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Comment for transfer payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = TonapiClient(api_key=API_KEY)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_data = await get_jetton(client, wallet.address.to_str())\n    if jetton_data is None:\n        raise Exception(\"Jetton data not found. Are there jettons in this wallet?\")\n\n    jetton_balance = int(jetton_data[\"balance\"])\n    custom_payload_api_uri = jetton_data[\"jetton\"][\"custom_payload_api_uri\"]\n    jetton_custom_payload = await get_payload(custom_payload_api_uri, wallet.address.to_str())\n    jetton_wallet_address = jetton_custom_payload[\"jetton_wallet\"]\n\n    if not await is_claimed(client, jetton_wallet_address):\n        custom_payload = Cell.one_from_boc(jetton_custom_payload[\"custom_payload\"])\n        state_init = StateInit.deserialize(Slice.one_from_boc(jetton_custom_payload[\"state_init\"]))\n    else:\n        custom_payload = state_init = None\n\n    body = JettonWalletStandard.build_transfer_body(\n        recipient_address=Address(DESTINATION_ADDRESS),\n        response_address=wallet.address,\n        jetton_amount=jetton_balance,\n        custom_payload=custom_payload,\n        forward_payload=(\n            begin_cell()\n            .store_uint(0, 32)\n            .store_snake_string(COMMENT)\n            .end_cell()\n        ),\n        forward_amount=1,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.1,\n        body=body,\n        state_init=state_init,\n        bounce=True,\n    )\n\n    print(f\"Successfully transferred {to_amount(jetton_balance)} jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nasync def get_jetton(client: TonapiClient, addr: str) -&gt; Union[Dict[str, Any], None]:\n    method = f\"/v2/accounts/{addr}/jettons\"\n    params = {\"supported_extensions\": \"custom_payload\"}\n    try:\n        result = await client._request(\"GET\", path=method, params=params)  # noqa\n        return next(\n            (b for b in result.get(\"balances\", [])\n             if Address(b[\"jetton\"][\"address\"]) == Address(JETTON_MASTER_ADDRESS)),\n            None\n        )\n    except Exception as e:\n        print(f\"Error fetching jetton data: {e}\")\n        return None\n\n\nasync def get_payload(api_uri: str, wallet_address: str) -&gt; Dict[str, Any]:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"{api_uri}/wallet/{wallet_address}\") as response:\n            response.raise_for_status()\n            return await response.json()\n\n\nasync def is_claimed(client: TonapiClient, jetton_addr: str) -&gt; bool:\n    try:\n        result = await client.run_get_method(jetton_addr, \"is_claimed\")\n        return bool(result[0])\n    except ClientResponseError as e:\n        if e.status == 404:\n            return False\n        raise\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/send-claim-mintless-jetton/#mintless-jetton_1","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c Mintless Jetton","text":"<pre><code>from typing import Any, Dict, Union\n\nimport aiohttp\nfrom aiohttp import ClientResponseError\nfrom pytoniq_core import Address, Cell, Slice, StateInit\n\nfrom tonutils.client import TonapiClient\nfrom tonutils.jetton import JettonWalletStandard\nfrom tonutils.utils import to_amount\nfrom tonutils.wallet import WalletV4R2\n\n# API key for accessing the Tonapi (obtainable from https://tonconsole.com)\nAPI_KEY = \"\"\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n\nasync def main() -&gt; None:\n    client = TonapiClient(api_key=API_KEY)\n    wallet, _, _, _ = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    jetton_data = await get_jetton(client, wallet.address.to_str())\n    if jetton_data is None:\n        raise Exception(\"Jetton data not found. Are there jettons in this wallet?\")\n\n    jetton_balance = int(jetton_data[\"balance\"])\n    custom_payload_api_uri = jetton_data[\"jetton\"][\"custom_payload_api_uri\"]\n    jetton_custom_payload = await get_payload(custom_payload_api_uri, wallet.address.to_str())\n    jetton_wallet_address = jetton_custom_payload[\"jetton_wallet\"]\n\n    if not await is_claimed(client, jetton_wallet_address):\n        custom_payload = Cell.one_from_boc(jetton_custom_payload[\"custom_payload\"])\n        state_init = StateInit.deserialize(Slice.one_from_boc(jetton_custom_payload[\"state_init\"]))\n    else:\n        print(\"Jetton already claimed!\")\n        return\n\n    body = JettonWalletStandard.build_transfer_body(\n        recipient_address=wallet.address,\n        response_address=wallet.address,\n        jetton_amount=jetton_balance,\n        custom_payload=custom_payload,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=jetton_wallet_address,\n        amount=0.1,\n        body=body,\n        state_init=state_init,\n        bounce=True,\n    )\n\n    print(f\"Successfully claimed {to_amount(jetton_balance)} jettons!\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nasync def get_jetton(client: TonapiClient, addr: str) -&gt; Union[Dict[str, Any], None]:\n    method = f\"/v2/accounts/{addr}/jettons\"\n    params = {\"supported_extensions\": \"custom_payload\"}\n    try:\n        result = await client._request(\"GET\", path=method, params=params)  # noqa\n        return next(\n            (b for b in result.get(\"balances\", [])\n             if Address(b[\"jetton\"][\"address\"]) == Address(JETTON_MASTER_ADDRESS)),\n            None\n        )\n    except Exception as e:\n        print(f\"Error fetching jetton data: {e}\")\n        return None\n\n\nasync def get_payload(api_uri: str, wallet_address: str) -&gt; Dict[str, Any]:\n    async with aiohttp.ClientSession() as session:\n        async with session.get(f\"{api_uri}/wallet/{wallet_address}\") as response:\n            response.raise_for_status()\n            return await response.json()\n\n\nasync def is_claimed(client: TonapiClient, jetton_addr: str) -&gt; bool:\n    try:\n        result = await client.run_get_method(jetton_addr, \"is_claimed\")\n        return bool(result[0])\n    except ClientResponseError as e:\n        if e.status == 404:\n            return False\n        raise\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/send-encrypted-message/","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434 TON \u0441 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c. \u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442, \u0447\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044e.</p>"},{"location":"ru/how-to/send-encrypted-message/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from tonutils.client import ToncenterV3Client\nfrom tonutils.wallet import WalletV4R2\n\n# Set to True for test network, False for main network\nIS_TESTNET = True\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# Address of the recipient wallet\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Amount to transfer in TON\nTRANSFER_AMOUNT = 0.01\n\n# Comment to include in the transfer payload\nCOMMENT = \"Hello from tonutils!\"\n\n\nasync def main() -&gt; None:\n    client = ToncenterV3Client(is_testnet=IS_TESTNET, rps=1, max_retries=1)\n    wallet, public_key, private_key, mnemonic = WalletV4R2.from_mnemonic(client, MNEMONIC)\n\n    body = await wallet.build_encrypted_comment_body(\n        text=COMMENT,\n        destination=DESTINATION_ADDRESS,\n    )\n\n    tx_hash = await wallet.transfer(\n        destination=DESTINATION_ADDRESS,\n        amount=TRANSFER_AMOUNT,\n        body=body,\n    )\n\n    print(f\"Successfully transferred {TRANSFER_AMOUNT} TON to address {DESTINATION_ADDRESS}.\")\n    print(f\"Transaction hash: {tx_hash}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/send-gasless-transaction/","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438 \u0411\u0435\u0437 \u041a\u043e\u043c\u0438\u0441\u0441\u0438\u0438","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442, \u043a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434 Jetton \u0431\u0435\u0437 \u043e\u043f\u043b\u0430\u0442\u044b \u0433\u0430\u0437\u0430 (gasless).</p> <p>Note</p> <p>\u041c\u0435\u0442\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e gasless relayer, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u0443\u044e \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c tonapi.io. \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c API-\u043a\u043b\u044e\u0447 \u043d\u0430 tonconsole.com.</p>"},{"location":"ru/how-to/send-gasless-transaction/#_1","title":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438:</p> <pre><code>pip install pytonapi\n</code></pre>"},{"location":"ru/how-to/send-gasless-transaction/#_2","title":"\u041f\u0440\u0438\u043c\u0435\u0440","text":"<pre><code>from pytonapi import AsyncTonapi\nfrom pytoniq_core import Address, Cell\n\nfrom tonutils.client import TonapiClient\nfrom tonutils.jetton import JettonMasterStandard, JettonWalletStandard\nfrom tonutils.utils import to_nano\nfrom tonutils.wallet import WalletV5R1\n\n# API key for accessing the Tonapi (obtainable from https://tonconsole.com)\nAPI_KEY = \"\"\n\n# Mnemonic phrase\nMNEMONIC = \"word1 word2 word3 ...\"\n\n# The address of the Jetton Master contract\nJETTON_MASTER_ADDRESS = \"EQ...\"\n\n# Number of decimal places for the Jetton\nJETTON_DECIMALS = 9\n\n# Amount of Jettons to transfer (in base units, considering decimals)\nJETTON_AMOUNT = 0.01\n\n# The address of the recipient\nDESTINATION_ADDRESS = \"UQ...\"\n\n# Amount for jetton transfer.\nBASE_JETTON_SEND_AMOUNT = 0.05\n\n\nasync def main() -&gt; None:\n    tonapi, client = AsyncTonapi(api_key=API_KEY), TonapiClient(api_key=API_KEY)\n    wallet, public_key, private_key, _ = WalletV5R1.from_mnemonic(client, MNEMONIC)\n\n    gasless_config = await tonapi.gasless.get_config()\n    relayer_address = Address(gasless_config.relay_address)\n\n    jetton_wallet_address = await JettonMasterStandard.get_wallet_address(\n        client=client,\n        owner_address=wallet.address,\n        jetton_master_address=JETTON_MASTER_ADDRESS,\n    )\n    tether_transfer_body = JettonWalletStandard.build_transfer_body(\n        jetton_amount=to_nano(JETTON_AMOUNT, JETTON_DECIMALS),\n        recipient_address=Address(DESTINATION_ADDRESS),\n        response_address=relayer_address,\n        forward_amount=1,\n    )\n    message_to_estimate = wallet.create_internal_msg(\n        dest=jetton_wallet_address,\n        value=to_nano(BASE_JETTON_SEND_AMOUNT),\n        body=tether_transfer_body,\n    )\n\n    sign_raw_params = await tonapi.gasless.estimate_gas_price(\n        master_id=JETTON_MASTER_ADDRESS,\n        body={\n            \"wallet_address\": wallet.address.to_str(),\n            \"wallet_public_key\": public_key.hex(),\n            \"messages\": [\n                {\n                    \"boc\": message_to_estimate.serialize().to_boc().hex(),\n                }\n            ]\n        }\n    )\n\n    try:\n        seqno = await WalletV5R1.get_seqno(client, wallet.address)\n    except (Exception,):\n        seqno = 0\n\n    tether_transfer_for_send = wallet.create_signed_internal_msg(\n        messages=[\n            wallet.create_wallet_internal_message(\n                destination=Address(message.address),\n                value=int(message.amount),\n                body=Cell.one_from_boc(message.payload),\n            ) for message in sign_raw_params.messages\n        ],\n        seqno=seqno,\n        valid_until=sign_raw_params.valid_until,\n    )\n    ext_message = wallet.create_external_msg(\n        dest=wallet.address,\n        body=tether_transfer_for_send,\n        state_init=wallet.state_init if seqno == 0 else None,\n    )\n\n    await tonapi.gasless.send(\n        body={\n            \"wallet_public_key\": public_key.hex(),\n            \"boc\": ext_message.serialize().to_boc().hex(),\n        }\n    )\n\n    print(f\"A gasless transfer sent!\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"ru/how-to/use-func-hash-functions/","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0425\u0435\u0448-\u0424\u0443\u043d\u043a\u0446\u0438\u0439 FunC","text":""},{"location":"ru/how-to/use-func-hash-functions/#cell_hash","title":"cell_hash","text":"<p>\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0445\u0435\u0448 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0438 <code>c</code> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u0432\u0438\u0434\u0435 256-\u0431\u0438\u0442\u043d\u043e\u0433\u043e \u0431\u0435\u0437 \u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 <code>x</code>. \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 \u044f\u0447\u0435\u0435\u043a.</p> <pre><code>from tonutils.utils import cell_hash\nfrom pytoniq_core import begin_cell\n\n\ndef main() -&gt; None:\n    c = begin_cell().store_string(\"ness\").end_cell()\n    x = cell_hash(c)\n    print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/use-func-hash-functions/#slice_hash","title":"slice_hash","text":"<p>\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0445\u0435\u0448 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0440\u0435\u0437\u0430 <code>s</code> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u0432\u0438\u0434\u0435 256-\u0431\u0438\u0442\u043d\u043e\u0433\u043e \u0431\u0435\u0437 \u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 <code>x</code>. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u0435\u043d \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u044f\u0447\u0435\u0439\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 <code>s</code>, \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c \u0435\u0451 \u0445\u0435\u0448\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>cell_hash</code>.</p> <pre><code>from tonutils.utils import slice_hash\nfrom pytoniq_core import begin_cell\n\n\ndef main() -&gt; None:\n    s = begin_cell().store_string(\"ness\")\n    x = slice_hash(s)\n    print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"ru/how-to/use-func-hash-functions/#string_hash","title":"string_hash","text":"<p>\u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 SHA-256 \u0445\u0435\u0448 \u0431\u0438\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0440\u0435\u0437\u0435 <code>s</code>. \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 <code>s</code> \u0432 \u0431\u0438\u0442\u0430\u0445 \u043d\u0435 \u043a\u0440\u0430\u0442\u043d\u0430 \u0432\u043e\u0441\u044c\u043c\u0438, \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 cell underflow. \u0425\u0435\u0448 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 256-\u0431\u0438\u0442\u043d\u043e\u0433\u043e \u0431\u0435\u0437\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0433\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 <code>x</code>.</p> <pre><code>from tonutils.utils import string_hash\n\n\ndef main() -&gt; None:\n    s = \"ness\"\n    x = string_hash(s)\n    print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"}]}